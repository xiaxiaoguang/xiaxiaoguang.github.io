<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiaxiaoguang.github.io</id>
    <title>夏晓光(loveJY)的博客</title>
    <updated>2020-03-27T23:51:30.676Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiaxiaoguang.github.io"/>
    <link rel="self" href="https://xiaxiaoguang.github.io/atom.xml"/>
    <subtitle>仍要向下扎根,向上结果</subtitle>
    <logo>https://xiaxiaoguang.github.io/images/avatar.png</logo>
    <icon>https://xiaxiaoguang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夏晓光(loveJY)的博客</rights>
    <entry>
        <title type="html"><![CDATA[CF526G Spiders Evil Plan]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf526g-spiders-evil-plan/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf526g-spiders-evil-plan/">
        </link>
        <updated>2020-03-27T23:16:09.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>最近莫名其妙的繁忙,是文化课更用功了吗?因为感觉不像颓了啊....</p>
<figure data-type="image" tabindex="1"><img src="https://xiaxiaoguang.github.io/post-images/1585351069348.png" alt="" loading="lazy"></figure>
<ul>
<li>给定一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个节点的无根树，每条边有边权。</li>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 次询问，每次询问给出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，你需要选择 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 条树上的路径，使这些路径形成一个包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的连通块，且连通块中包含的边权和最大。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n, q \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，强制在线。</li>
</ul>
<p>well,我承认一开始看成选边了,然后一点也没做出来,想了一个很假的n^2(</p>
<p>既然要选就选一条路径,那么我们可以考虑拿出一个结论</p>
<blockquote>
<p>任意一个有k个叶子的树我们只需要k/2上取整条路径就能全覆盖</p>
</blockquote>
<p>有了这个结论我们贪心就好贪了,问题变成在原树中选取一些叶子,使他们组成的极小连通块边权和最大</p>
<p>我们会发现直径的某一端点一定会被选,但是直径不定被选上...比如只有一条路径的情况</p>
<p>然后我们就可以分别以这两个直径端点为根建树,然后问题就是在其中子树选2k-1个叶子,最大化打通他们<code>到根</code>的边权和...<s>还是不会做</s></p>
<p>考虑带边权的长链剖分啊所以我们只需要选前2y-1个最长链就好啦!!!实现的时候我们可以先把链头都存到数组里排序一下....</p>
<p>不过显然选完之后不一定经过x,需要微调</p>
<h2 id="case-1">case 1</h2>
<p>先选前2k-2条长链,然后第k条选择从x上方一个在前2k-2条长链中的点到x子树的叶子最大的</p>
<p>就是:<img src="https://xiaxiaoguang.github.io/post-images/1585352713244.png" alt="" loading="lazy"></p>
<p>##case 2</p>
<p>选择前2k-1条长链,然后x去更换某条长链</p>
<p>就是<img src="https://xiaxiaoguang.github.io/post-images/1585352967733.png" alt="" loading="lazy"></p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#define pi pair&lt;int,int&gt;
using std::max;
using std::sort;
const int MAXN = 4e5 + 7;
int n, q, k, s, ans, ccnt;
int home[MAXN], nxt[MAXN], to[MAXN], len[MAXN];


inline void ct(int x, int y, int z) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	len[ccnt] = z;
}

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = BUF_SIZE + buf;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}

}
using namespace fastIO;
const int MAXM = 2e5 + 7;
struct rec {
	int root, f[MAXM][21], g[MAXM][21], d[MAXN], dep[MAXN], son[MAXN], top[MAXN], rnk[MAXN];
	int l[MAXN], r[MAXN], s[MAXN], t;

	void dfs1(int u, int F) {
		//printf(&quot;%d %d\n&quot;,u,F);
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != F) {
				d[v] = d[u] + len[i],
					   dfs1(v, u);
                       //得到dis值
			}
		}
	}

	void dfs2(int u) {
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != f[u][0]) {
				f[v][0] = u;
				g[v][0] = len[i];
				for(int j = 0; f[v][j]; ++j) {
					f[v][j + 1] = f[f[v][j]][j];
					g[v][j + 1] = g[v][j] + g[f[v][j]][j];
				}
				d[v] = d[u] + len[i];
				dfs2(v);
				if(dep[v] + len[i] &gt; dep[u])
					dep[u] = dep[v] + len[i], son[u] = v;
                    //深度最大的
			}
		}//长链剖分??
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != f[u][0] &amp;&amp; v != son[u])
				s[l[++t] = v] = dep[v] + len[i];
                //其他边向上到链头的距离
			    //其实就是把链头拿出来了
		}
	}

	void getroot(int u) {
		dfs1(u, 0);
		root = u;
		for(int i = 1; i &lt;= n; ++i)if(d[i] &gt; d[root])root = i;
		//直径一端点
		d[root] = 0;
		dfs2(root);
		s[l[++t] = root] = dep[root];
		sort(l + 1, l + t + 1, [&amp;](int i, int j) {
			return s[i] &gt; s[j];
		});
		//按照dep从大到小
		for(int i = 1; i &lt;= t; ++i)r[i] = r[i - 1] + s[l[i]];
		for(int i = 1; i &lt;= t; ++i) {
			int x = l[i], p = x;
			while(x) {
				top[x] = p;
				rnk[x] = i;//第几条长链,这里是按照长度排过序的
				//处理top
				x = son[x];
			}
		}
		//for(int i=1; i&lt;=n; ++i) {
		//	printf(&quot;%d %d %d %d %d %d %d %d\n&quot;,s[i],top[i],rnk[i],son[i],dep[i],d[i],f[i][0],g[i][1]);
		///}
	}

	inline int plan1(int x, int y) {
		int z = dep[x];
		for(int i = 20; ~i; --i) {
			if(rnk[f[x][i]] &gt;= y)z += g[x][i], x = f[x][i];
		}
		return r[y - 1] + z + g[x][0];
		//先用z-1条链
		//再用一条从x的叶子-&gt;z最长的打通x
	}

	inline int plan2(int x, int y) {
		int z = dep[x];
		for(int i = 20; ~i; --i) {
			if(rnk[f[x][i]] &gt; y)z += g[x][i], x = f[x][i];
		}
		return r[y] - dep[f[x][0]] + z + g[x][0];
		//选前y条,然后扣去第y条后半部分接上x
	}
	inline int ask(int x, int y) {
		y = 2 * y - 1;
		return rnk[x] &lt;= y ? r[y] : max(plan1(x, y), plan2(x, y));
	}

} t[2];
int in[MAXN];
int main() {
	///freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	n = read();
	q = read();
	for(int i = 1, x, y, z; i &lt; n; ++i) {
		x = read(), y = read(), z = read();
		ct(x, y, z);
		ct(y, x, z);
		in[x]++;
		in[y]++;
		s += z;
	}
	for(int i = 1; i &lt;= n; ++i)k += (in[i] == 1);
	//	printf(&quot;%d?\n&quot;, k);
	t[0].getroot(1), t[1].getroot(t[0].root);

	for(int i = 1, x, y; i &lt;= q; ++i) {
		x = read(), y = read();
		x = (x + ans - 1) % n + 1;
		y = (y + ans - 1) % n + 1;
		ans = (2 * y &gt;= k ? s : max(t[0].ask(x, y), t[1].ask(x, y)));
		printf(&quot;%d\n&quot;, ans);
	}
	return 0;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF521E Cycling City]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf521e-cycling-city/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf521e-cycling-city/">
        </link>
        <updated>2020-03-26T13:47:27.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>已经预感不能再像现在这样刷题了...唉,准备开学吧</p>
<ul>
<li>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 条边的无向简单图。</li>
<li>问图中能否找到两个点，满足这两个点之间有至少三条完全不相交的简单路径。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,m \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，图不保证连通。</li>
</ul>
<p>这个题真的是构造题啊....因为我们只需要构造出一种通用的情境满足题意就行了QAQ,所以图论好像大部分这样裸的都是构造啊</p>
<p>怎么构造呢?先观察样例<img src="https://xiaxiaoguang.github.io/post-images/1585230661234.png" alt="" loading="lazy"></p>
<p>不难发现一个合法的一对点一定是<code>两个环重复的部分</code></p>
<p>这个显然充分,必要性....因为是无向图好像是一样的吧QAQ....</p>
<p>所以问题变成了找有没有这样被两环覆盖的,经典问题</p>
<p>考虑先建出dfs树,然后对于一条非树边暴力覆盖到另一端点上所有点,然后直到某一刻有一个点被覆盖了2次,说明他是两环重复了</p>
<p>我们覆盖时也并不直接记次数,而是记哪条非树边覆盖他</p>
<p>不妨令 dfs 树作为生成树，令 b 为 a 的祖先，d 为 c 的祖先，b 的深度比 d 的深度浅。</p>
<p>不需要任何分类讨论，画个图就很容易明白，三条路径铁定就是：</p>
<ul>
<li>d -&gt; lca(a, c)</li>
<li>d -&gt; b -&gt; a -&gt; lca(a, c)</li>
<li>d -&gt; c -&gt; lca(a, c)</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/062uwbm4.png" alt="" loading="lazy"></figure>
<p>这样就好了所以我们还差个复杂度分析/jk</p>
<p>你会惊人的发现每个点最多被这样暴力跳过一次,因为如果暴力跳过两次就相当于找到答案了</p>
<p>所以复杂度是线性的</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#define ll long long
#define CT const int&amp;
using std::reverse;
const int MAXN = 6e5 + 7;
int n, m, ccnt;
int home[MAXN], nxt[MAXN], to[MAXN];
bool vis[MAXN], ins[MAXN];
int fa[MAXN], deep[MAXN];
int cx[MAXN], cy[MAXN];

int LCA(int x, int y) {
	while(deep[x] &gt; deep[y])x = fa[x];
	while(deep[y] &gt; deep[x])y = fa[y];
	while(x != y)x = fa[x], y = fa[y];
	return x;
}

int tmp[MAXN], tp;

inline void ct(CT x, CT y) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}

void addpath(int x, int y) {
	while(x != y) {
		tmp[++tp] = x;
		x = fa[x];
	}
	tmp[++tp] = y;
}
void print() {
	printf(&quot;%d &quot;, tp);
	for(int i = 1; i &lt;= tp; ++i) {
		printf(&quot;%d &quot;, tmp[i]);
	}
	puts(&quot;&quot;);
	tp = 0;
}

#define swap(x,y) (x^=y^=x^=y)
inline void get(int a, int b, int c, int d) {
	if(deep[b] &gt; deep[d]) {
		swap(a, c);
		swap(b, d);
	}
	int e = LCA(a, c);
	puts(&quot;YES&quot;);

    //就是对应了上图画的三种情况啊
	addpath(e, d);
	reverse(tmp + 1, tmp + tp + 1);
	print();

	addpath(d, b);
	addpath(a, e);
	print();

	tmp[++tp] = d;
	addpath(c, e);
	print();

	exit(0);
}

inline void dfs(int u) {
	deep[u] = deep[fa[u]] + 1;
	vis[u] = ins[u] = 1;
	//printf(&quot;%d?\n&quot;, u);
	for(int i = home[u]; i; i = nxt[i]) {
		int v = to[i];
		if(v != fa[u]) {
			if(!vis[v]) {
				fa[v] = u;
				dfs(v);
			} else if(ins[v]) {
				for(int x = u; x != v; x = fa[x]) {//这一步线性
					if(cx[x] &amp;&amp; cy[x]) {
						get(cx[x], cy[x], u, v);//这两个路径交点
					} else {
						cx[x] = u;
						cy[x] = v;//标记一整个路径
					}
				}
			}
		}
	}
	ins[u] = 0;
}

int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1, u, v; i &lt;= m; ++i) {
		scanf(&quot;%d%d&quot;, &amp;u, &amp;v);
		ct(u, v);
		ct(v, u);
	}
	for(int i = 1; i &lt;= n; ++i)if(!vis[i])dfs(i);
	puts(&quot;NO&quot;);
	return 0;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF555E Case of Computer Network]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf555e-case-of-computer-network/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf555e-case-of-computer-network/">
        </link>
        <updated>2020-03-26T03:37:35.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>腾个题面,先咕着</p>
<ul>
<li>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 条边的无向图。</li>
<li>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 组有向点对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(s, t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>。</li>
<li>询问是否存在使得所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 都能到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 的无向图中每条边的定向方案。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>q</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,m,q \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>我们考虑现在原图上处理一下...如果能得到一个简化后的问题我们就能做了!</p>
<p>比如?树上问题,如果这个是一颗树,能不能满足这些限制就是一个树上差分类似的统计就行了</p>
<p>而一般图变成树?又和连通性有关?仙人掌?圆方树?好像都行??/惊恐</p>
<p>当然我们不需要那么复杂的缩点,只需要缩边双就好啦!</p>
<p>为啥呢?首先我们缩了边双后图成为一棵树....而且同一个点内一定满足有一种合法的安排边的方法能使条件满足!</p>
<p>因为如是一个环我们就都朝某个方向就一定可以</p>
<p>最后树上统计只需要看一条边是否有被要求向上同时向下就好</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#define CT const int &amp;
#define min(x,y) ((x)&lt;(y)?(x):(y))
namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}

	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
#undef BUF_SIZE
}
using namespace fastIO;

const int MAXN = 4e5 + 9;

int home[MAXN], nxt[MAXN], to[MAXN], st[MAXN], first[MAXN], ccnt = 1, cccnt = 1;
int col[MAXN], dfn[MAXN], low[MAXN], num, son[MAXN],
	fa[MAXN], siz[MAXN], top[MAXN], dep[MAXN], tot,
	bel[MAXN], ins[MAXN], tp, frm[MAXN];

struct edge {
	int nxt, to;
} e[MAXN];

inline void ct1(CT x, CT y) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	frm[ccnt] = x;
}

inline void ct2(CT x, CT y) {
	++cccnt;
	e[cccnt].to = y;
	e[cccnt].nxt = first[x];
	first[x] = cccnt;
}

void tarjan(int u, int fr) {
	dfn[u] = low[u] = ++num;
	col[u] = col[0];
	st[++tp] = u, ins[u] = 1;
	///printf(&quot;%d? %d\n&quot;, u, fr);
	for(int i = home[u]; i; i = nxt[i]) {
		int v = to[i];
		if((i ^ 1) == fr)continue;
		if(!dfn[v]) {
			tarjan(v, i);
			low[u] = min(low[u], low[v]);
		} else if(ins[v])low[u] = min(dfn[v], low[u]);
	}
	if(dfn[u] == low[u]) {
		int v = 0;
		++tot;
		while(v != u) {
			v = st[tp];
			--tp;
			bel[v] = tot;
			ins[v] = 0;
		}
	}
}

inline void dfs1(int u, int F) {
	dep[u] = dep[F] + 1;
	fa[u] = F;
	siz[u] = 1;
	//printf(&quot;%d! %d\n&quot;, u, F);

	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == F)continue;
		dfs1(v, u);
		siz[u] += siz[v];
		if(siz[v] &gt; siz[son[u]])son[u] = v;
	}
}

inline void dfs2(int u, int topf) {
	top[u] = topf;
	//printf(&quot;%d %d\n&quot;, u, topf);
	if(son[u])dfs2(son[u], topf);
	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == fa[u] || v == son[u])continue;
		dfs2(v, v);
	}

}
#define swap(x,y) (x^=y^=x^=y)
inline int LCA(int x, int y) {
	while(top[x] != top[y]) {
		//printf(&quot;%d %d\n&quot;, x, y);
		if(dep[top[x]] &lt; dep[top[y]])swap(x, y);
		x = fa[top[x]];
	}
	return dep[x] &lt; dep[y] ? x : y;
}

int up[MAXN], down[MAXN], tag[MAXN];

inline void dfs3(int u) {
	tag[u] = 1;
	//printf(&quot;%d?\n&quot;, u);
	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == fa[u])continue;
		dfs3(v);
		up[u] += up[v];
		down[u] += down[v];
	}
}

int n, m, q;

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	m = read();
	q = read();
	for(register int i = 1, x, y; i &lt;= m; ++i) {
		x = read();
		y = read();
		ct1(x, y);
		ct1(y, x);
	}
	//puts(&quot;Qwqw&quot;);
	for(register int i = 1; i &lt;= n; ++i) {
		if(!dfn[i]) {
			col[0]++;
			tarjan(i, 0);
		}
	}
	for(register int i = 2; i &lt;= ccnt; i += 2) {
		int x = frm[i];
		int y = to[i];
		//printf(&quot;%d %d\n&quot;, x, y);
		if(bel[x] == bel[y])continue;
		ct2(bel[x], bel[y]);
		ct2(bel[y], bel[x]);
	}
	for(register int i = 1; i &lt;= n; ++i) {
		if(!dep[i]) {
			dfs1(i, 0);
			dfs2(i, i);
		}
	}
	// for(int i = 1; i &lt;= n; ++i) {
	// 	printf(&quot;%d %d %d %d\n&quot;, i, dep[i], fa[i], siz[i]);
	// }
	for(register int x, y, i = 1; i &lt;= q; ++i) {
		x = read();
		y = read();
		if(col[x] != col[y])return puts(&quot;No&quot;), 0;
		x = bel[x], y = bel[y];
		int anc = LCA(x, y);
		up[x]++;
		up[anc]--;
		down[y]++;
		down[anc]--;
	}
	for(register int i = 1; i &lt;= n; ++i)if(!tag[i])dfs3(i);
	for(register int i = 1; i &lt;= n; ++i) {
		if(up[i] &amp;&amp; down[i]) {
			return puts(&quot;No&quot;), 0;
		}
	}
	return 	puts(&quot;Yes&quot;), 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF521D Shop]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf521d-shop/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf521d-shop/">
        </link>
        <updated>2020-03-26T01:43:23.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>没什么好说的,贪心啊</p>
<ul>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo>…</mo><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{1\dots k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个操作，每个操作给定正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，有三种可能：将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 赋值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 加上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 乘以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>。</li>
<li>你可以从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个操作中选择最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个操作，并按照一定顺序执行。</li>
<li>你的目标是最大化 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\prod_{i=1}^k a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2887179999999998em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ 的值。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo separator="true">,</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">k,n \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>然后你会发现这个问题一定是贪心,因为如果是DP我们连这些东西乘起来的答案都记不下来</p>
<p>那就分析三种操作吧</p>
<h2 id="操作1乘">操作1.乘</h2>
<p>相当于答案变成了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>∗</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b*\prod_{i=1}^{n}a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>也就是说乘对于任何都是一样的,我们只需要把它按乘数大小排序就行了</p>
<blockquote>
<p>注意乘法有一个性质,就是可以任意先后的执行,因为原题还要我们自定顺序,<s>这个真的恶心吗?</s></p>
</blockquote>
<h2 id="操作2加">操作2.加</h2>
<p>加...好像可以变成乘法?</p>
<p>比如把x加上y就相当于x乘上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mi>x</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{x+y}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.199439em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>然后好像就可以排序和乘法一样了?不过这个成立的前提是我们每次加法只从大的开始加起...</p>
<p>感性理解一下好像我们也应该从大的还是加喵?所以我们一定从大到小加啊</p>
<h2 id="操作3赋值">操作3.赋值</h2>
<p>这个显然不能像之前莽,要分析一下</p>
<p>首先一个数最多赋值一次,因为如果不的话相当于我们白浪费了一次操作,搜索一可以先去掉劣的...</p>
<p>然后经过初步筛选之后就可以看做一个加法?加上了y-x,就可以放进操作2中一起做了</p>
<p>这个为啥是对的啊?有个本题最关键的结论</p>
<blockquote>
<p>我们三个操作一定是按照先赋值再加再乘的顺序来的</p>
</blockquote>
<p>因为赋值一定只放在一开始最优,加法一定要被乘法影响最大最优</p>
<p>唔母,这样我们就可以看做如果赋值了就是放在第一个,又因为没有两个赋值操作,所以一定可以</p>
<p>其他的由乘法可任意交换la</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define ll long long
const int MAXN = 1e5 + 7;
int n, m, k, tot1, tot2, tot3, cnt;
ll s[MAXN];
struct node {
	int opt, id, x;
	ll v, w;//w为分母
} m1[MAXN], m2[MAXN], m3[MAXN], ans[MAXN];

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}

	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

inline bool cmp1(node a, node b) {
	return (a.x != b.x) ? (a.x &lt; b.x) : (a.v &lt; b.v);
	//1
}
inline bool cmp2(node a, node b) {
	return (a.x != b.x) ? (a.x &lt; b.x) : (a.v &gt; b.v);
	//贪心
}
inline bool cmp3(node a, node b) {
	return a.opt &lt; b.opt;
	//qwq
}
inline bool cmp4(node a, node b) {
	return a.v * b.w &gt; a.w * b.v;
	//分数叉积判
}

void pre() {
	n = read();
	m = read();
	k = read();
	for(register int i = 1; i &lt;= n; ++i)s[i] = read();
	for(register int i = 1; i &lt;= m; ++i) {
		int a = read(), b = read(), c = read();
		if(a == 1 &amp;&amp; c &gt; s[b])m1[++tot1] = (node) {
			1, i, b, c, 1
		};//改了就不
		else if(a == 2)m2[++tot2] = (node) {
			2, i, b, c, 1
		};
		else if(a == 3) {
			m3[++tot3] = (node) {
				3, i, b, c, 1
			};
		}
	}
}

void build() {
	sort(m1 + 1, m1 + tot1 + 1, cmp1);
	int tmp = 0;
	for(register int i = 1; i &lt;= tot1; ++i) {
		if(m1[i].x != m1[i + 1].x)m1[++tmp] = m1[i];//赋值操作留最大
	}
	tot1 = tmp;
	for(register int i = 1; i &lt;= tot1; ++i) {
		m1[i].v = m1[i].v - s[m1[i].x], m2[++tot2] = m1[i];//赋值变成加法
	}
	//tot1 = tmp;
	sort(m2 + 1, m2 + tot2 + 1, cmp2);
	ll sum = 0;
	for(register int i = 1; i &lt;= tot2; ++i) {
		if(m2[i].x != m2[i - 1].x)sum = s[m2[i].x];
		m2[i].w = sum, sum += m2[i].v;
	}

	for(register int i = 1; i &lt;= tot3; ++i)m3[i].v--;
	for(register int i = 1; i &lt;= tot2; ++i)m3[++tot3] = m2[i];
}

inline void work() {
	sort(m3 + 1, m3 + tot3 + 1, cmp4);
	int tmp = min(tot3, k);
	for(register int i = 1; i &lt;= tmp; ++i)ans[++cnt] = m3[i];
	printf(&quot;%d\n&quot;, cnt);
	sort(ans + 1, ans + cnt + 1, cmp3);
	for(register int i = 1; i &lt;= cnt; ++i)printf(&quot;%d &quot;, ans[i].id);
	printf(&quot;\n&quot;);
}

int main() {
	//freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	pre();
	build();
	work();
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF516E Drazil and His Happy Friends]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf516e-drazil-and-his-happy-friends/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf516e-drazil-and-his-happy-friends/">
        </link>
        <updated>2020-03-25T22:54:14.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>果然集训队作业里面什么都有啊qwq</p>
<ul>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个男生 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个女生，编号分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim m - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 个男生和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> 个女生是快乐的，其他人是不快乐的。</li>
<li>在第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 天，编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">i \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的男生和编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">i \bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的女生会一起玩。<br>
如果他们俩中有一个人是快乐的，则另一个人也会变快乐。<br>
求至少要多少天所有人都会变快乐，或者判断不可能所有人都变快乐。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">n,m \le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo separator="true">,</mo><mi>g</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">b,g \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>看上去很可以暴力的样子,然而这个题是CF题,没有部分分....</p>
<p>我们首先想错位对齐有哪些数永远对不上...<br>
<img src="https://xiaxiaoguang.github.io/post-images/1585177883846.png" alt="" loading="lazy"><br>
发现可以mod gcd分组,同一组内至少要有一个1,这样至少在n*m天后能全开心,否则无解啊</p>
<p>所以只需要每一组答案求出来取个max就行</p>
<p>假设n&gt;m,且gcd(n,m)=1</p>
<p>那么如果有n个男生快乐了,除非天数小于m,所有的女生也一定快乐了,这是因为女生每天都至少被多影响一个人</p>
<p>所以我们只需要求出最后一个变快乐男生的时间,假定如果初始时女生快乐对应男生也快乐</p>
<p>那么一个男生x在t天变快乐了,就可以再经过m轮让使他变快乐的那个女生把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>t</mi><mo>+</mo><mi>m</mi><mo>)</mo><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(t+m)\bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>男生也快乐了</p>
<p>这个相当于同余最短路啊...连边<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mo>&gt;</mo><mo>(</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>)</mo><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">i-&gt;(i+m)\bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>长为m的边另外我们从S-&gt;i连一条长为i的边,因为第i天女生才能让他快乐</p>
<p>这样所有点最短路最大值就是答案啦,可是这个是1e9个点的,不可能过</p>
<p>考虑节省点数,压缩没有用的答案,因为初始快乐并不多所以我们考虑i和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>)</mo><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(i+m)\bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>二者如果都不快乐,那么i一定会在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>)</mo><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(i+m)\bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>前快乐,所以他的答案就没有用处了,我们把连向i的边连向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>)</mo><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(i+m)\bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>即可</p>
<p>这个思路是可以归纳到<code>只保留i或(i+m) mod n为快乐节点的节点</code>这个结论的,这样点数就只有b+g级别了</p>
<p>然后难点在于连边....我们考虑分几类边</p>
<ul>
<li>源点到初始快乐节点</li>
<li>被保留的第二类节点到初始快乐节点边长为m</li>
<li>从初始快乐节点到被保留某个节点,边长xm</li>
</ul>
<p>要求出第三类边长...我们考虑求那个被保留节点+m modn后的初始快乐节点是谁,那其实就相当于求modn意义下,每次向前跳m步,这样的一个初始快乐i遇到第一个初始快乐j是什么.....</p>
<p>直接做是n^2的,但是这个让人感觉有单调性,所以我们只需要把编号最小的那个点拿出来,对其他节点做一遍exgcd求出那个x,然后把那些节点按照x值排序,就可以得到快乐点i经过顺序,也就是要求的了</p>
<p>总复杂度O((b+g)log(b+g))?</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;queue&gt;
#include&lt;map&gt;
#include&lt;vector&gt;
#define ui unsigned int
using namespace std;
#define pi pair&lt;int,int&gt;
#define mp(x,y) make_pair(x,y)
#define ll long long
#define se second
#define fi first
//#define swap(x,y) (x^=y^=x^=y)

const int MAXN = 1e5 + 7;
const ll inf = 0x3f3f3f3f3f3f3f;
int n, m, d, B, G, b[MAXN], g[MAXN];
vector&lt;int&gt; a[MAXN &lt;&lt; 1], f[MAXN &lt;&lt; 1];
ll ans;

int gcd(int a, int b) {
    return b ? gcd(b, a % b) : a;
}

int exgcd(int a, int b, int &amp;x, int &amp;y, int d = 0) {
    return b ? (d = exgcd(b, a % b, y, x), y -= a / b * x, d) : (x = 1, y = 0, a);
}



namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
    static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
    inline char nc() {
        if(p1 == pend) {
            p1 = buf;
            pend = buf + fread(buf, 1, BUF_SIZE, stdin);
        }
        return *p1++;
    }

    inline int read() {
        int x = 0, f = 1;
        register char s = nc();
        for(; !isdigit(s); s = nc())if(s == '-')f = -1;
        for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
        return x * f;
    }

}
using namespace fastIO;

inline ll solve(vector&lt;int&gt; a, vector&lt;int&gt; b) {
    vector&lt;int&gt; s = a;
    for(ui i = 0; i &lt; b.size(); ++i)s.push_back(b[i]);
    sort(s.begin(), s.end());
    int k = unique(s.begin(), s.end()) - s.begin(), x, y;
    //去重之后
    if(n == k) {
        //puts(&quot;QWQ&quot;);
        int c[m];
        memset(c, 0, sizeof(c));
        for(ui i = 0; i &lt; a.size(); ++i)if(a[i] &lt; m)++c[a[i]];
        for(ui i = 0; i &lt; b.size(); ++i)if(b[i] &lt; m)++c[b[i]];
        for(int i = m - 1; ~i; --i)if(c[i] == 1)return i;
        return -1;
    }
    vector&lt;pair&lt;int, ll &gt; &gt; e[2 * k + 1];
    //printf(&quot;%d?%d\n&quot;, m, k);
    for(int i = 0; i &lt; k; ++i)e[2 * k].push_back(mp(i, s[i])), e[i + k].push_back(mp(i, m));
    //S-&gt;s[i]
    exgcd(m, n, x, y);
    x = (x % n + n) % n;
    //printf(&quot;%d@\n&quot;, x);
    pi p[k];
    for(int i = 0; i &lt; k; ++i)p[i] = mp(1ll * x * (s[i] - s[0]) % n, i); //printf(&quot;%d*%d\n&quot;, p[i].fi, p[i].se);
    sort(p, p + k);
    for(int i = 0, j = 1 % k; i &lt; k; ++i, j = (++j == k) ? 0 : j)e[p[i].se].push_back(mp(p[j].se + k, 1ll * m * (p[j].fi - p[i].fi - 1 &lt; 0 ? p[j].fi - p[i].fi - 1 + n : p[j].fi - p[i].fi - 1)));
    map&lt;int, int&gt; h;
    for(int i = 0; i &lt; k; ++i)h[s[i]] = i;
    for(int i = 0; i &lt; k; ++i) {
        if(h.find((s[i] + m) % n) != h.end()) {
            int j = h[(s[i] + m) % n];
            e[i].push_back(mp(j + k, 0)), e[j + k].push_back(mp(i, 0));
        }
    }
    priority_queue&lt;pair&lt;ll, int&gt; &gt; q;
    int v[2 * k + 1];
    ll d[2 * k + 1], now = 0;
    memset(v, 0, sizeof(v));
    memset(d, 0x3f, sizeof(d));
    q.push(mp(0, 2 * k)), d[2 * k] = 0;
    while(!q.empty()) {
        int x = q.top().se;
        q.pop();
        //printf(&quot;%d?\n&quot;, x);
        if(v[x])continue;
        v[x] = 1;
        now = max(now, d[x]);
        //所有最短路最长的
        for(ui i = 0; i &lt; e[x].size(); ++i) {
            int v = e[x][i].fi;
            ll z = e[x][i].se;
            if((d[v] &gt; d[x] + z))d[v] = d[x] + z, q.push(mp(-d[v], v));
        }
    }
    return now;
}

int main() {
   // freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
    n = read();
    m = read();
    B = read();
    for(int i = 1; i &lt;= B; ++i)b[i] = read();
    G = read();
    for(int i = 1; i &lt;= G; ++i)g[i] = read();
    if(n &lt; m)swap(n, m), swap(B, G), swap(b, g);
    if((d = gcd(n, m)) &gt; (B + G))return puts(&quot;-1&quot;), 0;
    n /= d; m /= d;
    //printf(&quot;%d!\n&quot;, d);
    for(int i = 1; i &lt;= B; ++i)a[b[i] % d].push_back(b[i] / d);
    for(int i = 1; i &lt;= G; ++i)f[g[i] % d].push_back(g[i] / d);
    for(int i = 0; i &lt; d; ++i)
        if(!a[i].size() &amp;&amp; !f[i].size())
            return puts(&quot;-1&quot;), 0;//一组都没有开心
    for(int i = 0; i &lt; d; ++i)ans = max(ans, solve(a[i], f[i]) * d + i);//再乘d才是一轮
    printf(&quot;%lld\n&quot;, ans);
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5311 [Ynoi2011]成都七中]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5311-ynoi2011cheng-du-qi-zhong/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5311-ynoi2011cheng-du-qi-zhong/">
        </link>
        <updated>2020-03-24T14:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi2011某道题</p>
<p><code>&quot;和我一起去qbxt听课的有一位ljh，他初二拿了普及组省第一，初三考提高组差点拿了一等奖，我一直以他为竞争对手，每次考试的时候都在和他比划比划成绩，但基本上都是我输。&quot;</code></p>
<p>我是谁?你不会真当是博主了吧?</p>
<p>给你一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个节点的树，每个节点有一种颜色，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 次查询操作。</p>
<p>查询操作给定参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mtext> </mtext><mi>r</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">l \  r\  x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathdefault">x</span></span></span></span>，需输出：</p>
<p>将树中编号在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 内的所有节点保留，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 所在联通块中颜色种类数。</p>
<p>每次查询操作独立。</p>
<p>总的来说分两步,这个题就难在第一步上:</p>
<p>&quot;我们考虑把它变成一个点子树内的询问&quot;....这个谁想得到啊??之前做连通块计数那题只不是是启发式合并而已/QAQ</p>
<p>是的,就是变成一个子树内询问,然后对于每个点全部离线处理</p>
<p>然而想想都知道这个要用点分治来分子树,因为</p>
<ol>
<li>支持暴力查找有多少根包含他(log大小)</li>
<li>保证每个询问都有合法包含</li>
<li>现成算法提供现成划分套路(</li>
</ol>
<p>然后我们来用点分树,把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>都包含在一个点分支中心子树里面,然后这个询问就挂在这上面了</p>
<p>问题变成从根节点出发只走子树内编号范围在[l,r]的点可以到达的颜色总数?</p>
<p>第二歩,离线处理每个点的询问,考虑记录每个点到根经过最大的编号和最小的编号</p>
<p>那么只要经过最大编号比询问最大小,最小编号比询问最小大的点就能算作答案了</p>
<p>那这就是二维偏序了....按照最大排序,最小用树状数组</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define ll long long
const int MAXN = 2e5 + 7;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

int n, m, xi, yi, zi, root;
int col[MAXN], ans[MAXN], cx[MAXN],
	nxt[MAXN], to[MAXN], home[MAXN], ccnt
	, siz[MAXN], used[MAXN],  tot, dp[MAXN];

struct node {
	int l, r, id;
	node(): l(0), r(0), id(0) {};
	node(int L, int R, int ID): l(L), r(R), id(ID) {};
	bool operator&lt;(const node &amp;d)const {
		return l == d.l ? id &gt; d.id : l &gt; d.l;
	}

};
vector&lt;node&gt; v[MAXN], q[MAXN];

inline void ct(int x, int y) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}

inline void dfs1(int u, int fa) {
	dp[u] = siz[u] = 1;
	//printf(&quot;%d %d??\n&quot;, u, fa);
	for(int v, i = home[u]; i; i = nxt[i]) {
		v = to[i];
		//printf(&quot;%d %d!\n&quot;, u, v);
		if(v != fa &amp;&amp; !used[v]) {
			dfs1(v, u);
			siz[u] += siz[v];
			dp[u] = max(dp[u], siz[v]);
		}
	}
	dp[u] = max(dp[u], tot - siz[u]);
	if(dp[u] &lt; dp[root])root = u;
}

inline void dfs2(int u, int fa, int mx, int mn) {
	siz[u] = 1;

	v[u].push_back((node) {
		mn, mx, root
	});//查询答案要用,每个点归到各个分治中心
	q[root].push_back((node) {
		mn, mx, col[u]
	});//二维数点要用,每个分治中心管好子树内的点
	for(int v, i = home[u]; i; i = nxt[i]) {
		if((v = to[i]) != fa &amp;&amp; !used[v]) {
			dfs2(v, u, max(mx, v), min(v, mn));
			siz[u] += siz[v];
		}
	}
}

inline void vp(int u) {
	tot = siz[u];
	dp[0] = 0x3f3f3f3f;
	root = 0;
	dfs1(u, 0);
	//printf(&quot;%d?\n&quot;, root);
	used[root] = 1;
	dfs2(u = root, 0, root, root);
	for(int v, i = home[u]; i; i = nxt[i]) {
		if(!used[(v = to[i])])vp(v);
	}
}
//点分治部分,写的很垃圾
int tree[MAXN &lt;&lt; 1];
#define lowbit(x) (x&amp;(-x))
inline void update(int pos, int v) {
	for(; pos &lt;= n; pos += lowbit(pos))tree[pos] += v;
}

inline ll query(int pos) {
	ll ret = 0;
	for(; pos; pos -= lowbit(pos))ret += tree[pos];
	return ret;
}

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	m = read();
	for(int i = 1; i &lt;= n; ++i)col[i] = read();
	for(int i = 1; i &lt; n; ++i)xi = read(), yi = read(), ct(xi, yi), ct(yi, xi); //printf(&quot;%d %d?\n&quot;, xi, yi);
	siz[1] = n;
	//system(&quot;pause&quot;);
	vp(1);
	for(int i = 1; i &lt;= m; ++i) {
		xi = read();
		yi = read();
		zi = read();
		for(vector&lt;node&gt;::iterator id = v[zi].begin(); id != v[zi].end(); ++id) {
			node j = *id;
			//你考虑每个vector里面存的是一个编号连续的点分树根
			//那么我能只要第一个找到的就是最优包含了x在查询的所有的
			if(j.l &gt;= xi &amp;&amp; j.r &lt;= yi) {
				q[j.id].push_back((node) {
					xi, yi, -i//为什么-i因为他是询问
				});
				break;
			}
		}
	}
	for(int i = 1; i &lt;= n; ++i) {
		sort(q[i].begin(), q[i].end());
		//考虑每个点做根
		//排序是按照最大标号来,小的放前面,消掉第一维
		for(vector&lt;node&gt;::iterator id = q[i].begin(); id != q[i].end(); ++id) {
			node j = *id;
			//呵呵
			if(j.id &lt; 0)ans[-j.id] = query(j.r);
			//树状数组消去第二维
			else {
				if(cx[j.id] &gt; j.r)update(cx[j.id], -1), cx[j.id] = 0;
				//清掉他,他已经不够优秀
				if(!cx[j.id])update(j.r, 1), cx[j.id] = j.r;
				//更优秀的放进去
			}
		}
		for(vector&lt;node&gt;::iterator id = q[i].begin(); id != q[i].end(); ++id) {
			node j = *id;
			if(j.id &gt; 0 &amp;&amp; cx[j.id] == j.r)update(j.r, -1), cx[j.id] = 0;
		}
		//清空
	}
	for(int i = 1; i &lt;= m; ++i)printf(&quot;%d\n&quot;, ans[i]);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P1232 [NOI2013]树的计数]]></title>
        <id>https://xiaxiaoguang.github.io/post/p1232-noi2013shu-de-ji-shu/</id>
        <link href="https://xiaxiaoguang.github.io/post/p1232-noi2013shu-de-ji-shu/">
        </link>
        <updated>2020-03-24T14:50:12.000Z</updated>
        <content type="html"><![CDATA[<p>咕咕咕</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5289 [十二省联考2019]皮配]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5289-shi-er-sheng-lian-kao-2019pi-pei/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5289-shi-er-sheng-lian-kao-2019pi-pei/">
        </link>
        <updated>2020-03-24T02:48:15.000Z</updated>
        <content type="html"><![CDATA[<p>十二省联考2019D2T1</p>
<p>不太像是正常的题,首先改下题面</p>
<p>题意概要：有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 个豆荚，共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 颗豆子，每颗豆子都有自己的重量，现在需要将给豆子设定为 (黄色/绿色,圆粒/皱粒)，要求满足以下条件：</p>
<p>给定这四种性状的阀值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">C_0,C_1,D_0,D_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​，要求为这种性状的豆子重量和不能超过该阀值<br>
与此同时，这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 颗豆子中存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 颗顽皮豆，顽皮豆都有自己的想法，比如拒绝成为 (黄圆/黄皱/绿圆/绿皱)<br>
同一个豆荚里的豆子必须 同时为黄色 或 同时为绿色</p>
<p>求有多少种给豆子设定的方案，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>998244353</mn></mrow><annotation encoding="application/x-tex">998244353</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">8</span><span class="mord">2</span><span class="mord">4</span><span class="mord">4</span><span class="mord">3</span><span class="mord">5</span><span class="mord">3</span></span></span></span> 取模</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo separator="true">,</mo><mi>k</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n,c\leq 10^3,k\leq 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span></p>
<p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><msub><mi>C</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>1</mn></msub><mo>}</mo></mrow><annotation encoding="application/x-tex">M=\max\{C_0,C_1,D_0,D_1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>≤</mo><mn>2500</mn></mrow><annotation encoding="application/x-tex">M\leq 2500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p>
<p>豆子重量不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>min</mi><mo>⁡</mo><mo>{</mo><mi>M</mi><mo separator="true">,</mo><mn>10</mn><mo>}</mo></mrow><annotation encoding="application/x-tex">\min\{M,10\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">}</span></span></span></span></p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2019/04/07/AfzWPe.png" alt="" loading="lazy"></figure>
<p>是个DP无疑,首先我们看向前30pts</p>
<p>设DP[i][j][k][0/1]表示黄圆有i个,黄皱有j个,绿圆有k个,绿皱有sum-i-j-k个而且这一个豆荚选择了0/1颜色的方案数</p>
<p>先按照豆荚拍下序,转移时枚举下一个豆子,分是不是还是之前豆荚处理以及顽皮豆就行了</p>
<p>复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mi>M</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*M^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,可以T掉7个点</p>
<p>然后考虑优化一下这个做法,我们只记录绿色豆子数量和圆豆子数量就行了</p>
<p>转移时不同的地方就是如果没有顽皮豆的限制要注意放在圆豆还是皱豆那堆里,并相应的用圆豆子数量变不变的状态转移</p>
<p>这个做法是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mi>M</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*M^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,可以T掉5个点,<s>可以发现我们T的点变少了/kk</s></p>
<p>然后看向第6,9个点,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn><mo>?</mo></mrow><annotation encoding="application/x-tex">k=0?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mclose">?</span></span></span></span>也就是说没有顽皮豆,这样去掉了一个限制,是不是问题就简化了呢?因为此时你分的颜色和分的性状二者是独立的,具体的,每一种合法的颜色划分方案都能对应一个性状划分方案,这样如果我们能求出合法的颜色划分方案和性状划分方案就可以直接乘一下过掉了</p>
<p>怎么写?就是正常0/1背包,倒序滚动的那种</p>
<p>再来看100pts,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">k&lt;=30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>,<s>是一个刚好不能容斥的范围,要是可以怎么容?</s></p>
<p>然鹅毕竟我们只有30颗顽皮豆,如果这些豆子能算出总方案,然后再和之前求得k=0的状态做一个类似背包合并的操作就可以了</p>
<p>30颗顽皮豆方案?好像之前50pts的做法是可以的?那我们就再用50分的那个做法把这些总方案求一下就好啦?</p>
<p>但是仔细想想你会发现50pts的DP是最难的...<s>而且之前只是口胡</s>我们回到这个题</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">F[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>表示前i个城市,蓝阵营有j个选,鸭派系有k个总方案数同时我们这个城市选的就是蓝阵营</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">G[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>表示前i个城市,蓝阵营有j个选,鸭派系有k个总方案数同时我们这个城市选的就是红阵营</p>
<p>i这一维先滚动掉</p>
<p>然后我们去枚举那些这个城市的学校</p>
<h2 id="case1讨厌小r">case1:讨厌小R</h2>
<p>对于F,我们只能放进Yazid,所以只需要把大于等于人数的平移过去,其他置为0</p>
<p>对于G,我们照常转移即可</p>
<h2 id="case2讨厌yazid">case2:讨厌Yazid</h2>
<p>对于F,无法转移,相当于动都不动的</p>
<p>对于G,照常转移</p>
<h2 id="case3讨厌大r以及case4讨厌zayid">case3:讨厌大R以及case4讨厌zayid</h2>
<p>和之前一样对称</p>
<p>上面的转移都是对于第二维派系来说的,所以最后别忘了对于阵营再转移一次,和case1中的F一样,然后再把F,G数组每个状态的方案数暴力加起来就行了</p>
<p>最后是把求得新状态和之前的pre合并....</p>
<p>考虑先枚举蓝阵营/鸭派系里有多少个人</p>
<p>然后把求得可以额外放进蓝阵营的人数的一个范围,上界是把C0填满,下界是把C1填满</p>
<p>那么这些人数构成的自由方案都可以,所以要对之前处理好的自由人方案求个前缀和,得到范围内答案a</p>
<p>同样的可以处理鸭派系自由方案和b</p>
<p>这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>F</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">a,b,F[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>三个数乘一下就是答案了....</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>(</mo><mi>c</mi><mo>+</mo><mi>n</mi><mo>)</mo><mi>M</mi><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup><mi>s</mi><mi>M</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O((c+n)M+k^2sM)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span>前面是预处理DP后面是计算F复杂度,因为s&lt;=10</p>
<p>终于结束了,最后强行推荐封面图</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;
const int MAXN = 2600;
const int P = 998244353;
bool hcty[MAXN];
int scty[MAXN], ht[MAXN], b[MAXN], s[MAXN], f[MAXN], pre_f[MAXN]
, F[MAXN][MAXN], g[MAXN], pre_g[MAXN], G[MAXN][MAXN], n, c, C0, C1, D0, D1, SUM;


inline void init() {
	n = read();
	c = read();
	SUM = 0;
	for(int i = 1; i &lt;= c; ++i)hcty[i] = 0, scty[i] = 0;
	C0 = read(), C1 = read(), D0 = read(), D1 = read();
	for(int i = 1; i &lt;= n; ++i)b[i] = read(), s[i] = read(), scty[b[i]] += s[i], ht[i] = -1, SUM += s[i];
	int K, x;
	K = read();
	for(int i = 1; i &lt;= K; ++i) {
		x = read();
		ht[x] = read();
		hcty[b[x]] = 1;
		//这个城市完了
	}

	memset(f, 0, sizeof(f));
	pre_f[0] = f[0] = 1;
	for(int i = 1; i &lt;= c; ++i) {
		if(!hcty[i] &amp;&amp; scty[i]) {
			for(int j = C0; j &gt;= scty[i]; --j) {
				(f[j] += f[j - scty[i]]) %= P;
			}
		}
	}
	for(int i = 1; i &lt;= C0; ++i)pre_f[i] = (pre_f[i - 1] + f[i]) % P;// printf(&quot;%d\n&quot;, pre_f[i]);

	memset(g, 0, sizeof(g));
	pre_g[0] = g[0] = 1;
	for(int i = 1; i &lt;= n; ++i) {
		if(-1 == ht[i]) {
			for(int j = D0; j &gt;= s[i]; --j) {
				(g[j] += g[j - s[i]]) %= P;
			}
		}
	}
	for(int i = 1; i &lt;= D0; ++i)pre_g[i] = (pre_g[i - 1] + g[i]) % P;// printf(&quot;%d\n&quot;, pre_g[i]);

	memset(F, 0, sizeof(F));
	memset(G, 0, sizeof(G));
	F[0][0] = 1;
}

inline void solve() {
	int Cs = 0, Ss = 0;
	for(int ct = 1; ct &lt;= c; ++ct) {
		if(hcty[ct]) {
			Cs += scty[ct], Cs = min(Cs, C0);
			//Cs是城市的人数前缀和与C0取min
			//printf(&quot;%d!\n&quot;, Cs);
			for(int i = 0; i &lt;= Cs; ++i) {
				for(int j = 0; j &lt;= Ss; ++j) {
					G[i][j] = F[i][j];
				}
			}
			for(int a = 1; a &lt;= n; ++a)
				if(b[a] == ct &amp;&amp; ~ht[a]) {
					const int t = s[a];

					Ss += t;
					Ss = min(Ss, D0);
					//printf(&quot;ha%d %d %d?\n&quot;, t, Ss, ht[a]);
					if(ht[a] == 1) {
						for(int i = 0; i &lt;= Cs; ++i) {//最外层枚举阵营人数
							for(int j = Ss; j &gt;= t; --j)F[i][j] = F[i][j - t];
							//F数组是考虑选择蓝阵营
							//等于1就相当于我们只能选Yazid
							for(int j = t - 1; ~j; --j)F[i][j] = 0;
						}
					}
					if(ht[a] &gt;= 2) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j)(F[i][j] += F[i][j - t]) %= P;
							//直接转移就行了我们放弃
						}
					}
					if(ht[a] == 3) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j)G[i][j] = G[i][j - t];
							for(int j = t - 1; ~j; --j)G[i][j] = 0;
						}
					}
					if(ht[a] &lt;= 1) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j) {
								(G[i][j] += G[i][j - t]) %= P;
								//要么yazid要么小R
							}
						}
					}
				}
			for(int j = 0, t = scty[ct]; j &lt;= Ss; ++j) {
				for(int i = Cs; i &gt;= t; --i) F[i][j] = F[i - t][j];
				for(int i = t - 1; ~i; --i)F[i][j] = 0;
			}
			for(int i = 0; i &lt;= Cs; ++i) {
				for(int j = 0; j &lt;= Ss; ++j) {
					(F[i][j] += G[i][j]) %= P;
					//printf(&quot;%lld? &quot;, F[i][j]);
				}
				//puts(&quot;&quot;);
			}
		}
	}
	int res = 0;
	for(int i = 0; i &lt;= Cs; ++i) {
		for(int j = 0; j &lt;= Ss; ++j) {
			int l1 = max(0, SUM - C1 - i), r1 = C0 - i;
			//枚举派系的一个划分
			//考虑最少装多少个和最多装多少个
			//最多把C0装满,最少把C1装满
			//对一个r1和l1
			if(l1 &gt; r1)continue;
			int l2 = max(0, SUM - D1 - j), r2 = D0 - j;
			//枚举导师的一个划分
			if(l2 &gt; r2)continue;
			int vf = pre_f[r1];
			if(l1)vf += P - pre_f[l1 - 1];
			int vg = pre_g[r2];
			if(l2)vg += P - pre_g[l2 - 1];
			//前缀和部分233
			(res += 1ll * vf * vg % P * F[i][j] % P) %= P;
		}
	}
	printf(&quot;%d\n&quot;, res);
}


int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	int T;
	T = read();
	while(T-- &gt; 0) {
		init();
		solve();
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4688 [Ynoi2016]掉进兔子洞]]></title>
        <id>https://xiaxiaoguang.github.io/post/p4688-ynoi2016diao-jin-tu-zi-dong/</id>
        <link href="https://xiaxiaoguang.github.io/post/p4688-ynoi2016diao-jin-tu-zi-dong/">
        </link>
        <updated>2020-03-23T01:39:16.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi做的第二道题<br>
感言:<img src="https://cdn.luogu.com.cn/upload/pic/21091.png" alt="" loading="lazy"></p>
<p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个询问，每次询问三个区间，把三个区间中同时出现的数一个一个删掉，问最后三个区间剩下的数的个数和，询问独立。</p>
<p>注意这里删掉指的是一个一个删，不是把等于这个值的数直接删完，比如三个区间是  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,2,2,3,3,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,2,2,3,3,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span> 与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,1,2,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，就一起扔掉了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。</p>
<p>好的我们一开题就直接完蛋自闭了没有做过如此强大的套路弃疗了</p>
<p>正经的,我们需要对三个区间支持类似于数点去重的东西....而且还要支持1e5次询问</p>
<p>三维数点我只会bitset.....<s>然而并没有想到啊</s></p>
<p>如果我们能有一个神奇的bitset把三个区间的信息记录下来然后&amp;一下不就是得到要去掉的数的个数了吗?</p>
<p>而你又神奇的发现好像只需要一个莫队就能消掉区间的限制,而且bitset单点加入和查询O1!</p>
<p>然而问题又来了,bitset他现在还不够神奇,不能够记录重复了多少个...因为每个位置上的信息只有0/1</p>
<p>我们再想一下能不能莫队来帮助记录??因为我们总共的数字数是n大小的</p>
<p>那么参照之前BJOI那道题推倒的做法我们可以这样更改bitset记录方式</p>
<p>val[p]表示bitsetp位置的权值是什么,cnt[p]表示这个权值在原序列出现次数</p>
<p>每个位置p到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo>[</mo><mi>p</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">p-cnt[val[p]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>记录了这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>p</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">cnt[p]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span></span></span></span>个数出现情况,也就是说出现第一次位置p是1,出现第二次把位置p-1置为1....第k次把p-k置为1</p>
<p>这样and起来就真的是要删掉的数个数了!</p>
<p>还有个问题,我们空间开不下啊</p>
<p>所以我们可以把1e5次询问分成3组,然后循环利用同一个ansbitset就行了,典型的以空间换时间</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;bitset&gt;
#include&lt;map&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 1e5 + 10;
const int M = 34010;
#define ll long long
int a[MAXN], n, m, nans[MAXN], tp, tot, cnt[MAXN];
map&lt;int, int&gt; mp;
bitset&lt;MAXN&gt; ans[M], nb;
struct Qry {
	int l, r, t;
} q[M*3];
inline bool cmp1(const Qry &amp;a, const Qry &amp;b) {
	return a.l &lt; b.l;
}
inline bool cmp2(const Qry &amp;a, const Qry &amp;b) {
	return a.r &lt; b.r;
}
inline void ins(int p) {
	nb[p - cnt[p]] = 1;
	cnt[p]++;
}
inline void del(int p) {
	cnt[p]--;
	nb[p - cnt[p]] = 0;
}
inline void solve() {
	if(tot &gt;= m)return ;
	for(int i = 1; i &lt;= M - 10 &amp;&amp; tot &lt;= m; ++i, ++tot) {
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
	}
	for(int i = 1; i &lt;= tp / 3; ++i)ans[i].set();
	sort(q + 1, q + tp + 1, cmp1);
	int nl = 0, nr = 0;
	for(int i = 1; i &lt;= tp; i += 320) {
		int r = min(tp, i + 319);
		sort(q + i, q + r + 1, cmp2);
		//分块的神仙排序法
	}
	for(int i = 1; i &lt;= tp; ++i) {
		if(nr &lt; q[i].l) {
			for(int j = nl; j &lt;= nr; ++j)del(a[j]);
			nl = q[i].l; nr = q[i].r;
			for(int j = nl; j &lt;= nr; ++j)ins(a[j]);
			//优化?
		} else {
			while(nl &lt; q[i].l)del(a[nl]), ++nl;
			while(nl &gt; q[i].l)--nl, ins(a[nl]);
			while(nr &lt; q[i].r)nr++, ins(a[nr]);
			while(nr &gt; q[i].r)del(a[nr]), nr--;
		}
		ans[q[i].t] &amp;= nb;
	}
	for(int i = nl; i &lt;= nr; ++i)del(a[i]);
	for(int i = 1; i &lt;= tp / 3; ++i)printf(&quot;%lld\n&quot;, nans[i] - ans[i].count() * 3);
	for(int i = 1; i &lt;= tp / 3; ++i)nans[i] = 0; tp = 0;
}
int main() {
	tot = 1;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1; i &lt;= n; ++i)scanf(&quot;%d&quot;, &amp;a[i]);
	for(int i = 1; i &lt;= n; ++i)mp[a[i]]++;
	map&lt;int, int&gt;::iterator it, it1;
	for(it = mp.begin(), it1 = it, ++it1; it1 != mp.end(); ++it, ++it1)it1-&gt;second += it-&gt;second;
	for(int i = n; i &gt;= 1; --i)a[i] = mp[a[i]];
	solve();
	solve();
	solve();
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4689 [Ynoi2016]这是我自己的发明]]></title>
        <id>https://xiaxiaoguang.github.io/post/p4689-ynoi2016zhe-shi-wo-zi-ji-de-fa-ming/</id>
        <link href="https://xiaxiaoguang.github.io/post/p4689-ynoi2016zhe-shi-wo-zi-ji-de-fa-ming/">
        </link>
        <updated>2020-03-23T00:44:38.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi2016不知哪道题</p>
<p>俗话说得好<code>在你膨胀的时候做一下Ynoi</code>,立刻就能让你感到自己的弱小</p>
<p>如果这种难度的数据结构也能秒掉那你可以PKUWC2020AK了</p>
<p>1 x 将树根换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。</p>
<p>2 x y 给出两个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的子树中选每一个点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的子树中选每一个点，求点权相等的情况数。</p>
<p>首先我们要有一个第一选择,就是大体上有什么数据结构做这个事情</p>
<p>你会敏锐的发现好像<code>两两点权相等总方案</code>只适合带根号做法......所以我们要树上莫队</p>
<p>但是怎么莫队呢??我们先搞出dfs序然后再换根的前提下就是两个区间的查询</p>
<p>莫队的询问信息不能有四维啊....所以我们先考虑差分一下变成两维</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>l</mi><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>−</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>1</mn><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>−</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>1</mn><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">f(l1,r1,l2,r2)=f(1,r1,1,r2)-f(1,l1-1,1,r2)-f(1,r1,1,l2-1)+f(1,l1-1,1,l2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p>所以这个就变成了一个二维的问题,虽然询问数*4了</p>
<p>有了这个莫队部分就很显然了</p>
<p>再来考虑换根....哎好像是<code>假的</code>?</p>
<p>情况一   x=root，很显然此时应当查询整棵树。<br>
<img src="https://img-blog.csdn.net/20150514113344299?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
情况二 lca(root,x)!=x ,此时直接查询x的子树即可，与换根无关。<br>
<img src="https://img-blog.csdn.net/20150514113901346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
情况三，lca(root,x)=x，此时我们应当查询与x相邻的节点中与root最近的点v在整棵树中的补集<br>
<img src="https://img-blog.csdn.net/20150514114150100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
可以发现v一定在root到x的链上，且一定是x在这条链上的儿子，倍增法可以求得v</p>
<p>好的,也就是说如果有情况3我们原本两段dfs区间会变成4段,再差分变成16个询问QAQ</p>
<p>所以这个就是卡常毒瘤啊,40多行编译优化</p>
<p>code:</p>
<pre><code class="language-cpp">
#pragma G++ optimize(2)
#pragma G++ optimize(3)

#pragma G++ target(&quot;avx&quot;)
#pragma G++ optimize(&quot;Ofast&quot;)
#pragma G++ optimize(&quot;inline&quot;)
#pragma G++ optimize(&quot;-fgcse&quot;)
#pragma G++ optimize(&quot;-fgcse-lm&quot;)
#pragma G++ optimize(&quot;-fipa-sra&quot;)
#pragma G++ optimize(&quot;-ftree-pre&quot;)
#pragma G++ optimize(&quot;-ftree-vrp&quot;)
#pragma G++ optimize(&quot;-fpeephole2&quot;)
#pragma G++ optimize(&quot;-ffast-math&quot;)
#pragma G++ optimize(&quot;-fsched-spec&quot;)
#pragma G++ optimize(&quot;unroll-loops&quot;)
#pragma G++ optimize(&quot;-falign-jumps&quot;)
#pragma G++ optimize(&quot;-falign-loops&quot;)
#pragma G++ optimize(&quot;-falign-labels&quot;)
#pragma G++ optimize(&quot;-fdevirtualize&quot;)
#pragma G++ optimize(&quot;-fcaller-saves&quot;)
#pragma G++ optimize(&quot;-fcrossjumping&quot;)
#pragma G++ optimize(&quot;-fthread-jumps&quot;)
#pragma G++ optimize(&quot;-funroll-loops&quot;)
#pragma G++ optimize(&quot;-fwhole-program&quot;)
#pragma G++ optimize(&quot;-freorder-blocks&quot;)
#pragma G++ optimize(&quot;-fschedule-insns&quot;)
#pragma G++ optimize(&quot;inline-functions&quot;)
#pragma G++ optimize(&quot;-ftree-tail-merge&quot;)
#pragma G++ optimize(&quot;-fschedule-insns2&quot;)
#pragma G++ optimize(&quot;-fstrict-aliasing&quot;)
#pragma G++ optimize(&quot;-fstrict-overflow&quot;)
#pragma G++ optimize(&quot;-falign-functions&quot;)
#pragma G++ optimize(&quot;-fcse-skip-blocks&quot;)
#pragma G++ optimize(&quot;-fcse-follow-jumps&quot;)
#pragma G++ optimize(&quot;-fsched-interblock&quot;)
#pragma G++ optimize(&quot;-fpartial-inlining&quot;)
#pragma G++ optimize(&quot;no-stack-protector&quot;)
#pragma G++ optimize(&quot;-freorder-functions&quot;)
#pragma G++ optimize(&quot;-findirect-inlining&quot;)
#pragma G++ optimize(&quot;-fhoist-adjacent-loads&quot;)
#pragma G++ optimize(&quot;-frerun-cse-after-loop&quot;)
#pragma G++ optimize(&quot;inline-small-functions&quot;)
#pragma G++ optimize(&quot;-finline-small-functions&quot;)
#pragma G++ optimize(&quot;-ftree-switch-conversion&quot;)
#pragma G++ optimize(&quot;-foptimize-sibling-calls&quot;)
#pragma G++ optimize(&quot;-fexpensive-optimizations&quot;)
#pragma G++ optimize(&quot;-funsafe-loop-optimizations&quot;)
#pragma G++ optimize(&quot;inline-functions-called-once&quot;)
#pragma G++ optimize(&quot;-fdelete-null-pointer-checks&quot;)


#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define ll long long
using namespace std;
const int MAXN = 5e5 + 20;
namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;
void write(ll x) {
	if(x &gt; 9) write(x / 10);
	putchar(x % 10 + 48);
}
int ccnt;
struct edge {
	int to, nxt;
} e[MAXN];

struct Qry {
	int l, r, id, f;
} q[8000010];

int Q, m, in[MAXN], out[MAXN], idx, _dfn, st[MAXN][21], dfn[MAXN], dep[MAXN], fa[MAXN], home[MAXN],
	rt, cnt[MAXN][2], is_q[MAXN], top[MAXN], son[MAXN], siz[MAXN], tl[MAXN], tr[MAXN], o[MAXN], c[MAXN], a[MAXN], n,
	lg2[MAXN];
ll ans[MAXN], ima, _c, SIZ;

void ct(int u, int v) {
	e[++ccnt] = (edge) {
		v, home[u]
	};
	home[u] = ccnt;
}

bool cmp(Qry a, Qry b) {
	return a.l / SIZ == b.l / SIZ ? a.r &lt; b.r : a.l &lt; b.l;
}

void dfs1(int u, int F) {
	st[++idx][0] = u;
	in[u] = ++_dfn;
	dfn[u] = idx;
	c[_dfn] = a[u];
	dep[u] = dep[F] + 1;
	fa[u] = F;
	siz[u] = 1;
	for(int i = home[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == F)continue;
		dfs1(v, u);
		st[++idx][0] = u;
		siz[u] += siz[v];
		if(siz[v] &gt; siz[son[u]])son[u] = v;
	}
	out[u] = _dfn;
	//printf(&quot;%d %d %d %d %d %d\n&quot;, u, dfn[u], in[u], dep[u], son[u], fa[u]);
}

void dfs2(int u, int topf) {
	top[u] = topf;
	if(son[u])dfs2(son[u], topf);
	for(int i = home[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v != son[u] &amp;&amp; v != fa[u])
			dfs2(v, v);
	}
	//	printf(&quot;%d %d\n &quot;, u, top[u]);
}
//找一下x在y的哪一个子树里面
int find(int y, int x) {
	int u;
	while(top[x] != top[y]) {
		u = top[x];
		x = fa[u];
	}
	return x == y ? u : son[y];
}

void init() {
	dep[1] = 1;
	dfs1(1, 1);
	dfs2(1, 1);
	for(int i = 2; i &lt;= (n &lt;&lt; 1); ++i)lg2[i] = lg2[i &gt;&gt; 1] + 1;
	for(int j = 1; j &lt;= 21; ++j) {
		for(int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= (n &lt;&lt; 1); ++i) {
			st[i][j] = dep[st[i][j - 1]] &lt; dep[st[i + (1 &lt;&lt; (j - 1))][j - 1]] ? st[i][j - 1] : st[i + (1 &lt;&lt; (j - 1))][j - 1];
		}
	}
}

int LCA(int u, int v) {
	int x = dfn[u], y = dfn[v];
	if(x &gt; y)swap(x, y);
	int k = lg2[y - x + 1];
	return dep[st[x][k]] &lt; dep[st[y - (1 &lt;&lt; k) + 1][k]] ? st[x][k] : st[y - (1 &lt;&lt; k) + 1][k];
}

void RC(int l1, int r1, int l2, int r2, int id) {
	q[++m] = (Qry) {
		r1, r2, id, 1
	};
	q[++m] = (Qry) {
		l1 - 1, l2 - 1, id, 1
	};
	q[++m] = (Qry) {
		r1, l2 - 1, id, -1
	};
	q[++m] = (Qry) {
		l1 - 1, r2, id, -1
	};
	//二维前缀和/jk
}

void devide(int x) {
	if(x == rt)tl[++_c] = 1, tr[_c] = n;//哇偶我就是根
	else {
		int z = LCA(x, rt);
		//	printf(&quot;%d %d %dQAQ\n&quot;, x, rt, z);
		if(z != x) {
			tl[++_c] = in[x];
			tr[_c] = out[x];
			//相当于还是你自己整棵
		} else {
			int y = find(x, rt);
			//找到这个儿子
			if(1 &lt;= in[y] - 1)tl[++_c] = 1;
			tr[_c] = in[y] - 1;
			//我们先把第一段这个加进去
			//这一部分要减去
			if(out[y] + 1 &lt;= n)tl[++_c] = out[y] + 1, tr[_c] = n;
			//再把第二段加进去
			//outy+1就对应了另一段,n是最后一个
		}
	}
}

void build(int x, int y, int id) {
	_c = 0;
	//	printf(&quot;%d %d %d?\n&quot;, x, y, id);
	devide(x);
	int mid = _c;
	devide(y);
	//下面是压行写法233
	for(int i = 1; i &lt;= mid; ++i) {
		for(int j = mid + 1; j &lt;= _c; ++j) {
			//	printf(&quot;%d %d %d %d &amp;\n&quot;, tl[i], tr[i], tl[j], tr[j]);
			RC(tl[i], tr[i], tl[j], tr[j], id);
			//把这些信息计入Q
		}
	}
}

void add(int x, int p) {
	ima += cnt[c[x]][p ^ 1];
	++cnt[c[x]][p];
}
void del(int x, int p) {
	ima -= cnt[c[x]][p ^ 1];
	--cnt[c[x]][p];
}


int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	Q = read();
	SIZ = sqrt(n);
	for(register int i = 1; i &lt;= n; ++i)a[i] = read(), o[i] = a[i];
	sort(o + 1, o + n + 1);
	int _n = unique(o + 1, o + n + 1) - o - 1;
	for(register int i = 1; i &lt;= n; ++i)a[i] = lower_bound(o + 1, o + _n + 1, a[i]) - o;
	for(register int u, v, i = 1; i &lt; n; ++i)u = read(), v = read(), ct(u, v), ct(v, u);
	init();
	rt = 1;
	for(register int opt, x, y, i = 1; i &lt;= Q; ++i) {
		opt = read();
		x = read();
		if(opt == 1)rt = x;
		else is_q[i] = 1, y = read(), build(x, y, i);
	}
	for(int i = 1; i &lt;= m; ++i)if(q[i].l &gt; q[i].r)swap(q[i].l, q[i].r);
	sort(q + 1, q + m + 1, cmp);
	for(register int L = 0, R = 0, i = 1; i &lt;= m; ++i) {
		int l = q[i].l, r = q[i].r;
		//	printf(&quot;%d %d %d %d\n&quot;, q[i].l, q[i].r, q[i].id, q[i].f);
		while(L &lt; l)add(++L, 0);
		while(L &gt; l)del(L--, 0);
		while(R &lt; r)add(++R, 1);
		while(R &gt; r)del(R--, 1);
		ans[q[i].id] += ima * q[i].f;
	}
	for(int i = 1; i &lt;= Q; ++i)if(is_q[i])write(ans[i]), putchar('\n');
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>