<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiaxiaoguang.github.io</id>
    <title>夏晓光(loveJY)的博客</title>
    <updated>2020-03-25T01:01:39.597Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiaxiaoguang.github.io"/>
    <link rel="self" href="https://xiaxiaoguang.github.io/atom.xml"/>
    <subtitle>仍要向下扎根,向上结果</subtitle>
    <logo>https://xiaxiaoguang.github.io/images/avatar.png</logo>
    <icon>https://xiaxiaoguang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夏晓光(loveJY)的博客</rights>
    <entry>
        <title type="html"><![CDATA[P5311 [Ynoi2011]成都七中]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5311-ynoi2011cheng-du-qi-zhong/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5311-ynoi2011cheng-du-qi-zhong/">
        </link>
        <updated>2020-03-24T14:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi2011某道题</p>
<p><code>&quot;和我一起去qbxt听课的有一位ljh，他初二拿了普及组省第一，初三考提高组差点拿了一等奖，我一直以他为竞争对手，每次考试的时候都在和他比划比划成绩，但基本上都是我输。&quot;</code></p>
<p>我是谁?你不会真当是博主了吧?</p>
<p>给你一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个节点的树，每个节点有一种颜色，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 次查询操作。</p>
<p>查询操作给定参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mtext> </mtext><mi>r</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">l \  r\  x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathdefault">x</span></span></span></span>，需输出：</p>
<p>将树中编号在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 内的所有节点保留，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 所在联通块中颜色种类数。</p>
<p>每次查询操作独立。</p>
<p>总的来说分两步,这个题就难在第一步上:</p>
<p>&quot;我们考虑把它变成一个点子树内的询问&quot;....这个谁想得到啊??之前做连通块计数那题只不是是启发式合并而已/QAQ</p>
<p>是的,就是变成一个子树内询问,然后对于每个点全部离线处理</p>
<p>然而想想都知道这个要用点分治来分子树,因为</p>
<ol>
<li>支持暴力查找有多少根包含他(log大小)</li>
<li>保证每个询问都有合法包含</li>
<li>现成算法提供现成划分套路(</li>
</ol>
<p>然后我们来用点分树,把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>都包含在一个点分支中心子树里面,然后这个询问就挂在这上面了</p>
<p>问题变成从根节点出发只走子树内编号范围在[l,r]的点可以到达的颜色总数?</p>
<p>第二歩,离线处理每个点的询问,考虑记录每个点到根经过最大的编号和最小的编号</p>
<p>那么只要经过最大编号比询问最大小,最小编号比询问最小大的点就能算作答案了</p>
<p>那这就是二维偏序了....按照最大排序,最小用树状数组</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define ll long long
const int MAXN = 2e5 + 7;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

int n, m, xi, yi, zi, root;
int col[MAXN], ans[MAXN], cx[MAXN],
	nxt[MAXN], to[MAXN], home[MAXN], ccnt
	, siz[MAXN], used[MAXN],  tot, dp[MAXN];

struct node {
	int l, r, id;
	node(): l(0), r(0), id(0) {};
	node(int L, int R, int ID): l(L), r(R), id(ID) {};
	bool operator&lt;(const node &amp;d)const {
		return l == d.l ? id &gt; d.id : l &gt; d.l;
	}

};
vector&lt;node&gt; v[MAXN], q[MAXN];

inline void ct(int x, int y) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}

inline void dfs1(int u, int fa) {
	dp[u] = siz[u] = 1;
	//printf(&quot;%d %d??\n&quot;, u, fa);
	for(int v, i = home[u]; i; i = nxt[i]) {
		v = to[i];
		//printf(&quot;%d %d!\n&quot;, u, v);
		if(v != fa &amp;&amp; !used[v]) {
			dfs1(v, u);
			siz[u] += siz[v];
			dp[u] = max(dp[u], siz[v]);
		}
	}
	dp[u] = max(dp[u], tot - siz[u]);
	if(dp[u] &lt; dp[root])root = u;
}

inline void dfs2(int u, int fa, int mx, int mn) {
	siz[u] = 1;

	v[u].push_back((node) {
		mn, mx, root
	});//查询答案要用,每个点归到各个分治中心
	q[root].push_back((node) {
		mn, mx, col[u]
	});//二维数点要用,每个分治中心管好子树内的点
	for(int v, i = home[u]; i; i = nxt[i]) {
		if((v = to[i]) != fa &amp;&amp; !used[v]) {
			dfs2(v, u, max(mx, v), min(v, mn));
			siz[u] += siz[v];
		}
	}
}

inline void vp(int u) {
	tot = siz[u];
	dp[0] = 0x3f3f3f3f;
	root = 0;
	dfs1(u, 0);
	//printf(&quot;%d?\n&quot;, root);
	used[root] = 1;
	dfs2(u = root, 0, root, root);
	for(int v, i = home[u]; i; i = nxt[i]) {
		if(!used[(v = to[i])])vp(v);
	}
}
//点分治部分,写的很垃圾
int tree[MAXN &lt;&lt; 1];
#define lowbit(x) (x&amp;(-x))
inline void update(int pos, int v) {
	for(; pos &lt;= n; pos += lowbit(pos))tree[pos] += v;
}

inline ll query(int pos) {
	ll ret = 0;
	for(; pos; pos -= lowbit(pos))ret += tree[pos];
	return ret;
}

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	m = read();
	for(int i = 1; i &lt;= n; ++i)col[i] = read();
	for(int i = 1; i &lt; n; ++i)xi = read(), yi = read(), ct(xi, yi), ct(yi, xi); //printf(&quot;%d %d?\n&quot;, xi, yi);
	siz[1] = n;
	//system(&quot;pause&quot;);
	vp(1);
	for(int i = 1; i &lt;= m; ++i) {
		xi = read();
		yi = read();
		zi = read();
		for(vector&lt;node&gt;::iterator id = v[zi].begin(); id != v[zi].end(); ++id) {
			node j = *id;
			//你考虑每个vector里面存的是一个编号连续的点分树根
			//那么我能只要第一个找到的就是最优包含了x在查询的所有的
			if(j.l &gt;= xi &amp;&amp; j.r &lt;= yi) {
				q[j.id].push_back((node) {
					xi, yi, -i//为什么-i因为他是询问
				});
				break;
			}
		}
	}
	for(int i = 1; i &lt;= n; ++i) {
		sort(q[i].begin(), q[i].end());
		//考虑每个点做根
		//排序是按照最大标号来,小的放前面,消掉第一维
		for(vector&lt;node&gt;::iterator id = q[i].begin(); id != q[i].end(); ++id) {
			node j = *id;
			//呵呵
			if(j.id &lt; 0)ans[-j.id] = query(j.r);
			//树状数组消去第二维
			else {
				if(cx[j.id] &gt; j.r)update(cx[j.id], -1), cx[j.id] = 0;
				//清掉他,他已经不够优秀
				if(!cx[j.id])update(j.r, 1), cx[j.id] = j.r;
				//更优秀的放进去
			}
		}
		for(vector&lt;node&gt;::iterator id = q[i].begin(); id != q[i].end(); ++id) {
			node j = *id;
			if(j.id &gt; 0 &amp;&amp; cx[j.id] == j.r)update(j.r, -1), cx[j.id] = 0;
		}
		//清空
	}
	for(int i = 1; i &lt;= m; ++i)printf(&quot;%d\n&quot;, ans[i]);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P1232 [NOI2013]树的计数]]></title>
        <id>https://xiaxiaoguang.github.io/post/p1232-noi2013shu-de-ji-shu/</id>
        <link href="https://xiaxiaoguang.github.io/post/p1232-noi2013shu-de-ji-shu/">
        </link>
        <updated>2020-03-24T14:50:12.000Z</updated>
        <content type="html"><![CDATA[<p>咕咕咕</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5289 [十二省联考2019]皮配]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5289-shi-er-sheng-lian-kao-2019pi-pei/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5289-shi-er-sheng-lian-kao-2019pi-pei/">
        </link>
        <updated>2020-03-24T02:48:15.000Z</updated>
        <content type="html"><![CDATA[<p>十二省联考2019D2T1</p>
<p>不太像是正常的题,首先改下题面</p>
<p>题意概要：有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 个豆荚，共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 颗豆子，每颗豆子都有自己的重量，现在需要将给豆子设定为 (黄色/绿色,圆粒/皱粒)，要求满足以下条件：</p>
<p>给定这四种性状的阀值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">C_0,C_1,D_0,D_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​，要求为这种性状的豆子重量和不能超过该阀值<br>
与此同时，这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 颗豆子中存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 颗顽皮豆，顽皮豆都有自己的想法，比如拒绝成为 (黄圆/黄皱/绿圆/绿皱)<br>
同一个豆荚里的豆子必须 同时为黄色 或 同时为绿色</p>
<p>求有多少种给豆子设定的方案，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>998244353</mn></mrow><annotation encoding="application/x-tex">998244353</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">8</span><span class="mord">2</span><span class="mord">4</span><span class="mord">4</span><span class="mord">3</span><span class="mord">5</span><span class="mord">3</span></span></span></span> 取模</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo separator="true">,</mo><mi>k</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n,c\leq 10^3,k\leq 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span></p>
<p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><msub><mi>C</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>1</mn></msub><mo>}</mo></mrow><annotation encoding="application/x-tex">M=\max\{C_0,C_1,D_0,D_1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>≤</mo><mn>2500</mn></mrow><annotation encoding="application/x-tex">M\leq 2500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p>
<p>豆子重量不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>min</mi><mo>⁡</mo><mo>{</mo><mi>M</mi><mo separator="true">,</mo><mn>10</mn><mo>}</mo></mrow><annotation encoding="application/x-tex">\min\{M,10\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">}</span></span></span></span></p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2019/04/07/AfzWPe.png" alt="" loading="lazy"></figure>
<p>是个DP无疑,首先我们看向前30pts</p>
<p>设DP[i][j][k][0/1]表示黄圆有i个,黄皱有j个,绿圆有k个,绿皱有sum-i-j-k个而且这一个豆荚选择了0/1颜色的方案数</p>
<p>先按照豆荚拍下序,转移时枚举下一个豆子,分是不是还是之前豆荚处理以及顽皮豆就行了</p>
<p>复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mi>M</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*M^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,可以T掉7个点</p>
<p>然后考虑优化一下这个做法,我们只记录绿色豆子数量和圆豆子数量就行了</p>
<p>转移时不同的地方就是如果没有顽皮豆的限制要注意放在圆豆还是皱豆那堆里,并相应的用圆豆子数量变不变的状态转移</p>
<p>这个做法是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mi>M</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*M^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,可以T掉5个点,<s>可以发现我们T的点变少了/kk</s></p>
<p>然后看向第6,9个点,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn><mo>?</mo></mrow><annotation encoding="application/x-tex">k=0?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mclose">?</span></span></span></span>也就是说没有顽皮豆,这样去掉了一个限制,是不是问题就简化了呢?因为此时你分的颜色和分的性状二者是独立的,具体的,每一种合法的颜色划分方案都能对应一个性状划分方案,这样如果我们能求出合法的颜色划分方案和性状划分方案就可以直接乘一下过掉了</p>
<p>怎么写?就是正常0/1背包,倒序滚动的那种</p>
<p>再来看100pts,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">k&lt;=30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>,<s>是一个刚好不能容斥的范围,要是可以怎么容?</s></p>
<p>然鹅毕竟我们只有30颗顽皮豆,如果这些豆子能算出总方案,然后再和之前求得k=0的状态做一个类似背包合并的操作就可以了</p>
<p>30颗顽皮豆方案?好像之前50pts的做法是可以的?那我们就再用50分的那个做法把这些总方案求一下就好啦?</p>
<p>但是仔细想想你会发现50pts的DP是最难的...<s>而且之前只是口胡</s>我们回到这个题</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">F[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>表示前i个城市,蓝阵营有j个选,鸭派系有k个总方案数同时我们这个城市选的就是蓝阵营</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">G[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>表示前i个城市,蓝阵营有j个选,鸭派系有k个总方案数同时我们这个城市选的就是红阵营</p>
<p>i这一维先滚动掉</p>
<p>然后我们去枚举那些这个城市的学校</p>
<h2 id="case1讨厌小r">case1:讨厌小R</h2>
<p>对于F,我们只能放进Yazid,所以只需要把大于等于人数的平移过去,其他置为0</p>
<p>对于G,我们照常转移即可</p>
<h2 id="case2讨厌yazid">case2:讨厌Yazid</h2>
<p>对于F,无法转移,相当于动都不动的</p>
<p>对于G,照常转移</p>
<h2 id="case3讨厌大r以及case4讨厌zayid">case3:讨厌大R以及case4讨厌zayid</h2>
<p>和之前一样对称</p>
<p>上面的转移都是对于第二维派系来说的,所以最后别忘了对于阵营再转移一次,和case1中的F一样,然后再把F,G数组每个状态的方案数暴力加起来就行了</p>
<p>最后是把求得新状态和之前的pre合并....</p>
<p>考虑先枚举蓝阵营/鸭派系里有多少个人</p>
<p>然后把求得可以额外放进蓝阵营的人数的一个范围,上界是把C0填满,下界是把C1填满</p>
<p>那么这些人数构成的自由方案都可以,所以要对之前处理好的自由人方案求个前缀和,得到范围内答案a</p>
<p>同样的可以处理鸭派系自由方案和b</p>
<p>这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>F</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">a,b,F[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>三个数乘一下就是答案了....</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>(</mo><mi>c</mi><mo>+</mo><mi>n</mi><mo>)</mo><mi>M</mi><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup><mi>s</mi><mi>M</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O((c+n)M+k^2sM)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span>前面是预处理DP后面是计算F复杂度,因为s&lt;=10</p>
<p>终于结束了,最后强行推荐封面图</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;
const int MAXN = 2600;
const int P = 998244353;
bool hcty[MAXN];
int scty[MAXN], ht[MAXN], b[MAXN], s[MAXN], f[MAXN], pre_f[MAXN]
, F[MAXN][MAXN], g[MAXN], pre_g[MAXN], G[MAXN][MAXN], n, c, C0, C1, D0, D1, SUM;


inline void init() {
	n = read();
	c = read();
	SUM = 0;
	for(int i = 1; i &lt;= c; ++i)hcty[i] = 0, scty[i] = 0;
	C0 = read(), C1 = read(), D0 = read(), D1 = read();
	for(int i = 1; i &lt;= n; ++i)b[i] = read(), s[i] = read(), scty[b[i]] += s[i], ht[i] = -1, SUM += s[i];
	int K, x;
	K = read();
	for(int i = 1; i &lt;= K; ++i) {
		x = read();
		ht[x] = read();
		hcty[b[x]] = 1;
		//这个城市完了
	}

	memset(f, 0, sizeof(f));
	pre_f[0] = f[0] = 1;
	for(int i = 1; i &lt;= c; ++i) {
		if(!hcty[i] &amp;&amp; scty[i]) {
			for(int j = C0; j &gt;= scty[i]; --j) {
				(f[j] += f[j - scty[i]]) %= P;
			}
		}
	}
	for(int i = 1; i &lt;= C0; ++i)pre_f[i] = (pre_f[i - 1] + f[i]) % P;// printf(&quot;%d\n&quot;, pre_f[i]);

	memset(g, 0, sizeof(g));
	pre_g[0] = g[0] = 1;
	for(int i = 1; i &lt;= n; ++i) {
		if(-1 == ht[i]) {
			for(int j = D0; j &gt;= s[i]; --j) {
				(g[j] += g[j - s[i]]) %= P;
			}
		}
	}
	for(int i = 1; i &lt;= D0; ++i)pre_g[i] = (pre_g[i - 1] + g[i]) % P;// printf(&quot;%d\n&quot;, pre_g[i]);

	memset(F, 0, sizeof(F));
	memset(G, 0, sizeof(G));
	F[0][0] = 1;
}

inline void solve() {
	int Cs = 0, Ss = 0;
	for(int ct = 1; ct &lt;= c; ++ct) {
		if(hcty[ct]) {
			Cs += scty[ct], Cs = min(Cs, C0);
			//Cs是城市的人数前缀和与C0取min
			//printf(&quot;%d!\n&quot;, Cs);
			for(int i = 0; i &lt;= Cs; ++i) {
				for(int j = 0; j &lt;= Ss; ++j) {
					G[i][j] = F[i][j];
				}
			}
			for(int a = 1; a &lt;= n; ++a)
				if(b[a] == ct &amp;&amp; ~ht[a]) {
					const int t = s[a];

					Ss += t;
					Ss = min(Ss, D0);
					//printf(&quot;ha%d %d %d?\n&quot;, t, Ss, ht[a]);
					if(ht[a] == 1) {
						for(int i = 0; i &lt;= Cs; ++i) {//最外层枚举阵营人数
							for(int j = Ss; j &gt;= t; --j)F[i][j] = F[i][j - t];
							//F数组是考虑选择蓝阵营
							//等于1就相当于我们只能选Yazid
							for(int j = t - 1; ~j; --j)F[i][j] = 0;
						}
					}
					if(ht[a] &gt;= 2) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j)(F[i][j] += F[i][j - t]) %= P;
							//直接转移就行了我们放弃
						}
					}
					if(ht[a] == 3) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j)G[i][j] = G[i][j - t];
							for(int j = t - 1; ~j; --j)G[i][j] = 0;
						}
					}
					if(ht[a] &lt;= 1) {
						for(int i = 0; i &lt;= Cs; ++i) {
							for(int j = Ss; j &gt;= t; --j) {
								(G[i][j] += G[i][j - t]) %= P;
								//要么yazid要么小R
							}
						}
					}
				}
			for(int j = 0, t = scty[ct]; j &lt;= Ss; ++j) {
				for(int i = Cs; i &gt;= t; --i) F[i][j] = F[i - t][j];
				for(int i = t - 1; ~i; --i)F[i][j] = 0;
			}
			for(int i = 0; i &lt;= Cs; ++i) {
				for(int j = 0; j &lt;= Ss; ++j) {
					(F[i][j] += G[i][j]) %= P;
					//printf(&quot;%lld? &quot;, F[i][j]);
				}
				//puts(&quot;&quot;);
			}
		}
	}
	int res = 0;
	for(int i = 0; i &lt;= Cs; ++i) {
		for(int j = 0; j &lt;= Ss; ++j) {
			int l1 = max(0, SUM - C1 - i), r1 = C0 - i;
			//枚举派系的一个划分
			//考虑最少装多少个和最多装多少个
			//最多把C0装满,最少把C1装满
			//对一个r1和l1
			if(l1 &gt; r1)continue;
			int l2 = max(0, SUM - D1 - j), r2 = D0 - j;
			//枚举导师的一个划分
			if(l2 &gt; r2)continue;
			int vf = pre_f[r1];
			if(l1)vf += P - pre_f[l1 - 1];
			int vg = pre_g[r2];
			if(l2)vg += P - pre_g[l2 - 1];
			//前缀和部分233
			(res += 1ll * vf * vg % P * F[i][j] % P) %= P;
		}
	}
	printf(&quot;%d\n&quot;, res);
}


int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	int T;
	T = read();
	while(T-- &gt; 0) {
		init();
		solve();
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4688 [Ynoi2016]掉进兔子洞]]></title>
        <id>https://xiaxiaoguang.github.io/post/p4688-ynoi2016diao-jin-tu-zi-dong/</id>
        <link href="https://xiaxiaoguang.github.io/post/p4688-ynoi2016diao-jin-tu-zi-dong/">
        </link>
        <updated>2020-03-23T01:39:16.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi做的第二道题<br>
感言:<img src="https://cdn.luogu.com.cn/upload/pic/21091.png" alt="" loading="lazy"></p>
<p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个询问，每次询问三个区间，把三个区间中同时出现的数一个一个删掉，问最后三个区间剩下的数的个数和，询问独立。</p>
<p>注意这里删掉指的是一个一个删，不是把等于这个值的数直接删完，比如三个区间是  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,2,2,3,3,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,2,2,3,3,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span> 与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,1,2,3,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，就一起扔掉了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。</p>
<p>好的我们一开题就直接完蛋自闭了没有做过如此强大的套路弃疗了</p>
<p>正经的,我们需要对三个区间支持类似于数点去重的东西....而且还要支持1e5次询问</p>
<p>三维数点我只会bitset.....<s>然而并没有想到啊</s></p>
<p>如果我们能有一个神奇的bitset把三个区间的信息记录下来然后&amp;一下不就是得到要去掉的数的个数了吗?</p>
<p>而你又神奇的发现好像只需要一个莫队就能消掉区间的限制,而且bitset单点加入和查询O1!</p>
<p>然而问题又来了,bitset他现在还不够神奇,不能够记录重复了多少个...因为每个位置上的信息只有0/1</p>
<p>我们再想一下能不能莫队来帮助记录??因为我们总共的数字数是n大小的</p>
<p>那么参照之前BJOI那道题推倒的做法我们可以这样更改bitset记录方式</p>
<p>val[p]表示bitsetp位置的权值是什么,cnt[p]表示这个权值在原序列出现次数</p>
<p>每个位置p到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo>[</mo><mi>p</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">p-cnt[val[p]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>记录了这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>p</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">cnt[p]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span></span></span></span>个数出现情况,也就是说出现第一次位置p是1,出现第二次把位置p-1置为1....第k次把p-k置为1</p>
<p>这样and起来就真的是要删掉的数个数了!</p>
<p>还有个问题,我们空间开不下啊</p>
<p>所以我们可以把1e5次询问分成3组,然后循环利用同一个ansbitset就行了,典型的以空间换时间</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;bitset&gt;
#include&lt;map&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 1e5 + 10;
const int M = 34010;
#define ll long long
int a[MAXN], n, m, nans[MAXN], tp, tot, cnt[MAXN];
map&lt;int, int&gt; mp;
bitset&lt;MAXN&gt; ans[M], nb;
struct Qry {
	int l, r, t;
} q[M*3];
inline bool cmp1(const Qry &amp;a, const Qry &amp;b) {
	return a.l &lt; b.l;
}
inline bool cmp2(const Qry &amp;a, const Qry &amp;b) {
	return a.r &lt; b.r;
}
inline void ins(int p) {
	nb[p - cnt[p]] = 1;
	cnt[p]++;
}
inline void del(int p) {
	cnt[p]--;
	nb[p - cnt[p]] = 0;
}
inline void solve() {
	if(tot &gt;= m)return ;
	for(int i = 1; i &lt;= M - 10 &amp;&amp; tot &lt;= m; ++i, ++tot) {
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
		++tp;
		scanf(&quot;%d%d&quot;, &amp;q[tp].l, &amp;q[tp].r);
		q[tp].t = i; nans[i] += q[tp].r - q[tp].l + 1;
	}
	for(int i = 1; i &lt;= tp / 3; ++i)ans[i].set();
	sort(q + 1, q + tp + 1, cmp1);
	int nl = 0, nr = 0;
	for(int i = 1; i &lt;= tp; i += 320) {
		int r = min(tp, i + 319);
		sort(q + i, q + r + 1, cmp2);
		//分块的神仙排序法
	}
	for(int i = 1; i &lt;= tp; ++i) {
		if(nr &lt; q[i].l) {
			for(int j = nl; j &lt;= nr; ++j)del(a[j]);
			nl = q[i].l; nr = q[i].r;
			for(int j = nl; j &lt;= nr; ++j)ins(a[j]);
			//优化?
		} else {
			while(nl &lt; q[i].l)del(a[nl]), ++nl;
			while(nl &gt; q[i].l)--nl, ins(a[nl]);
			while(nr &lt; q[i].r)nr++, ins(a[nr]);
			while(nr &gt; q[i].r)del(a[nr]), nr--;
		}
		ans[q[i].t] &amp;= nb;
	}
	for(int i = nl; i &lt;= nr; ++i)del(a[i]);
	for(int i = 1; i &lt;= tp / 3; ++i)printf(&quot;%lld\n&quot;, nans[i] - ans[i].count() * 3);
	for(int i = 1; i &lt;= tp / 3; ++i)nans[i] = 0; tp = 0;
}
int main() {
	tot = 1;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1; i &lt;= n; ++i)scanf(&quot;%d&quot;, &amp;a[i]);
	for(int i = 1; i &lt;= n; ++i)mp[a[i]]++;
	map&lt;int, int&gt;::iterator it, it1;
	for(it = mp.begin(), it1 = it, ++it1; it1 != mp.end(); ++it, ++it1)it1-&gt;second += it-&gt;second;
	for(int i = n; i &gt;= 1; --i)a[i] = mp[a[i]];
	solve();
	solve();
	solve();
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4689 [Ynoi2016]这是我自己的发明]]></title>
        <id>https://xiaxiaoguang.github.io/post/p4689-ynoi2016zhe-shi-wo-zi-ji-de-fa-ming/</id>
        <link href="https://xiaxiaoguang.github.io/post/p4689-ynoi2016zhe-shi-wo-zi-ji-de-fa-ming/">
        </link>
        <updated>2020-03-23T00:44:38.000Z</updated>
        <content type="html"><![CDATA[<p>Ynoi2016不知哪道题</p>
<p>俗话说得好<code>在你膨胀的时候做一下Ynoi</code>,立刻就能让你感到自己的弱小</p>
<p>如果这种难度的数据结构也能秒掉那你可以PKUWC2020AK了</p>
<p>1 x 将树根换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。</p>
<p>2 x y 给出两个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的子树中选每一个点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的子树中选每一个点，求点权相等的情况数。</p>
<p>首先我们要有一个第一选择,就是大体上有什么数据结构做这个事情</p>
<p>你会敏锐的发现好像<code>两两点权相等总方案</code>只适合带根号做法......所以我们要树上莫队</p>
<p>但是怎么莫队呢??我们先搞出dfs序然后再换根的前提下就是两个区间的查询</p>
<p>莫队的询问信息不能有四维啊....所以我们先考虑差分一下变成两维</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>l</mi><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>−</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>1</mn><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo>)</mo><mo>−</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>1</mn><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">f(l1,r1,l2,r2)=f(1,r1,1,r2)-f(1,l1-1,1,r2)-f(1,r1,1,l2-1)+f(1,l1-1,1,l2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p>所以这个就变成了一个二维的问题,虽然询问数*4了</p>
<p>有了这个莫队部分就很显然了</p>
<p>再来考虑换根....哎好像是<code>假的</code>?</p>
<p>情况一   x=root，很显然此时应当查询整棵树。<br>
<img src="https://img-blog.csdn.net/20150514113344299?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
情况二 lca(root,x)!=x ,此时直接查询x的子树即可，与换根无关。<br>
<img src="https://img-blog.csdn.net/20150514113901346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
情况三，lca(root,x)=x，此时我们应当查询与x相邻的节点中与root最近的点v在整棵树中的补集<br>
<img src="https://img-blog.csdn.net/20150514114150100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGNvbXlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="qwq" loading="lazy"><br>
可以发现v一定在root到x的链上，且一定是x在这条链上的儿子，倍增法可以求得v</p>
<p>好的,也就是说如果有情况3我们原本两段dfs区间会变成4段,再差分变成16个询问QAQ</p>
<p>所以这个就是卡常毒瘤啊,40多行编译优化</p>
<p>code:</p>
<pre><code class="language-cpp">
#pragma G++ optimize(2)
#pragma G++ optimize(3)

#pragma G++ target(&quot;avx&quot;)
#pragma G++ optimize(&quot;Ofast&quot;)
#pragma G++ optimize(&quot;inline&quot;)
#pragma G++ optimize(&quot;-fgcse&quot;)
#pragma G++ optimize(&quot;-fgcse-lm&quot;)
#pragma G++ optimize(&quot;-fipa-sra&quot;)
#pragma G++ optimize(&quot;-ftree-pre&quot;)
#pragma G++ optimize(&quot;-ftree-vrp&quot;)
#pragma G++ optimize(&quot;-fpeephole2&quot;)
#pragma G++ optimize(&quot;-ffast-math&quot;)
#pragma G++ optimize(&quot;-fsched-spec&quot;)
#pragma G++ optimize(&quot;unroll-loops&quot;)
#pragma G++ optimize(&quot;-falign-jumps&quot;)
#pragma G++ optimize(&quot;-falign-loops&quot;)
#pragma G++ optimize(&quot;-falign-labels&quot;)
#pragma G++ optimize(&quot;-fdevirtualize&quot;)
#pragma G++ optimize(&quot;-fcaller-saves&quot;)
#pragma G++ optimize(&quot;-fcrossjumping&quot;)
#pragma G++ optimize(&quot;-fthread-jumps&quot;)
#pragma G++ optimize(&quot;-funroll-loops&quot;)
#pragma G++ optimize(&quot;-fwhole-program&quot;)
#pragma G++ optimize(&quot;-freorder-blocks&quot;)
#pragma G++ optimize(&quot;-fschedule-insns&quot;)
#pragma G++ optimize(&quot;inline-functions&quot;)
#pragma G++ optimize(&quot;-ftree-tail-merge&quot;)
#pragma G++ optimize(&quot;-fschedule-insns2&quot;)
#pragma G++ optimize(&quot;-fstrict-aliasing&quot;)
#pragma G++ optimize(&quot;-fstrict-overflow&quot;)
#pragma G++ optimize(&quot;-falign-functions&quot;)
#pragma G++ optimize(&quot;-fcse-skip-blocks&quot;)
#pragma G++ optimize(&quot;-fcse-follow-jumps&quot;)
#pragma G++ optimize(&quot;-fsched-interblock&quot;)
#pragma G++ optimize(&quot;-fpartial-inlining&quot;)
#pragma G++ optimize(&quot;no-stack-protector&quot;)
#pragma G++ optimize(&quot;-freorder-functions&quot;)
#pragma G++ optimize(&quot;-findirect-inlining&quot;)
#pragma G++ optimize(&quot;-fhoist-adjacent-loads&quot;)
#pragma G++ optimize(&quot;-frerun-cse-after-loop&quot;)
#pragma G++ optimize(&quot;inline-small-functions&quot;)
#pragma G++ optimize(&quot;-finline-small-functions&quot;)
#pragma G++ optimize(&quot;-ftree-switch-conversion&quot;)
#pragma G++ optimize(&quot;-foptimize-sibling-calls&quot;)
#pragma G++ optimize(&quot;-fexpensive-optimizations&quot;)
#pragma G++ optimize(&quot;-funsafe-loop-optimizations&quot;)
#pragma G++ optimize(&quot;inline-functions-called-once&quot;)
#pragma G++ optimize(&quot;-fdelete-null-pointer-checks&quot;)


#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define ll long long
using namespace std;
const int MAXN = 5e5 + 20;
namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;
void write(ll x) {
	if(x &gt; 9) write(x / 10);
	putchar(x % 10 + 48);
}
int ccnt;
struct edge {
	int to, nxt;
} e[MAXN];

struct Qry {
	int l, r, id, f;
} q[8000010];

int Q, m, in[MAXN], out[MAXN], idx, _dfn, st[MAXN][21], dfn[MAXN], dep[MAXN], fa[MAXN], home[MAXN],
	rt, cnt[MAXN][2], is_q[MAXN], top[MAXN], son[MAXN], siz[MAXN], tl[MAXN], tr[MAXN], o[MAXN], c[MAXN], a[MAXN], n,
	lg2[MAXN];
ll ans[MAXN], ima, _c, SIZ;

void ct(int u, int v) {
	e[++ccnt] = (edge) {
		v, home[u]
	};
	home[u] = ccnt;
}

bool cmp(Qry a, Qry b) {
	return a.l / SIZ == b.l / SIZ ? a.r &lt; b.r : a.l &lt; b.l;
}

void dfs1(int u, int F) {
	st[++idx][0] = u;
	in[u] = ++_dfn;
	dfn[u] = idx;
	c[_dfn] = a[u];
	dep[u] = dep[F] + 1;
	fa[u] = F;
	siz[u] = 1;
	for(int i = home[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == F)continue;
		dfs1(v, u);
		st[++idx][0] = u;
		siz[u] += siz[v];
		if(siz[v] &gt; siz[son[u]])son[u] = v;
	}
	out[u] = _dfn;
	//printf(&quot;%d %d %d %d %d %d\n&quot;, u, dfn[u], in[u], dep[u], son[u], fa[u]);
}

void dfs2(int u, int topf) {
	top[u] = topf;
	if(son[u])dfs2(son[u], topf);
	for(int i = home[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v != son[u] &amp;&amp; v != fa[u])
			dfs2(v, v);
	}
	//	printf(&quot;%d %d\n &quot;, u, top[u]);
}
//找一下x在y的哪一个子树里面
int find(int y, int x) {
	int u;
	while(top[x] != top[y]) {
		u = top[x];
		x = fa[u];
	}
	return x == y ? u : son[y];
}

void init() {
	dep[1] = 1;
	dfs1(1, 1);
	dfs2(1, 1);
	for(int i = 2; i &lt;= (n &lt;&lt; 1); ++i)lg2[i] = lg2[i &gt;&gt; 1] + 1;
	for(int j = 1; j &lt;= 21; ++j) {
		for(int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= (n &lt;&lt; 1); ++i) {
			st[i][j] = dep[st[i][j - 1]] &lt; dep[st[i + (1 &lt;&lt; (j - 1))][j - 1]] ? st[i][j - 1] : st[i + (1 &lt;&lt; (j - 1))][j - 1];
		}
	}
}

int LCA(int u, int v) {
	int x = dfn[u], y = dfn[v];
	if(x &gt; y)swap(x, y);
	int k = lg2[y - x + 1];
	return dep[st[x][k]] &lt; dep[st[y - (1 &lt;&lt; k) + 1][k]] ? st[x][k] : st[y - (1 &lt;&lt; k) + 1][k];
}

void RC(int l1, int r1, int l2, int r2, int id) {
	q[++m] = (Qry) {
		r1, r2, id, 1
	};
	q[++m] = (Qry) {
		l1 - 1, l2 - 1, id, 1
	};
	q[++m] = (Qry) {
		r1, l2 - 1, id, -1
	};
	q[++m] = (Qry) {
		l1 - 1, r2, id, -1
	};
	//二维前缀和/jk
}

void devide(int x) {
	if(x == rt)tl[++_c] = 1, tr[_c] = n;//哇偶我就是根
	else {
		int z = LCA(x, rt);
		//	printf(&quot;%d %d %dQAQ\n&quot;, x, rt, z);
		if(z != x) {
			tl[++_c] = in[x];
			tr[_c] = out[x];
			//相当于还是你自己整棵
		} else {
			int y = find(x, rt);
			//找到这个儿子
			if(1 &lt;= in[y] - 1)tl[++_c] = 1;
			tr[_c] = in[y] - 1;
			//我们先把第一段这个加进去
			//这一部分要减去
			if(out[y] + 1 &lt;= n)tl[++_c] = out[y] + 1, tr[_c] = n;
			//再把第二段加进去
			//outy+1就对应了另一段,n是最后一个
		}
	}
}

void build(int x, int y, int id) {
	_c = 0;
	//	printf(&quot;%d %d %d?\n&quot;, x, y, id);
	devide(x);
	int mid = _c;
	devide(y);
	//下面是压行写法233
	for(int i = 1; i &lt;= mid; ++i) {
		for(int j = mid + 1; j &lt;= _c; ++j) {
			//	printf(&quot;%d %d %d %d &amp;\n&quot;, tl[i], tr[i], tl[j], tr[j]);
			RC(tl[i], tr[i], tl[j], tr[j], id);
			//把这些信息计入Q
		}
	}
}

void add(int x, int p) {
	ima += cnt[c[x]][p ^ 1];
	++cnt[c[x]][p];
}
void del(int x, int p) {
	ima -= cnt[c[x]][p ^ 1];
	--cnt[c[x]][p];
}


int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	Q = read();
	SIZ = sqrt(n);
	for(register int i = 1; i &lt;= n; ++i)a[i] = read(), o[i] = a[i];
	sort(o + 1, o + n + 1);
	int _n = unique(o + 1, o + n + 1) - o - 1;
	for(register int i = 1; i &lt;= n; ++i)a[i] = lower_bound(o + 1, o + _n + 1, a[i]) - o;
	for(register int u, v, i = 1; i &lt; n; ++i)u = read(), v = read(), ct(u, v), ct(v, u);
	init();
	rt = 1;
	for(register int opt, x, y, i = 1; i &lt;= Q; ++i) {
		opt = read();
		x = read();
		if(opt == 1)rt = x;
		else is_q[i] = 1, y = read(), build(x, y, i);
	}
	for(int i = 1; i &lt;= m; ++i)if(q[i].l &gt; q[i].r)swap(q[i].l, q[i].r);
	sort(q + 1, q + m + 1, cmp);
	for(register int L = 0, R = 0, i = 1; i &lt;= m; ++i) {
		int l = q[i].l, r = q[i].r;
		//	printf(&quot;%d %d %d %d\n&quot;, q[i].l, q[i].r, q[i].id, q[i].f);
		while(L &lt; l)add(++L, 0);
		while(L &gt; l)del(L--, 0);
		while(R &lt; r)add(++R, 1);
		while(R &gt; r)del(R--, 1);
		ans[q[i].id] += ima * q[i].f;
	}
	for(int i = 1; i &lt;= Q; ++i)if(is_q[i])write(ans[i]), putchar('\n');
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P3750 [六省联考2017]分手是祝愿]]></title>
        <id>https://xiaxiaoguang.github.io/post/p3750-liu-sheng-lian-kao-2017fen-shou-shi-zhu-yuan/</id>
        <link href="https://xiaxiaoguang.github.io/post/p3750-liu-sheng-lian-kao-2017fen-shou-shi-zhu-yuan/">
        </link>
        <updated>2020-03-22T14:55:37.000Z</updated>
        <content type="html"><![CDATA[<p>六省联考D2T3</p>
<p>首先果然代码不长不毒瘤,而且这个关灯博弈之前还看过,就是忘了</p>
<p>然后有一些也推不太出来吧.....总的来说并不难,没有做D2T3潜质</p>
<p>题意：有一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>01</mn></mrow><annotation encoding="application/x-tex">01</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span></span></span></span> 串，下标编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。对位置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 操作一次可以使所有编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的约数的位置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 变 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 变 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。目标是使所有位置变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。B 君先随机操作若干次，等到当前局面可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 次操作以内达成目标时就使用最优策略，达成目标后结束操作。求期望操作次数。</p>
<p>看见期望和奇怪的限制肯定是dp,但是并让人不好下手</p>
<p>于是本题最重要的一个贪心思想出现了</p>
<blockquote>
<p>任何一个按键带来的影响都不能通过其他按键的组合表示出来</p>
</blockquote>
<p>也就是说,如果这个按键现在是暗的,你按了的他,就一定要再按一次,否则一定不会达到全局暗的局面</p>
<p>这个形式好像就来源于唯一分解定理?</p>
<p>有了这个就真的可以DP了,我们考虑按照需要按的键数来设计状态,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示当前有i个需要按的键变到只需要有i-1个键的期望步数</p>
<p>然后我们考虑转移,</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mfrac><mi>i</mi><mi>n</mi></mfrac><mo>+</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow><mi>i</mi></mfrac><mo>(</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">f[i]=\frac{i}{n}+\frac{n-i}{i}(f[i+1]+f[i]+1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p>这个式子相当于我们有i/n概率按中正确的,而又有n-i/n概率炸掉,然后再按回来</p>
<p>整理一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>)</mo><mo>∗</mo><mo>(</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>]</mo><mo>)</mo></mrow><mi>i</mi></mfrac></mrow><annotation encoding="application/x-tex">f[i]=\frac{n+(n-i)*(f[i+1])}{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span><span class="mbin mtight">∗</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">]</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>就可以O(n)递推了</p>
<p>假设原局面要cnt步</p>
<p>我们有了f数组,随机按之后到k就相当于只需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>−</mo><mn>2</mn><mo>]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>f</mi><mo>[</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">f[cnt]+f[cnt-1]+f[cnt-2]....f[k+1]+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>这么多期望步就行了</p>
<p>如果k&gt;=cnt?输出cnt啊你在想什么</p>
<p>注意乘上阶乘</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
const int MAXN = 2e5 + 7;
const int P = 100003;
int n, k;
int a[MAXN], vis[MAXN];
int fac[MAXN], ifac[MAXN];
int f[MAXN];

inline int ksm(long long x, int y) {
	long long ans = 1;
	while(y) {
		if(y &amp; 1)ans = ans * x % P;
		x = x * x % P;
		y &gt;&gt;= 1;
	}
	return ans;
}

inline void init() {
	fac[0] = ifac[0] = 1;
	ifac[1] = 1;
	for(int i = 1; i &lt;= n; ++i)fac[i] = 1ll * fac[i - 1] * i % P;
	ifac[n] = ksm(fac[n], P - 2);
	for(int i = n - 1; i &gt;= 2; --i)ifac[i] = 1ll * ifac[i + 1] * (i + 1) % P;
	return ;
}

inline int ni(int x) {
	return 1ll * ifac[x] * fac[x - 1] % P;
}

int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
	for(int i = 1; i &lt;= n; ++i) {
		scanf(&quot;%d&quot;, &amp;a[i]);
		vis[i] = a[i];
	}
	init();
	//printf(&quot;%d %d\n&quot;, fac[n], ifac[2]);
	int cnt = 0;
	for(int i = n; i &gt;= 1; --i) {
		if(vis[i]) {
			for(int j = 1; j * j &lt;= i; ++j) {
				if(i % j == 0) {
					vis[j] ^= 1;
					if(j != i / j)vis[i / j] ^= 1;
                    //判断原局面步数
				}
			}
			cnt++;
		}
	}
	if(k &gt;= cnt)return printf(&quot;%lld\n&quot;, 1ll * cnt * fac[n] % P), 0;
	for(int i = n; i &gt;= 1; --i) {
		f[i] = (n + (1ll * n - i) * f[i + 1]) * ni(i) % P;
		//printf(&quot;%d\n&quot;, f[i]);
	}//dp部分
	long long ans = k;
	for(int i = cnt; i &gt; k; --i) {
		(ans += f[i]) %= P;
	}//统计答案
	printf(&quot;%lld\n&quot;, ans * fac[n] % P);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P2179 [NOI2012]骑行川藏]]></title>
        <id>https://xiaxiaoguang.github.io/post/p2179-noi2012qi-xing-chuan-cang/</id>
        <link href="https://xiaxiaoguang.github.io/post/p2179-noi2012qi-xing-chuan-cang/">
        </link>
        <updated>2020-03-22T03:46:13.000Z</updated>
        <content type="html"><![CDATA[<p>NOI2012D2T2</p>
<p>在满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><mo>(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>v</mi><mi>i</mi></msub><msup><mo>)</mo><mn>2</mn></msup><mo>≤</mo><msub><mi>E</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^ns_i k_i(x_i-v_i)^2\le E_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​的条件下最小化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><msub><mi>s</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\frac{s_i}{x_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2493919999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7114919999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>这个题D2T2没毛病的,我考场能拿40就万幸</p>
<p>考虑n=1的情况,那么我们一定要在这个路段上用光我们的能量才能最快解决,那么只需解个方程</p>
<p>n=2的情况?我们考虑盲猜E函数有单调性,然后二分一下左边用多少能量右边用多少能量</p>
<p>然而他没有,所以我们可以把值域划分为很多段,在每一段中二分<s>总有一个答案在而且单调的</s>,提高复杂度和正确率</p>
<p>考虑正解,<code>拉格朗日乘子法</code>,我是根本不会的</p>
<p>于是感性一下:</p>
<p>我们每一个路段都有一个类似于<code>性价比</code>的东西,也就是说我们付出的能量越多,这个路段的时间越少,这个性价比是关于E和t的函数</p>
<p>而且这是个数学题啊...我们看到</p>
<ul>
<li>必然存在一种最优的体力方案满足：蛋蛋在每段路上都采用匀速骑行的方式。</li>
</ul>
<p>那么是不是感性一下我们每段路匀速,全局是不是最后可以全局每段路调节到同一个性价比最优呢?</p>
<p>这个感性上是贪心证明,因为性价比高的路段你愿意多花能量,但能量花多了会使性价比下降,而我们每次都是选性价比最高的来花能量...所以最后会导致性价比都一样达到最优解</p>
<p>这个过程显然不能模拟</p>
<p>理性理解,我们把样例带进去手算就行了2333</p>
<p>我们对于每个路段画出一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>−</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">t-E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>(需要时间和花费能量)图像,那么性价比好像就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi mathvariant="normal">/</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">t/E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>啊...这不就是这个路段花费e能量后对应那一点在图像上的导数吗?</p>
<p>那么最优解满足每个路段选取的那一点导数一样,注意这个导数是负的</p>
<p>再来感性理解,这个导数越大(也就是性价比越低),需要能量越多,总时间越少</p>
<p>盲猜这个单调,所以我们可以二分这个公共导数值</p>
<p>最后细节要推一下式子</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>k</mi><mo>(</mo><mi>v</mi><mo>−</mo><msup><mi>v</mi><mo mathvariant="normal">′</mo></msup><msup><mo>)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=k(v-v&#x27;)^2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mi>s</mi><mi>v</mi></mfrac></mrow><annotation encoding="application/x-tex">t=\frac{s}{v}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>t</mi></mrow><mrow><mi>d</mi><mi>E</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><mi>t</mi></mrow><mrow><mi>d</mi><mi>v</mi></mrow></mfrac><mi mathvariant="normal">/</mi><mfrac><mrow><mi>d</mi><mi>E</mi></mrow><mrow><mi>d</mi><mi>v</mi></mrow></mfrac><mo>=</mo><mo>−</mo><mfrac><mi>s</mi><msup><mi>v</mi><mn>2</mn></msup></mfrac><mo>∗</mo><mo>(</mo><mn>2</mn><mi>k</mi><mo>∗</mo><mo>(</mo><mi>v</mi><mo>−</mo><msup><mi>v</mi><mo mathvariant="normal">′</mo></msup><mo>)</mo><mo>)</mo><mo>=</mo><mo>−</mo><mfrac><mi>s</mi><mrow><mn>2</mn><mi>k</mi><msup><mi>v</mi><mn>2</mn></msup><mo>(</mo><mi>v</mi><mo>−</mo><msup><mi>v</mi><mo mathvariant="normal">′</mo></msup><mo>)</mo></mrow></mfrac><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\frac{dt}{dE}=\frac{dt}{dv}/\frac{dE}{dv}=-\frac{s}{v^2}*(2k*(v-v&#x27;))=-\frac{s}{2kv^2(v-v&#x27;)}=x
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">/</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0435600000000003em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p>
<p>我们二分这个x就可以算出每一段v进而有E</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using std::max;
const int MAXN = 1e5 + 7, inf = 0x3f3f3f3f;
#define ll long long
int n;
double E, s[MAXN], k[MAXN], u[MAXN];
double getv(double x, int i)
{
    double l = max(u[i], double(0)), r = 1e5 + 5, mid;
    int cnt = 60;
    while(cnt-- &gt; 0)
    {
        mid = (l + r) / 2;
        if(2 * k[i]*x * mid * mid * (mid - u[i]) &gt; -s[i])l = mid;
        else r = mid;
    }
    //知道这里为什么选择二分求解而不是直接解那个假三次方程吗?
    //因为作者无聊啊
    return (l + r) / 2;
}
double calc(double x)
{
    double sum = 0;
    for(int i = 1; i &lt;= n; ++i)
    {
        double v = getv(x, i);
        //带入x性价比算出这个最优的v
        sum += k[i] * (v - u[i]) * (v - u[i]);
        //计算动量
    }
    return sum;
}

int main()
{
    scanf(&quot;%d%lf&quot;, &amp;n, &amp;E);
    for(int i = 1; i &lt;= n; ++i)
    {
        scanf(&quot;%lf%lf%lf&quot;, &amp;s[i], &amp;k[i], &amp;u[i]), k[i] *= s[i];
    }
    double l = -inf, r = 0, mid;
    int cnt = 100;
    while(cnt--)
    {
        mid = (l + r) / 2;
        if(calc(mid) &lt;= E)l = mid;//最外层二分导数,注意是负的
        else r = mid;
    }
    mid = (l + r) / 2;
    double ans = 0;
    for(int i = 1; i &lt;= n; ++i)ans += s[i] / getv(mid, i);
    printf(&quot;%.10lf\n&quot;, ans);
    return 0;
}

</code></pre>
<p>吐槽T3三重镇AC0,看来只要提答还在我就过不了NOID2T3....</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P2081 [NOI2012]迷失游乐园]]></title>
        <id>https://xiaxiaoguang.github.io/post/p2081-noi2012mi-shi-you-le-yuan/</id>
        <link href="https://xiaxiaoguang.github.io/post/p2081-noi2012mi-shi-you-le-yuan/">
        </link>
        <updated>2020-03-21T23:26:55.000Z</updated>
        <content type="html"><![CDATA[<p>NOI2012D1T3</p>
<p><s>想屁吃D2T3233</s>另外美食节那个题就是优化时间戳做一遍更新一遍的技巧就咕掉了</p>
<p>给定一棵带权树/基环树，随机选一点出发走不重复路径，问期望带权路径长度.</p>
<p>我们还是先考虑树的部分,一个经典状态设计,</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">down[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示从i点出发向下走的期望长度,不难发现走不回来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">up[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示从i点<code>第一步出发向上</code>的概率,除了第一步硬点其他步数随意,就是他父亲第二歩可以向上也可以向下</p>
<p>好的我们先考虑<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">down[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>,son[u]表示u的度数-1</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>u</mi><mo>]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>u</mi><mo>]</mo></mrow></mfrac><munder><mo>∑</mo><mrow><mi>v</mi><mo>⊂</mo><mi>u</mi></mrow></munder><mrow><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>v</mi><mo>]</mo><mo>+</mo><msub><mi>w</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>v</mi></mrow></msub></mrow></mrow><annotation encoding="application/x-tex">down[u]=\frac{1}{son[u]}\sum_{v \subset u} {down[v]+w_{u,v}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.598815em;vertical-align:-1.2773750000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8999949999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">⊂</span><span class="mord mathdefault mtight">u</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2773750000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>就是枚举每个儿子考虑走下去啊,注意概率不是son[u]+1是因为我们硬点了</p>
<p>再是up,需要down数组辅助才行</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi></mrow></msub><mo>+</mo><mfrac><mrow><mi>u</mi><mi>p</mi><mo>[</mo><mi>f</mi><mi>a</mi><mo>]</mo><mo>+</mo><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>f</mi><mi>a</mi><mo>]</mo><mo>∗</mo><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>f</mi><mi>a</mi><mo>]</mo><mo>−</mo><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>−</mo><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub></mrow><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>f</mi><mi>a</mi><mo>]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">up[i]=w_{i,fa}+\frac{up[fa]+down[fa]*son[fa]-down[i]-w_{i,k}}{son[fa]}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>这个直接理解就是父亲可以走的边有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>f</mi><mi>a</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">son[fa]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">]</span></span></span></span>条,每条的期望考虑一下就是了</p>
<p>易知每个点的答案<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>n</mi><msub><mi>s</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>u</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>∗</mo><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">Ans_i=\frac{up[i]+down[i]*son[i]}{son[i]+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<h3 id="再来考虑基环树吧">再来考虑基环树吧</h3>
<p>对于一个环上每个点up[i],我们考虑重新列式子</p>
<p>第一遍,硬点每个点只能第一步顺时针走求出一个概率,第二遍,硬点每个点只能向右走求出一个概率两遍求个均值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mo>∑</mo><mrow><msub><mi>P</mi><mi>j</mi></msub><mo>∗</mo><mo>(</mo><mfrac><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>∗</mo><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>+</mo><mn>1</mn></mrow></mfrac><mo>+</mo><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>)</mo></mrow></mrow><annotation encoding="application/x-tex">up[i]=\sum{P_j*(\frac{son[j]*down[j]}{son[j]+1}+w_{i,j})}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></span></p>
<p>注意,i和j在环上是连续的,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示i到环上第j个点的概率</p>
<p>因为环很小很小所以这个可以环^2呢</p>
<p>那么这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>怎么求?还是环^2就行,在有之前硬点的情况下,我们从i出发dfs到i+1,则<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \farc at position 15: P_{i+1}=P_{i}*\̲f̲a̲r̲c̲{1}{(son[i]+2)}'>P_{i+1}=P_{i}*\farc{1}{(son[i]+2)}</span></p>
<p>这样就可以了,细节实现时候我们可以 把环拎出来建虚环或者用双向链表</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
const int MAXN = 2e5 + 10;
int home[MAXN], tag[MAXN], circle[MAXN], pre[MAXN], nex[MAXN];

double son[MAXN], fa[MAXN], up[MAXN], down[MAXN];

int n, m, ccnt, tot, flag;
double dis[25][25], ans;
bool vis[MAXN];
struct edge {
    int to, nxt;
    double w;
} e[MAXN &lt;&lt; 1];

inline void ct(int u, int v, double w) {
    e[++ccnt].to = v;
    e[ccnt].nxt = home[u];
    e[ccnt].w = w;
    home[u] = ccnt;
}

void find_circle(int u, int F) {
    vis[u] |= 1;
    for(register int i = home[u]; i; i = e[i].nxt) {
        int v = e[i].to;
        if(v == F)continue;
        if(vis[v]) {
            flag = v;
            return ;
        }
        find_circle(v, u);
        if(flag &gt; 0) {
            if(flag == u)flag = -1;
            return ;
        }
        if(flag == -1)break;
    }
    vis[u] = 0;
}//如果一个节点在环上则vis=1

void dfs_down(int u, int F) {
    for(register int i = home[u]; i; i = e[i].nxt) {
        int v = e[i].to;
        if(vis[v] || v == F)continue;
        fa[v] = 1;
        dfs_down(v, u);
        son[u]++;
        down[u] += down[v] + e[i].w;
    }
    if(son[u])down[u] /= son[u];
    // printf(&quot;%d %lf\n&quot;,u,down[u]);
}

void dfs_up(int u, int F, double w) {
    up[u] = w;
    if(fa[F] + son[F] &gt; 1)up[u] += (fa[F] * up[F] + son[F] * down[F] - down[u] - w) / (fa[F] + son[F] - 1);
    //如果不大于1就说明他已经走到了叶子
    //命秒没
    for(register int i = home[u]; i; i = e[i].nxt) {
        int v = e[i].to;
        if(v != F)dfs_up(v, u, e[i].w);
    }
}

void dfs_circle(int u, int F) {
    if(tag[u])return ;//可能绕完回来了
    circle[++tot] = u;
    tag[u] = tot;
    //u是环上的第几号点
    fa[u] = 2;
    for(register int i = home[u]; i; i = e[i].nxt) {
        int v = e[i].to;
        if(!vis[v] || v == F)continue;
        pre[v] = u;
        nex[u] = v;
        //链表
        dfs_circle(v, u);
        int nw = tag[u], to = tag[v];
        dis[nw][to] = dis[to][nw] = e[i].w;
        break;
        //走一步就行
    }
}

inline void type1() {
    find_circle(1, 0);
    //puts(&quot;qwq&quot;);
    for(register int i = 1; i &lt;= n; ++i) {
        if(vis[i]) {
            dfs_circle(i, 0);
            //把双向链表搞出来
            break;
        }
    }
    //puts(&quot;qaq&quot;);
    for(register int i = 1; i &lt;= tot; ++i)dfs_down(circle[i], 0);
    //qwq
    for(register int i = 1; i &lt;= tot; ++i) {
        int u = circle[i];
        double P1 = 1, P2 = 1;
        for(register int j = nex[u]; j != u; j = nex[j]) {
            int w = dis[tag[pre[j]]][tag[j]];
            if(nex[j] == u)up[u] += P1 * (w + down[j]);
            else up[u] += P1 * (w + (down[j] * son[j]) / (son[j] + 1));
            P1 /= (son[j] + 1);
        }
        for(register int j = pre[u]; j != u; j = pre[j]) {
            int w = dis[tag[nex[j]]][tag[j]];
            if(pre[j] == u)up[u] += P2 * (w + down[j]); //相邻啊
            else up[u] += P2 * (w + (down[j] * son[j]) / (son[j] + 1));
            P2 /= (son[j] + 1); //不相邻
        }
        up[u] /= 2;//顺着和逆着的概率一样
    }
    for(register int j = 1; j &lt;= tot; ++j) {
        for(register int i = home[circle[j]]; i; i = e[i].nxt) {
            int v = e[i].to;
            if(!vis[v]) {
                dfs_up(v, circle[j], e[i].w);
            }
        }
    }
}

inline void type2() {
    dfs_down(1, 0);
    for(register int i = home[1]; i; i = e[i].nxt) {
        dfs_up(e[i].to, 1, e[i].w);
    }
}

int main() {
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    for(register int i = 1, u, v, w; i &lt;= m; ++i) {
        scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);
        ct(u, v, w);
        ct(v, u, w);
    }
    m == n ? type1() : type2();
    for(register int i = 1; i &lt;= n; ++i) {
        ans += (up[i] * fa[i] + down[i] * son[i]) / (fa[i] + son[i]);
        //统计每个点作为起点权值
    }
    ans /= n;
    //乘上概率
    printf(&quot;%.5lf\n&quot;, ans);
    return 0;
}
/*
4 4
1 2 3
2 3 1
3 4 4
4 1 2
*/

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P3823 [NOI2017]蚯蚓排队]]></title>
        <id>https://xiaxiaoguang.github.io/post/p3823-noi2017qiu-yin-pai-dui/</id>
        <link href="https://xiaxiaoguang.github.io/post/p3823-noi2017qiu-yin-pai-dui/">
        </link>
        <updated>2020-03-21T12:47:56.000Z</updated>
        <content type="html"><![CDATA[<p>NOI2017D1T2</p>
<p>其实就是个复杂(<s>简单的</s>)暴力啊,不需要任何高级技巧</p>
<p>可能手写hash表算一个?</p>
<p>1.把两个字符串合并</p>
<p>2.把两个字符串分裂</p>
<p>3.询问一个模式串S长度为k的所有子串在所有文本串出现次数之积</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mrow><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><mo>&lt;</mo><mo>=</mo><mn>1</mn><mi>e</mi><mn>7</mn><mo separator="true">,</mo><mi>k</mi><mo>&lt;</mo><mo>=</mo><mn>50</mn></mrow><annotation encoding="application/x-tex">\sum{|S|}&lt;=1e7,k&lt;=50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span></span></span></span></p>
<p>这个题主要的思想其实就是围绕着这个询问来考虑修改</p>
<p>因为这个k你不觉得很突兀吗?只有50?</p>
<p>那我们是不是可以把文本串中所有小于等于k的子串压成一个hash值存在hash表中呢?</p>
<p>这样查询总复杂度就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mrow><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow></mrow><annotation encoding="application/x-tex">\sum{|S|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span></span>的了!</p>
<p>我们只需要考虑小于等于k的子串压在一起,所以合并就相当于枚举新产生k^2个子串暴力加入hash表,删除就相当于暴力删了...这好像就完了</p>
<p>具体hash表写法看代码</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#define ll long long
//using namespace std;
#define ULL unsigned long long
using namespace std;
namespace fastIO {

	inline int read() {
		int x=0,f=1;
		register char s=getchar();
		for(; !isdigit(s); s=getchar())if(s=='-')f=-1;
		for(; isdigit(s); s=getchar())x=(x&lt;&lt;1)+(x&lt;&lt;3)+s-'0';
		return x*f;
	}
}
using namespace fastIO;
const int MAXN=6e5+7;
const int MAX_K=52;
const int P1=1145145;
const int P=998244353;
int n,m,q,a[MAXN],pre[MAXN],nxt[MAXN],cnt[MAXN],f[MAX_K*2+10];
ULL g[MAX_K*2+16],bin[MAX_K*2];
const int MOD=(1&lt;&lt;24)-1;

struct OPO {
	struct edge {
		ULL x;
		int cnt,nxt;
	} e[21000000];

	int home[MOD+1],cnt_e;

	void add(ULL x,int d) {
		int u=(x&amp;MOD);
		for(int i=home[u]; i; i=e[i].nxt) {
			if(e[i].x==x) {//把具体hash值比一下,如果这都相同你命没了
				e[i].cnt+=d;
				return ;
			}
		}
		e[++cnt_e]=(edge) {
			x,d,home[u]
		};
		home[u]=cnt_e;
	}

	int query(ULL x) {
		int u=(x&amp;MOD);
		for(int i=home[u]; i; i=e[i].nxt) {
			if(e[i].x==x)return e[i].cnt;
		}
		return 0;
	}
} _;

void merge() {
	int x=read(),y=read();
	memset(f,0,sizeof(f));
	int L=MAX_K,R=L-1;
	for(int i=x; i&amp;&amp;L&gt;1; i=pre[i]) {
		f[--L]=a[i];
	}
//左端点
	for(int i=y; i&amp;&amp;R+1&lt;MAX_K*2; i=nxt[i]) {
		f[++R]=a[i];
	}
//右端点
	for(int i=1; i&lt;=R; ++i)g[i]=g[i-1]*P1+f[i];
//这个是处理新长为2*k的序列hash
	for(int i=L; i&lt;MAX_K; ++i)
		for(int j=MAX_K; j&lt;=min(R,i+49); ++j) {
			_.add((g[j]-g[i-1]*bin[j-i+1]),1);
			//k^2暴力
		}
	nxt[x]=y;
	pre[y]=x;
}

inline void split() {
	int x=read(),y=nxt[x];
	memset(f,0,sizeof(f));
	int L=MAX_K,R=L-1;
	for(int i=x; i&amp;&amp;L&gt;1; i=pre[i])
		f[--L]=a[i];
	for(int i=y; i&amp;&amp;R+1&lt;MAX_K*2; i=nxt[i])
		f[++R]=a[i];
	for(int i=1; i&lt;=R; ++i)g[i]=g[i-1]*P1+f[i];
	for(int i=L; i&lt;MAX_K; ++i)
		for(int j=MAX_K; j&lt;=min(R,i+49); ++j) {
			_.add(g[j]-g[i-1]*bin[j-i+1],-1);//move
		}
	nxt[x]=pre[y]=0;//重新成为队尾或队头
}
char s[11000000];
int query() {
	scanf(&quot;%s&quot;,s+1);
	int k=read(),n=strlen(s+1);
	ll ans=1;
	ULL val=0;
	if(k==1)for(int i=1; i&lt;=n; ++i)ans=(1ll*ans*cnt[s[i]])%P;
	else for(int i=1; i&lt;=n; ++i) {
			val=val*P1+s[i];
			if(i&gt;k)val-=bin[k]*s[i-k];
			if(i&gt;=k)ans=1ll*ans*_.query(val)%P;
		}
	return ans;
}

int main() {
	int n=read(),q=read();
	bin[0]=1;
	for(int i=1; i&lt;MAX_K; ++i)bin[i]=bin[i-1]*P1;
	for(int i=1; i&lt;=n; ++i)cnt[a[i]=read()+'0']++;
	while(q--) {
		//	printf(&quot;%d?\n&quot;,q);
		int opt=read();
		if(opt==1)merge();
		else if(opt==2)split();
		else printf(&quot;%d\n&quot;,query());
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P3826 [NOI2017]蔬菜]]></title>
        <id>https://xiaxiaoguang.github.io/post/p3826-noi2017shu-cai/</id>
        <link href="https://xiaxiaoguang.github.io/post/p3826-noi2017shu-cai/">
        </link>
        <updated>2020-03-20T10:41:47.000Z</updated>
        <content type="html"><![CDATA[<p>NOI2017D2T2</p>
<p>说实话,D2T2就这种程度吗?甚至不能称为黑题吧233</p>
<p>开题不难发现我们再每天要准确做出一个决策才行,要不然这个数据范围根本动态规划不了的</p>
<p><code>按照某种规律直接决策</code>不就是贪心吗?</p>
<p>而且这个也很像之前做的CF集训队作业题那个题就是每天竹子会上涨,可以通过时光倒流变成竹子要下跌,为题就完全变样子了</p>
<p>所以这个题也可以用时光倒流的做法,变成倒着运菜进来,那么显然我们每次选择最优的就行了,难度在于模拟啊</p>
<p>这里提供一种不一样的做法:我们把时光倒流的本质思考出来,单独分析每个菜</p>
<ol>
<li>每个菜都是在他<code>最贵的</code>时候被选择卖,也就是对应<code>每次选最优的</code></li>
<li>每个菜都是在他<code>快要腐烂</code>的时候被卖,也就是对应<code>倒着运菜</code></li>
</ol>
<p>有了这两个性质,我们只需要得到一个卖菜序列,然后在卖菜序列上通过并查集操作就行了</p>
<p>具体看code:</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define mkp(x,y) (make_pair(x,y))
#define ll long long
const int MAXN=1e6+7,mx=1e5+7;
int n,m,k;
int a[MAXN],s[MAXN],c[MAXN],x[MAXN];
int fa[MAXN],num[MAXN];
ll ans[MAXN];
priority_queue&lt;pair&lt;int,int&gt; &gt; q;
inline int getf(int x) {
	return x==fa[x]?x:fa[x]=getf(fa[x]);
}

int main() {
	scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);
	for(int i=1; i&lt;=n; ++i) {
		scanf(&quot;%d%d%d%d&quot;,&amp;a[i],&amp;s[i],&amp;c[i],&amp;x[i]);
		q.push(mkp(a[i]+s[i],i));
	}
	for(int i=1; i&lt;=mx; ++i)fa[i]=i,num[i]=m;
	int cnt=0,profit,t,day;
	while(!q.empty()) {
		profit= q.top().first,t=q.top().second;
		q.pop();
		if(!x[t])day=getf(mx);
		else day=getf(min(mx,(c[t]-1)/x[t]+1));
        //找到要T的时间
		if(!day)continue;
		c[t]--;
		num[day]--;
		cnt++;
        //处理每天能卖的上限
		if(!num[day])fa[day]=getf(day-1);
		if(c[t])q.push(mkp(a[t],t));
		ans[cnt]=ans[cnt-1]+profit;
        //卖菜序列
	}
	int qaq;
	while(k--)scanf(&quot;%d&quot;,&amp;qaq),printf(&quot;%lld\n&quot;,ans[min(cnt,m*qaq)]);
	return 0;
}


</code></pre>
]]></content>
    </entry>
</feed>