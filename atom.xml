<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiaxiaoguang.github.io</id>
    <title>夏晓光(loveJY)的博客</title>
    <updated>2020-04-09T02:27:59.336Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiaxiaoguang.github.io"/>
    <link rel="self" href="https://xiaxiaoguang.github.io/atom.xml"/>
    <subtitle>仍要向下扎根,向上结果</subtitle>
    <logo>https://xiaxiaoguang.github.io/images/avatar.png</logo>
    <icon>https://xiaxiaoguang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夏晓光(loveJY)的博客</rights>
    <entry>
        <title type="html"><![CDATA[P5473 [NOI2019]I 君的探险]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5473-noi2019i-jun-de-tan-xian/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5473-noi2019i-jun-de-tan-xian/">
        </link>
        <updated>2020-04-07T14:58:59.000Z</updated>
        <content type="html"><![CDATA[<p>NOI2019D2T3</p>
<p>交互题,<s>你谷第一篇题解?</s></p>
<p>首先解释交互题是什么,通俗一点,就是** 出题人把答案放在了输入数据里面! **但是你不能知道实际的全部输入信息,你只能根据他给出的几个信息和调用提前实现好的函数猜出这个输入数据</p>
<p><s>这个解释可能不太对,但对这个题是有用的</s></p>
<figure data-type="image" tabindex="1"><img src="https://xiaxiaoguang.github.io/post-images/1586271869766.png" alt="" loading="lazy"></figure>
<p>交互题不能没有这个啊</p>
<h2 id="部分分1">部分分1</h2>
<figure data-type="image" tabindex="2"><img src="https://xiaxiaoguang.github.io/post-images/1586271907001.png" alt="" loading="lazy"></figure>
<p>照此过程模拟即可,只要你能成功实现交互!</p>
<p>4pts</p>
<h2 id="部分分2~5">部分分2~5</h2>
<p>只要有一点点暴力的想法,你会发现,如果我们想找一个点周围的边,那么只需要把这个点modify一次,然后把所有点全部query一遍,其中是亮的我们就record他们之间的一条边,再把这个点modify回去就好</p>
<p>然而直接这样是不行的,我们只需要稍稍优化下暴力,查询只查询和亮暗情况之前有变化的点,就可以省去最后改回来的一次,然后每次只query所有编号大于当前点的点,就可以让总查询数变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n^2/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span>,过掉第5个点</p>
<p>16pts</p>
<h2 id="部分分-6~9">部分分 6~9</h2>
<p>满足图由许多两个点的块组成,也就是我们要确定每个点是另外哪个点连着的</p>
<p>这部分也不难想,因为我们仔细观察数据范围可以得出算法的消耗应该是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span></p>
<p>而logn的算法...而且是交互题....比较泛用的好像有<code>二进制</code>啊?</p>
<p>做法也就同样有了,我们按照点的编号第x位二进制是1/0把所有点分成两组,然后把所有是1的点提出来点亮,然后花费n的代价查一遍全局,我们得到一个亮暗集合...那么观察不难的出</p>
<blockquote>
<p>如果一个点和他的相连点这一位相同,那一定处于暗集合,这一位不同一定处于亮集合</p>
</blockquote>
<p>这样我们把所有位都做一遍,再处理一下每个点就能得到每个点对应的点了!</p>
<p>复杂度...全都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>16pts</p>
<h2 id="部分分10~11">部分分10~11</h2>
<p><s>这一部分是最为关键的??</s></p>
<p>满足编号大的只向编号小的连一条边</p>
<p>乍一想和之前的做法好像没有任何关系....除了复杂度....</p>
<p>所以我们还是要想一个log做法?好像还有二分也是log的</p>
<p>那这个题我们对于一个点可以找到他二分范围和性质吗?</p>
<p>很容易发现:<strong>二分范围就是这个点编号到1,性质就是点亮一个前缀看他亮不亮,在某个位置之后一定全都亮</strong></p>
<p>有这个性质我们就可以对于单个点二分了....而我们有n个点?整体二分就好啦</p>
<p>代价还是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>8pts</p>
<h2 id="部分分12~14">部分分12~14</h2>
<p>满足图是一条链</p>
<p>这一部分可能比较需要灵机一动?qwq</p>
<p>因为做法很简单....每个点只会受到两个点的影响...如果我们先花掉O(n)的时间找到一个<code>初始点</code>,然后从初始点向两侧扩展...好像就满足每个点只受到一个点的影响了!因为另一个点已知,完全可以计算出那个点的影响</p>
<p>只受到一个点的影响?回到第三档部分分</p>
<p>12pts</p>
<h2 id="部分分15~17">部分分15~17</h2>
<p><s>被迫营业树的部分QAQ</s></p>
<p>之前一部分已经提示我们可以通过一次次扩展点来消掉周围点异或值是一些点的异或和的做法...</p>
<p>那么树,他没有环,我们应该也是可以通过以这个扩展消掉异或和的</p>
<ul>
<li>我们只需要求出每个点u周围点的编号的异或和,然后如果修改这个和表示的点导致u发生改变那么他们之间就有一条边</li>
</ul>
<p>为啥正确呢?首先你会发现叶子这个性质一定成立</p>
<p>而非叶子我们只需要把叶子从这个树上<code>剥离</code>,也就是消掉他的影响,也总有一天会变成叶子就成立了</p>
<p>12pts</p>
<p>至此所有非正解做法都讲完了,其实这道<strong>NOID2T3</strong>的题对于真正NOI选手68pts都不难呢</p>
<h2 id="正解">正解</h2>
<p>你会发现我们现在都还没有用过这个check,所以正解一定很坑</p>
<p>没错,正解需要一点随机化/xyx</p>
<p>同时,我们可能还需要一个复杂度带log的做法...如果我们把之前的两个做法融合一下,我们可以想到能不能<strong>划分出一个集合,然后在集合里整体二分呢?</strong></p>
<p>这看上去完全是硬凑,但是想一下和之前的区别,之前是知道一定只有一条边在前面,所以我们一定能满足单调性</p>
<p>但如果我们限制一下二分的过程,然后把奇偶性作为判断的标准呢?你会发现我们一定可以对于前面是奇数条边的点连出边,而前面是偶数的由于整体二分可能判断不了有没有边,因为点亮前缀后他状态没变</p>
<p>所以我们直接按照这个方法去做,就可以连好某个排列里面满足前面边是奇数的那些边</p>
<figure data-type="image" tabindex="3"><img src="https://xiaxiaoguang.github.io/post-images/1586398957313.png" alt="" loading="lazy"></figure>
<p>但是显然连得不够啊....所以我们只需要random_shuffle一个新的排列,然后再在这个排列上做这个事情,就又能够连出去一些边了!</p>
<p>其中check可以用来减少运算量的,如果一个点的周围的边都被标记了下次整体二分就不要把这个点加进去了</p>
<p>然后你肯定要问这样怎么保证复杂度啊</p>
<p>题解有一个结论:rand的一个排列里面有差不多<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">n/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span></span></span></span>个点向前连边是奇数个</p>
<p>不会证,但这道题做完了,完结散花!!</p>
<p><a href="https://loj.ac/submission/783398">你谷交不了呢QAQ</a></p>
<p><s>写的还不错吧留个赞再走呗</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AT2383 [AGC015E] Mr.Aoki Incubator]]></title>
        <id>https://xiaxiaoguang.github.io/post/at2383-agc015e-mraoki-incubator/</id>
        <link href="https://xiaxiaoguang.github.io/post/at2383-agc015e-mraoki-incubator/">
        </link>
        <updated>2020-04-07T07:57:36.000Z</updated>
        <content type="html"><![CDATA[<p>UOJ推荐题</p>
<p>OrzEI</p>
<p>题目大意</p>
<p>数轴上有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>个点，每个点初始时在位置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的速度向数轴正方向前进</p>
<p>初始时刻，你可以选择一些点为其染色，之后的行走过程中，染色的点会将其碰到的所有点都染上色，之后被染上色的点亦是如此</p>
<p>在所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>种初始染色方案中，问有多少种初始染色方案，能使得最终所有的点都被染色？答案对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">10^9+7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>取模</p>
<p>首先不难发现到世界末日的时候所有点一定是按照v排布的,而且不会再相交</p>
<p>那么我们把按照v排序的相对顺序和一开始x的相对顺序对于一个点拉成一条线段</p>
<p>问题就变成了选择一些的线段让他们覆盖整个数轴的总方案数</p>
<p>这个东西显然可以dp,先按照右端点排一下序啊,我们每个线段右端点就递增了</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示前i条线段第i条线段强制选,覆盖了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,r[i]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>这个范围的总方案数</p>
<p>转移的时候枚举之前的一个l,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>∈</mo><mo>[</mo><mi>l</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo separator="true">,</mo><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">l \in [l[i],r[i]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>,,然后就可以</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi></mrow><mi>i</mi></munderover><mo>[</mo><mi>r</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>&lt;</mo><mo>=</mo><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>]</mo><mrow><mi>f</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow></mrow><annotation encoding="application/x-tex">f[i]=\sum_{j=pre}^{i}[r[j]&lt;=r[i]]{f[j]}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></span></span></p>
<p>因为重复不重复这个不重要我们只需要满足全覆盖就好了</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
#define ll long long
typedef pair&lt;int, int&gt; par;

struct {
	inline operator int() {
		int x;
		return scanf(&quot;%lld&quot;, &amp;x), x;
	}
	inline operator ll() {
		ll x;
		return scanf(&quot;%lld&quot;, &amp;x), x;
	}
	template&lt;class T&gt; inline void operator ()(T &amp;x) {
		x = *this;
	}
	template&lt;class T, class ...A &gt;inline void operator () (T &amp;x, A &amp;...a) {
		x = *this;
		this-&gt;operator ()(a...);
	}
} read;

const int MAXN = 2e5 + 5, P = 1e9 + 7;
int l[MAXN], r[MAXN];
int p[MAXN];
int tmp[MAXN];
par pr[MAXN];
ll f[MAXN], s[MAXN];

int main() {
	int n = read;
	for(int i = 1; i &lt;= n; ++i) {
		read(pr[i].second, pr[i].first);
		//注意先按照v排序
	}
	std::sort(pr + 1, pr + n + 1);
	for(int i = 1; i &lt;= n; ++i) {
		tmp[i] = pr[i].second;
		//离散化部分
	}
	std::sort(tmp + 1, tmp + n + 1);
	//x数组
	for(int i = 1; i &lt;= n; ++i) {
		pr[i].second = int(std::lower_bound(tmp + 1, tmp + n + 1, pr[i].second) - tmp);
		//离散化
		p[pr[i].second] = i;
		//p数组记录了新位置
	}
	for(int i = 1; i &lt;= n; ++i) {
		r[i] = std::max(r[i - 1], p[i]);
		//这里是求出每段实际区间的右端点是哪个值
	}
	l[n] = p[n];
	for(int i = n - 1; i; --i) {
		l[i] = std::min(l[i + 1], p[i]);
		//同理左端点
	}
	int L = 0;
	f[0] = s[0] = 1;
	for(int i = 1; i &lt;= n; ++i) {
		while(r[L] &lt; l[i] - 1) {
			++L;
			//这句话其实限制了转移方程里面的[]
			//满足区间和是其中任何一个元素都合法
		}
		f[i] = (s[i - 1] - s[L - 1] + P) % P;
		s[i] = (s[i - 1] + f[i]) % P;
	}
	while(r[L] &lt; n) {
		++L;
	}
	printf(&quot;%lld\n&quot;, (s[n] - s[L - 1] + P) % P);
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5361 [SDOI2019]热闹的聚会与尴尬的聚会]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5361-sdoi2019re-nao-de-ju-hui-yu-gan-ga-de-ju-hui/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5361-sdoi2019re-nao-de-ju-hui-yu-gan-ga-de-ju-hui/">
        </link>
        <updated>2020-04-06T08:36:32.000Z</updated>
        <content type="html"><![CDATA[<p>SDOI2019D2T1..吗?</p>
<p>唔母,他D几T几不重要,重要的是咕咕咕咕咕咕</p>
<p>这当然是假的了,我怎么可能咕,强力推荐&lt;&lt;这就是僵尸啊&gt;&gt;两季</p>
<p>他的联系薄上有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位好友，他们两两之间或者互相认识，或者互相不认识。小 Q 希望在周六办一个热闹的聚会，再在周日办一个尴尬的聚会。</p>
<ul>
<li>一场热闹度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的聚会请来了任意多位好友，对于每一位到场的好友来说都有至少 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 位他认识的好友也参加了聚会，且至少对于一位到场的好友来说现场恰好有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 位他认识的好友；</li>
<li>一场尴尬度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 的聚会请来了恰好 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 位好友，且他们两两互不认识。</li>
</ul>
<p>两场聚会可能有重复的参与者，联系薄上也有可能有某些好友同时缺席了两场聚会。</p>
<p>小 Q 喜欢周六聚会的热闹度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 与周日聚会的尴尬度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 之间满足：$\left\lfloor \frac{n}{p+1} \right\rfloor! \le $ 且 $\left\lfloor \frac{n}{q+1} \right\rfloor! \le $</p>
<p>请帮助小 Q 找出一个可行的邀请方案。</p>
<p>这个题意其实并不需要简化,因为很容易读懂</p>
<p>首先,看到这个尴尬的聚会,一眼就知道是求一个独立集,这好像是NPC问题啊,看看有没有什么丢掉的条件?</p>
<p>好像只有一个人数的限制QAQ,最大独立集肯定求不了,所以我们要尽可能的求个小的独立集,由于人数的限制可以变成乘起来大于n,所以我们第一问的p要尽可能的大</p>
<p>首先我们按照相识关系建立一个图,那么第一问就是要保留一个最小度数至少为p的子图,显然最后一个限制没啥意义,因为既然最小度数都有了.....</p>
<p>这个显然可以二分一个最小度数,然后把原图中度数小于最小的度数的点删除,再看剩下的点最小的度数是否大于p.不大于就是继续删</p>
<p>最后要么存在一些点,要么删光,就对应成立不成立...</p>
<p>还有一个是链表的做法,你会发现我们最后的答案图一定满足所有点的最小度数作为答案对吧,如果我们想要答案变大首先要把那些最小度数的点全部删掉,然后再对应的减一下相邻点的度数,得到新的答案,重复这个过程直到没有点,那么过程中所有答案得到最大值就是答案了</p>
<p>正确性显然吧</p>
<p>有了操作1的p,操作2最小q直接枚举得到,然后我们随机一个序列,按这个序列的顺序去保存独立集,这样一个玄学随机算法就可以过掉此题,毕竟他出的题复杂度和数据范围不严格一致,所以我们也概率正确</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
#include&lt;ctime&gt;
#define add(x,y) (ct(x,y),ct(y,x))
using namespace std;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = BUF_SIZE + buf, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;
const int MAXN = 3e5;
int T, n, m;
int to[MAXN], nxt[MAXN], home[MAXN], tot, ccnt, deg[MAXN], cnt[MAXN], ansp, ansq;
int ans1[MAXN], ans2[MAXN], ans3[MAXN];
inline void ct(int x, int y) {
	//printf(&quot;%d %d\n&quot;, x, y);
	++deg[x];
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}
int Q[MAXN], ql, qr;
inline int check(int v) {
	int siz = n, i, x, y, p;
	ql = 1, qr = 0;
	for(i = 1; i &lt;= n; ++i) {
		if(deg[i] &lt; v)ans3[i] = 0, Q[++qr] = i, --siz;
		else ans3[i] = 1;

	}
	while(ql &lt;= qr &amp;&amp; siz &gt; v) {
		x = Q[ql], ++ql;
		//printf(&quot;%dQWE\n&quot;, x);
		for(p = home[x]; p; p = nxt[p]) {
			if(ans3[y = to[p]]) {
				--deg[y];
				if(deg[y] &lt; v) {
					ans3[y] = 0;
					Q[++qr] = y;
					--siz;
				}
			}
		}
	}
	memcpy(deg, cnt, (n + 2) *sizeof(int));
	if(siz &gt; v) {
		memcpy(ans1, ans3, (n + 2) *sizeof(int));
		return 1;
	}
	return 0;
}
int id[MAXN], vis[MAXN];
int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	srand(time(NULL));
	int i, j, x, y, tot, p;
	T = read();
	while(T -- &gt; 0) {
		n = read();
		m = read();
		ccnt = 0;
		memset(home, 0, (n + 2) *sizeof(int));
		memset(deg, 0, (n + 2) *sizeof(int));
		//任何时间复杂度都不能放过
		while(m-- &gt; 0)x = read(), y = read(), add(x, y);
		memcpy(cnt, deg, (n + 2) *sizeof(int));
		//for(int i = 1; i &lt;= n; ++i) {
		//	printf(&quot;%d\n&quot;, deg[i]);
		//}
		int l = 1, r = n - 1, mid;
		ansp = 0;
		while(l &lt;= r) {
			mid = (l + r) &gt;&gt; 1;
			if(check(mid)) {
				ansp = mid;
				l = mid + 1;
			} else {
				r = mid - 1;
			}
		}
		tot = 0;
		for(i = 1; i &lt;= n; ++i) {
			if(ans1[i])
				++tot;
			//printf(&quot;%d %d?\n&quot;, i, ans1[i]);
		}
		printf(&quot;%d &quot;, tot);
		for(i = 1; i &lt;= n; ++i)
			if(ans1[i])
				printf(&quot;%d &quot;, i);
		puts(&quot;&quot;);
		//printf(&quot;%d\n&quot;, ansq);
		for(i = 1; i &lt;= n; ++i) {
			if(n / (ansp + 1) &lt;= i &amp;&amp; n / (i + 1) &lt;= ansp) {
				ansq = i;
				break;
			}
		}
		if(ansq == 1) {
			printf(&quot;1 1\n&quot;);
			continue;
		}
		if(ansq == n) {
			printf(&quot;%d &quot;, n);
			for(i = 1; i &lt;= n; ++i)printf(&quot;%d &quot;, i);
			puts(&quot;&quot;);
		} else {
			for(i = 1; i &lt;= n; ++i)id[i] = i;
			while(1) {
				tot = 0;
				random_shuffle(id + 1, id + n + 1);
				memset(vis, 0, (n + 2) *sizeof(int));
				memset(ans2, 0, (n + 2) *sizeof(int));
				for(i = 1; i &lt;= n &amp;&amp; tot &lt; ansq; ++i) {
					if(!vis[x = id[i]]) {
						ans2[x] = 1;
						++tot;
						for(p = home[x]; p; p = nxt[p])vis[to[p]] = 1;
					}
				}
				if(tot == ansq) {
					printf(&quot;%d &quot;, tot);
					for(i = 1; i &lt;= n; ++i)if(ans2[i])printf(&quot;%d &quot;, i);
					puts(&quot;&quot;);
					break;
				}
			}
		}
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5362 [SDOI2019]连续子序列]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5362-sdoi2019lian-xu-zi-xu-lie/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5362-sdoi2019lian-xu-zi-xu-lie/">
        </link>
        <updated>2020-04-05T23:45:00.000Z</updated>
        <content type="html"><![CDATA[<p>SDOI2019D2T3</p>
<p>唔母,这道题确实是不错的找规律+思维题,导致考场上没有人发现了规律然后就无人AC了</p>
<p>一般来讲,SD能进国家集训队的几位总有人能AC掉D2T3,不过他就是毒瘤,所以就无人过掉QAQ</p>
<p>我不想被人称为眼高手低,因为那只是我的努力你看不见2333</p>
<ul>
<li>题目大意：有一个01串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">tm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span></span></span></span>，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>m</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">tm(0)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;&amp;&#039; at position 18: …(i)=tm(i&gt;&gt;1)^(i&amp;̲1)'>tm(i)=tm(i&gt;&gt;1)^(i&amp;1)</span>。给定01串s和整数k，问有多少个本质不同的01串t满足：t是tm的子串，s是t的前缀，t的长度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>s</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">|s|+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。</li>
</ul>
<p>这样的题我们首先要寻找TM序列的性质,否则我们没法做,因为TM序列长度是无限长的同时没有循环节,理论上可能任何一个0/1串都会出现在其中</p>
<p>于是证明定理一:任何一个长度大于2的连续的0/1不会出现在TM序列里面</p>
<p>打表可得显然成立,然而正规证法是啥啊?</p>
<p>我们要用到一个trick,就是如果我们没法构造母串直接匹配,那么我们可以考虑按某种规律缩减子串来使得长度变短从而计算出方案</p>
<p>TM序列的规律?包括翻转后接在后面好像都没法实现缩短.我们需要** 元素 **之间的扩张关系</p>
<p>定理二:TM序列的扩展可以看做** 0后放1,1后放0 **进行展开</p>
<p>这个也是打表可知正确,然后用定理二就可以反推定理一正确了</p>
<p>好像走上了正道,我们再看看方案数怎么计数</p>
<p>你发现了我们好像可以通过这个方法不断减少|S|,以及后面的k,从而达到一个很短的境地满足不能再缩了就是一种方案了</p>
<p>这好像有点动态规划啊?f(S,k),S是原串,k是后面还要接k,的总方案数,我们来考虑状态转移</p>
<ol>
<li>
<p>实际的状态数不多,我们要记搜</p>
</li>
<li>
<p>考虑什么时候S不能再缩了,分...|S|+k&lt;=3吧...</p>
</li>
</ol>
<h3 id="case-1s1">case 1:|S|=1</h3>
<ol>
<li>k=0</li>
<li>k=1 2种</li>
<li>k=2 3种,除去一个连续的000/111</li>
</ol>
<h3 id="case2s2">case2:|S|=2</h3>
<ol>
<li>k=0</li>
<li>k=1,如果前面两个相等只有1种,否则两种</li>
</ol>
<h3 id="case3s3">case3:|S|=3</h3>
<ol>
<li>k=0 如果三个相同就0种</li>
</ol>
<p>然后在考虑每种压缩方式</p>
<h3 id="case1-s10">case1 |S|&amp;1==0</h3>
<p>我们考虑要么从第一个开始每个都分成两组,要么我们保留第一个和最后一个然后分成两组</p>
<h3 id="case2-s11">case2 |S|&amp;1==1</h3>
<p>要么保留第一个位置然后把剩下的分成两组,要么保留最后一个位置把剩下的分成两组</p>
<p>如果分到有一组是11/00就挂掉了不行</p>
<p>然后必要性显然,充分性....我们想,由于整个序列中不会出现连续三个1或0,所以可以认为我们错位一个分组一定能分到合法方案</p>
<p>这一部k的变化也很显然对吧,所以这样搞下去就做完了</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;map&gt;
using namespace std;
#define fi first
#define se second
#define mp make_pair
const int P = 1e9 + 9;
#define ll long long
int t;
string s;
long long k;
#define par pair&lt;string,ll&gt;
map&lt;par, ll&gt; mm;

inline ll wk(par p) {
	//puts(&quot;???&quot;);
	if(p.fi.size() == 1) {
		if(!p.se)return 1;
		if(p.se == 1)return 2;
		if(p.se == 2)return 3;
		//s的大小为1
	}
	if(p.fi.size() == 2) {
		if(!p.se)return 1;
		if(p.se == 1)return (p.fi[0] == p.fi[1] ? 1 : 2);
	}
	if(p.fi.size() == 3 &amp;&amp; !p.se)return (p.fi[0] == p.fi[1] &amp;&amp; p.fi[1] == p.fi[2] ? 0 : 1);
	//	puts(&quot;???&quot;);
	if(mm.find(p) != mm.end())return mm[p];
	ll as = 0;
	//printf(&quot;%d %lld\n&quot;, p.fi.size(), p.se);
	int i;
	bool fg = 1;
	string nxt;
	nxt.clear();
	for(i = 0; i &lt; p.fi.size(); i += 2) {
		if(i == p.fi.size() - 1)nxt += p.fi[i];
		else if(p.fi[i] == p.fi[i + 1]) {
			fg = 0;
			break;
		} else nxt += p.fi[i];
	}
	if(fg)as += wk(mp(nxt, (p.fi.size() % 2 ? (p.se &gt;&gt; 1) : (p.se + 1 &gt;&gt; 1))));
	fg = 1;
	nxt.clear();
	nxt += (p.fi[0] ^ 1);
	for(i = 1; i &lt; p.fi.size(); i += 2) {
		if(i == p.fi.size() - 1)nxt += p.fi[i];
		else if(p.fi[i] == p.fi[i + 1]) {
			fg = 0;
			break;
		} else nxt += p.fi[i];
	}
	if(fg)as += wk(mp(nxt, (p.fi.size() % 2 ? (p.se + 1 &gt;&gt; 1) : (p.se &gt;&gt; 1))));
	return mm[p] = as;
}


int main() {
	scanf(&quot;%d&quot;, &amp;t);
	while(t--) {
		std::cin &gt;&gt; s &gt;&gt; k;
		printf(&quot;%lld\n&quot;, wk(mp(s, k)) % P);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF571D Campus]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf571d-campus/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf571d-campus/">
        </link>
        <updated>2020-04-04T13:49:57.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>唔母,这个算是比较简单的一道题了,我也是能找到跟着自己的思路做的解法qwq</p>
<p>龙王桔梗赛高!<img src="https://xiaxiaoguang.github.io/post-images/1586008392070.jpg" alt="" loading="lazy"></p>
<ul>
<li>有一个长度为 nnn 的序列，初始全为 000。</li>
<li>有两类对下标的集合，初始时每一类各有 nnn 个集合，编号为 iii 的集合里有下标 iii。</li>
<li>一共有 mmm 个操作，操作有五种：<br>
U x y 将第一类编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的集合合并到编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的集合里。<br>
M x y 将第二类编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的集合合并到编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的集合里。<br>
A x 将第一类编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的集合中的所有下标在序列中对应的数加上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的集合大小。<br>
Z x 将第二类编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的集合中的所有下标在序列中对应的数设为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。<br>
Q x 询问序列中下标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的位置上的数。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,m \le 5 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>看到集合合并而且没有拆分,自然而然想到启发式合并</p>
<p>又因为我们是单点查询而且是合并下标,所以不需要高级数据结构吧...就用并查集</p>
<p>然后我们想先考虑第一类集合怎么做</p>
<p>只需要在根上打一个标记,然后两级河合并的时候直接把要接到另一个根上的那个根标记减去另一个根上的标记就好,这样我们把一个点到根路径上经过所有点求个前缀和就一定是答案了</p>
<p>好的,现在我们要兼容赋值操作/kk</p>
<p>一个不难的想法是利用时间戳,我们每个赋值操作毕竟赋的值是一样的,所以我们可以在根上放时间戳,然后从节点到根的路径求一个最大时间就是我们这个点被赋值的最近时间啦</p>
<p>然而这个东西还是不能够兼容之前的加法标记,因为每个点的具体时间不一样.....</p>
<p>等等,我们是不是可以出卖复杂度更暴力的解决一下?或者我们忘记了并查集的什么性质吗?按秩合并???</p>
<h2 id="树高均摊log">树高均摊log!</h2>
<p>对了,有了这个操作也就意味我们第一个向上跳均摊log次,然后这nlogn次我们每次不用直接拿标记,而是把每次标记带着时间戳都记下来,然后直接在这些标记里面二分就好</p>
<p>时间复杂度很低,O(nlog^2n),二分虽然是满的但其他的不是啊</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
using namespace std;
#define ll long long
const int MAXN = 1e6 + 7;
int gs[MAXN], fs[MAXN], n, m;
int f[MAXN], g[MAXN], ft[MAXN], gt[MAXN];
char opt[5];

int find(int *f, int x) {
    while(x ^ f[x])x = f[x];
    return x;
}

inline void merge(int *f, int *siz, int *t, int x, int y, int k) {
    x = find(f, x);
    y = find(f, y);
    if(siz[x] &lt; siz[y])swap(x, y);
    siz[x] += siz[y];
    //好像是启发式/kk也只能启发式了
    f[y] = x;
    t[y] = k;
    //两棵树都是启发式合并的过程
}
int cls[MAXN];
vector&lt;pair&lt;int, ll&gt; &gt; add[MAXN];
#define MP make_pair

int main() {
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    for(int i = 1; i &lt;= n; ++i)fs[f[i] = g[i] = i] = gs[i] = 1, add[i].push_back(MP(-1, 0));
    for(int i = 1; i &lt;= m; ++i) {
        scanf(&quot;%s&quot;, opt);
        int x, y;
        scanf(&quot;%d&quot;, &amp;x);
        switch(opt[0]) {
        case 'U': scanf(&quot;%d&quot;, &amp;y), merge(f, fs, ft, x, y, i); break;
        case 'M': scanf(&quot;%d&quot;, &amp;y), merge(g, gs, gt, x, y, i); break;
        case 'A': {
            int k = find(f, x);
            add[k].push_back(MP(i, fs[k] + add[k].back().second));
            //这个我们在这个点上面,打下一个前缀和标记
            //然后第一维时间戳
            break;
        }
        case 'Z': {
            int k = find(g, x);
            cls[k] = i;
            break;
        }
        case 'Q': {
            int fx = x, tag = cls[x];
            while(g[fx] != fx) {
                if(cls[g[fx]] &gt; gt[fx])tag = max(tag, cls[g[fx]]);
                //取max,找到最大的那个时间戳
                fx = g[fx];
            }
            fx = x;
            int l = lower_bound(add[x].begin(), add[x].end(), MP(tag, 0ll)) - add[x].begin();
            ll ans = add[x].back().second - add[x][l - 1].second;
            //二分原来的点的标记
            while(f[fx] != fx) {
                int tf = f[fx];
                l = lower_bound(add[tf].begin(), add[tf].end(), MP(max(tag, ft[fx]), 0ll)) - add[tf].begin();
                ans += add[tf].back().second - add[tf][l - 1].second;
                fx = f[fx];
                //一路向上跳父亲并且累加标记
                //注意是前缀和哦
            }
            printf(&quot;%lld\n&quot;, ans);
        }
        }
    }
    return 0;
}
</code></pre>
<p>果然数据结构还是很好懂的?/kk</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF568C New Language]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf568c-new-language/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf568c-new-language/">
        </link>
        <updated>2020-04-04T09:37:08.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>集训队作业完成22/150祭</p>
<p>为什么祭?因为我认为比写我颓死了更好</p>
<p>这里写的没有<a href="https://www.luogu.com.cn/blog/xxg/cf568c-new-language">洛谷</a>上写的详细</p>
<ul>
<li>输入一个划分方案,将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">a</mtext><mo>∼</mo><mtext mathvariant="monospace">a</mtext><mo>+</mo><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\texttt{a} \sim \texttt{a} + l - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">a</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord text"><span class="mord texttt">a</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 个字符分成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">V,C</mtext></mrow><annotation encoding="application/x-tex">\texttt{V,C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.13889em;"></span><span class="mord text"><span class="mord texttt">V,C</span></span></span></span></span> 两个集合。</li>
<li>你需要构造一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 且满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个限制且不小于另一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 的最小字符串。</li>
<li>每一个限制为若字符串的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个位置上的字符 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\in t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​，则第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ 个位置上的字符 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\in t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​,其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_1,t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是集合V或者C</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>≤</mo><mn>26</mn></mrow><annotation encoding="application/x-tex">l \le 26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>200</mn></mrow><annotation encoding="application/x-tex">n \le 200</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>4</mn><mi>n</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">m \le 4n(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li>
</ul>
<p>做法:2-SAT</p>
<p>为什么呢?这个还是比较好看出来的,首先每个元素都属于一个集合,然后一共有两个集合,这个很二分图</p>
<p>但是给出的限制条件并没有那么简单是边的关系所以要2-SAT建图</p>
<p>建完2-SAT我们还要考虑字典序最小QAQ</p>
<p>然而2-SAT理论上线性啊?为啥n这么小?</p>
<p>显然我们只需要枚举一下放啥就好了/汗,然而枚举也不用枚举直接找大于他最小的就行</p>
<p>复杂度?O(nm),m是2-SAT,n是枚举,常数至少也是??要注意没有给出集合的字符不能用的!</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;map&gt;
using namespace std;

const int MAXN = 207, L = 33, MAXM = 3e5;
int n, m, k, a[L], b[L][2], vis[MAXN &lt;&lt; 1];
char s[MAXN];
int home[MAXM], nxt[MAXM], to[MAXM], ccnt;

inline void ct(int x, int y) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}

bool dfs(int x) {
	if(vis[x &gt; n ? x - n : x + n])return 0;
	//如果已经有环了的话
    //就是i+n为1,i为1
    //这个dfs只需要找有没有接
	vis[x] = 1;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(!vis[v] &amp;&amp; !dfs(v))return 0;
	}
	return 1;
}

inline bool pd(int C) {
	for(int i = 1; i &lt;= n &lt;&lt; 1; ++i)vis[i] = 0;
	for(int i = 1; i &lt;= C; ++i) {
		if(!dfs(i + a[s[i] - 'a' + 1]*n))return 0;
        //把每个点dfs一下,如果有1,说明这个分发不合理
	}
	for(int i = C + 1; i &lt;= n; ++i) {
		if(vis[i])s[i] = b[1][0] + 'a' - 1;
		else if(vis[i + n])s[i] = b[1][1] + 'a' - 1;
		else {
			int x = min(b[1][0], b[1][1]), y = max(b[1][0], b[1][1]);
			if(dfs(i + a[x]*n))s[i] = x + 'a' - 1;
			else if(dfs(i + a[y]*n))s[i] = y + 'a' - 1;
            //这个dfs....判断一下有没有能合法的分配?
			else return 0;
		}
	}
	return 1;
}


map&lt;char, int&gt; p;
int main() {
	scanf(&quot;%s&quot;, s + 1);
	k = strlen(s + 1);
	p['V'] = 0, p['C'] = 1;//真,假
	b[k + 1][0] = b[k + 1][1] = k + 1;
	for(int i = k, t[2] = {k + 1, k + 1}; i; i--) {
		t[a[i] = p[s[i]]] = i;
		b[i][0] = t[0];
		b[i][1] = t[1];
        //把每个字符变成他应该的样子
        //就是分到哪个集合
        //同时我们处理出了上一个另一个集合的字符的位置
	}
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1, x, y, s1, t1, s2, t2; i &lt;= m; ++i) {
		scanf(&quot;%d&quot;, &amp;x);
		scanf(&quot;%s&quot;, s + 1);
		y = strlen(s + 1);
		s1 = x + p[s[y]] * n;
		s2 = s1 &gt; n ? s1 - n : s1 + n;
		scanf(&quot;%d&quot;, &amp;x);
		scanf(&quot;%s&quot;, s + 1);
		y = strlen(s + 1 );
		t1 = x + p[s[y]] * n;
        //这里是建边,如果是s1就是选择分到集合1,否则是分到集合2
        //s1可推出t1,t2可推出s2

		t2 = t1 &gt; n ? t1 - n : t1 + n;
		ct(s1, t1);
		ct(t2, s2);

	}
	scanf(&quot;%s&quot;, s + 1);
	n = strlen(s + 1);
	//	printf(&quot;%s?\n&quot;, s + 1);
	if(pd(n))return printf(&quot;%s\n&quot;, s + 1), 0;
	else if(b[1][0] == k + 1 || b[1][1] == k + 1)return puts(&quot;-1&quot;), 0;
    //如果第一个字符他都没有对应集合
    //也就无解了
	for(int i = n; i; --i) {
		int c = s[i] - 'a' + 2, x = min(b[c][0], b[c][1]), y = max(b[c][0], b[c][1]);
        //b是上一个的!
		if(x != k + 1) {
			s[i] = x + 'a' - 1;
			if(pd(i))return printf(&quot;%s\n&quot;, s + 1), 0;
		}
		if(y != k + 1) {
			s[i] = y + 'a' - 1;
            //如果填上一个的话
			if(pd(i))return printf(&quot;%s\n&quot;, s + 1), 0;
		}
	}
	puts(&quot;-1&quot;);
	return 0;
}

</code></pre>
<p>不太会</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF566C Logistical Questions]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf566c-logistical-questions/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf566c-logistical-questions/">
        </link>
        <updated>2020-04-02T06:35:35.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>唉...我以后中午睡不上20min就石祥吧</p>
<p>真的非常好用,能得到50min高效率加成</p>
<ul>
<li>一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个节点的树，点有点权，边有边权。</li>
<li>两点间的距离定义为两点间边权和的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>3</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac 32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>​ 次方。</li>
<li>求这棵树的带权重心。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>考虑难在哪,因为我们不能直接枚举每个点算答案,而且要想得到一个点的答案必须暴力O(n)才行/惊恐</p>
<p>因为查询一个点做根他给出一个2/3次方我们啥数据结构都维护不了啊</p>
<p>所以我们考虑怎么实现一种检验次数最少的方法....?先发现了这个函数是凸函数</p>
<p>也就是说我们最优点只有一个,因为如果有多个,这个函数就不凸了啊,你可能会说是一条边两边的点都是最优的,这样我们可以认为这个边上有一个点是最优的啊,再加上题目中只要求输出一个方案,所以和之前是一样的</p>
<p>而且从这个点向左右移动答案一定会变大....也就是说我们从这个点向其他点走,导数....可以这么叫吧值会是正的</p>
<p>如果是一条链我们就二分了,现在我们是一棵树,就<strong>点分治</strong></p>
<p>现在我们要找的就是这样一个点,他满足走向周围的点导数都为正</p>
<p>也就是我们对于任何一个点,每次朝着导数为负的那个点走去就行,因为是树所以肯定只有一个这样的点</p>
<p>求一个点x到他一个儿子导数??</p>
<p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为x的一个儿子i子树内的导数值和</p>
<p>然后我们向i转移的导数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><msub><mi>p</mi><mi>j</mi></msub><mo>−</mo><mn>2</mn><mo>∗</mo><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum{p_j}-2*p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>找到这个小于0的即可</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;

using namespace std;

const int MAXN = 1e6 + 7;
int n, w[MAXN], s[MAXN], rt, vis[MAXN], ans1, ccnt;
int home[MAXN], to[MAXN], nxt[MAXN], len[MAXN];
double sum, sd, d[MAXN], ans2 = 1e20;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = 0;
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

inline void ct(int x, int y, int z) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	len[ccnt] = z;
}

void dfs(int x, int f, int S) {
	s[x] = 1;
	int o = 0;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(v == f || vis[v])continue;
		dfs(v, x, S);
		s[x] += s[v];
		o = max(o, s[v]);
	}
	o = max(o, S - s[x]);
	if(o &lt;= (S &gt;&gt; 1))rt = x;
}

inline void calc(int x, int f, int o, int z) {
	sum += pow(z, 1.5) * w[x], d[o] += pow(z, 0.5) * 1.5 * w[x];
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(v == f)continue;
		calc(v, x, o, z + len[i]);
	}
}

inline void dfs(int x, int S) {
	dfs(x, 0, S);
	x = rt;
	dfs(x, 0, S);
	if(vis[x])return ;
	vis[x] = 1;
	sum = sd = 0;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		d[v] = 0;
		calc(v, x, v, len[i]), sd += d[v];
	}
	if(sum &lt; ans2)ans1 = x, ans2 = sum;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(sd - d[v] * 2 &gt;= 0)continue;
		dfs(v, s[v]);
		break;
	}

}

int main() {
	//freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	n = read();
	for(int i = 1; i &lt;= n; ++i)w[i] = read();
	for(int i = 1, x, y, z; i &lt; n; ++i) {
		x = read();
		y = read();
		z = read();
		ct(x, y, z);
		ct(y, x, z);
	}
	dfs(1, n);
	printf(&quot;%d %.10f\n&quot;, ans1, ans2);
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF559E Gerald and Path]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf559e-gerald-and-path/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf559e-gerald-and-path/">
        </link>
        <updated>2020-04-01T08:11:25.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>小清新?这还是在跳过那倒计算几何题前提下....不过也很容易第一眼就误解</p>
<ul>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 条线段。</li>
<li>每条线段给定其中一端的位置及长度。</li>
<li>求所有线段覆盖的最大长度。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n \le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</li>
</ul>
<p>你直接离散化想统计答案是不行的,为什么不行?因为你没法决定每条线段是向左还是向右更优</p>
<p>所以要DP(</p>
<p>设f_{i,j}表示前i条线段,最右端覆盖到j的覆盖最长长度是什么,然后我们考虑i线段是向左延伸还是向右延伸...</p>
<h3 id="case-1-向右延伸">case 1 向右延伸</h3>
<p>这种情况不会和之前做的决策产生冲突,所以直接转移即可</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi></mrow></msub><mo>+</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>p</mi><mo separator="true">,</mo><mi>j</mi><mo>)</mo></mrow><mo separator="true">,</mo><mi>j</mi><mo>∈</mo><mo>[</mo><mi>p</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f_{i,j}=max{f_{i-1,p}+dist(p,j)},j \in [p,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></p>
<h3 id="case-2-向左延伸">case 2 向左延伸</h3>
<p>这种情况可能和之前决策产生重叠然后自闭掉....</p>
<p>所以因为可能这样存在一些线段使他们原本的右端点在更右边,因为我们第二维是只有考虑前i-1条线段的情况</p>
<p>我们直接枚举 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 并令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>∼</mo><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k\sim i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 这些线段都向右放。令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示右端点最右的位置。则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi></mrow></msub><mo>+</mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi></mrow><mo>(</mo><mi>l</mi><mo separator="true">,</mo><mi>R</mi><mo>)</mo><mo>}</mo></mrow><annotation encoding="application/x-tex">f_{i,j}=\max\{f_{k-1,l}+\mathrm{dist}(l,R)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">i</span><span class="mord mathrm">s</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></p>
<p>这样子转移就不会有冲突问题了,注意我们处理的前提是我们可以考虑一条线段的长度不固定,也就是说题目中给出的是最大长度,这样我们的状态才能够贴切实际情况</p>
<p>直接枚举的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 从大到小枚举，更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 的值。令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>[</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">g[R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 表示右端点为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 时的最大答案。</p>
<p>我们直接算出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>[</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">g[R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 后，还要对其做一遍后缀的处理。就是相当于取前缀计算贡献。具体可以见代码里的处理。</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;

using namespace std;
vector&lt;int&gt; vec;
const int MAXN = 215;
struct rec {
	int l, r, p;
	inline bool operator&lt;(const rec &amp;x) const {
		return p &lt; x.p;
	}
} d[MAXN];//线段

int n, f[MAXN][MAXN * 3], g[MAXN * 3];

inline int find(int &amp;x) {
	x = lower_bound(vec.begin(), vec.end(), x) - vec.begin();
}

int main() {
	scanf(&quot;%d&quot;, &amp;n);
	vec.push_back(-1e9);
	for(int i = 1; i &lt;= n; ++i) {
		int a, l;
		scanf(&quot;%d%d&quot;, &amp;a, &amp;l);
		d[i] = (rec) {
			a - l, a + l, a
		};
		vec.push_back(d[i].l);
		vec.push_back(d[i].r);
		vec.push_back(d[i].p);
	}
	sort(vec.begin(), vec.end());
	vec.erase(unique(vec.begin(), vec.end()), vec.end());
	for(int i = 1; i &lt;= n; ++i)find(d[i].l), find(d[i].r), find(d[i].p);
    //以上部分我们离散化
	int m = vec.size() - 1;
	sort(d + 1, d + n + 1);
	for(int i = 1; i &lt;= n; ++i) {
		memcpy(f[i], f[i - 1], sizeof * f);
        //这里要开始DP
		int L = d[i].l, R = d[i].r, p = d[i].p;
		memset(g, 0, sizeof(g));
		int nr = p;
		g[nr] = f[i - 1][L] + vec[nr] - vec[L];
        //这里先更新i向左覆盖的答案
		for(int j = i - 1; j; --j) {
            //把i-1到0所有线段考虑向右最多能覆盖到哪里
			nr = max(nr, d[j].r);
			g[nr] = max(g[nr], f[j - 1][L] + vec[nr] - vec[L]);
            //计算新的贡献,用上这条线段
		}
		for(int j = m; j &gt;= L; --j) {
			f[i][j] = max(f[i][j], g[j]);
            //更新新的答案,这条线段加进去可能会有所不同
			g[j - 1] = max(g[j - 1], g[j] - vec[j] + vec[j - 1]);
            //更新这个g数组,表示我们可以考虑把j点的答案去掉
		}
		for(int j = p; j &lt;= R; ++j)f[i][j] = max(f[i][j], f[i - 1][p] + vec[j] - vec[p]);
        //在考虑有多点就好
		for(int j = 1; j &lt;= m; ++j)f[i][j] = max(f[i][j], f[i][j - 1]);
	}
	printf(&quot;%d\n&quot;, f[n][m]);
	return 0;
}
</code></pre>
<p>咕咕咕</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF547E Mike and Friends]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf547e-mike-and-friends/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf547e-mike-and-friends/">
        </link>
        <updated>2020-04-01T01:25:08.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<figure data-type="image" tabindex="1"><img src="http://r.photo.store.qq.com/psc?/V13b3duC210Fox/4pNOqgOvBLvj4yTC9qc55d5Rb5zCL6GYefLJ8qYiplTaliv7R2LqiZmz*XoE8g.YTbM8OekMFYwnXtTNNRrczXczjg0.Raqs3bmoKAg6tyo!/r" alt="" loading="lazy"></figure>
<p><s>呐,你想要的的小暗</s></p>
<p>最近集训队作业加大难度了啊?</p>
<p>而且你谷愚人节随机名字颜色真不错</p>
<p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{1 \dots n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​。<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 次询问 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>k</mi></msub><mi>s</mi></mrow><annotation encoding="application/x-tex">s_ks</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">s</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mi>l</mi><mo>…</mo><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{l \dots r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="minner mtight">…</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ 中出现了多少次。<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mo>∑</mo><mi mathvariant="normal">∣</mi><mi>s</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n, \sum |s| \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">q \le 5 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>主要是考虑区间这一维限制怎么消掉</p>
<p>你发现我们完全可以用类似于莫队的扩展方式来消掉,也就是维护一个编号的数组</p>
<p>但是我们查询在建出SAM后就变成了对于一个子树里编号集合的查询...莫队好像没啥意义</p>
<p>因为我们有线段树合并啊w,用线段树维护编号的数组</p>
<p>线段树合并到fail树那个节点就可以处理这个节点上的所有查询了,直接区间查询和就好</p>
<p>但问题来了,这样很可能MLE啊QAQ</p>
<p>所以我们建立广义SAM时还需要注意不能开直接开新点,不过这个好像和之前写广义SAM写法是一样的,不过要拆开近似点</p>
<p>看下代码什么都懂啦</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
const int MAXN = 5e5 + 7;
const int INF = 1e7;
namespace Tree {
	int root[MAXN], T, lc[INF], rc[INF], w[INF];
#define lt lc[k], l, mid
#define rt rc[k],mid+1,r
	inline void modi(int &amp;k, int l, int r, int x) {
		if(!k)k = ++T;
		w[k]++;
		if(l == r)return ;
		register int mid = (l + r) &gt;&gt; 1;
		if(x &lt;= mid)modi(lt, x);
		else modi(rt, x);
	}
	inline int query(int k, int l, int r, int x, int y) {
		if(x &gt; r || y &lt; l || !k)return 0;
		if(x &lt;= l &amp;&amp; r &lt;= y)return w[k];
		register int mid = (l + r) &gt;&gt; 1;
		return query(lt, x, y) + query(rt, x, y);
	}
	inline int merge(int x, int y) {
		if(!x || !y)return x + y;
		register int now = ++T;
		w[now] = w[x] + w[y];
		lc[now] = merge(lc[x], lc[y]);
		rc[now] = merge(rc[x], rc[y]);
		return now;
	}
};

namespace SAM {
	int ch[MAXN][27], len[MAXN], link[MAXN], T, lst, p, q, cur, cle;
	int buc[MAXN], sa[MAXN], id[MAXN];
	inline void init() {
		lst = 1;
		T = 1;
	}
	inline void add(int x) {
		if(ch[lst][x]) {
			p = lst;
			q = ch[p][x];
			if(len[p] + 1 == len[q]) {
				lst = q;
				return ;
			}
			cle = ++T;
			len[cle] = len[p] + 1;
			link[cle] = link[q];
			memcpy(ch[cle], ch[q], sizeof(ch[q]));
			while(p &amp;&amp; ch[p][x] == q)ch[p][x] = cle, p = link[p];
			lst = cle;
			link[q] = cle;
			return ;
		}
		len[cur = ++T] = len[lst] + 1;
		p = lst;
		lst = cur;
		while(p &amp;&amp; !ch[p][x])ch[p][x] = cur, p = link[p];
		if(!p) {
			link[cur] = 1;
			return ;
		}
		q = ch[p][x];
		if(len[p] + 1 == len[q]) {
			link[cur] = q;
			return ;
		}
		cle = ++T;
		len[cle] = len[p] + 1;
		link[cle] = link[q];
		memcpy(ch[cle], ch[q], sizeof(ch[q]));
		while(p &amp;&amp; ch[p][x] == q)ch[p][x] = cle, p = link[p];
		link[cur] = link[q] = cle;
	}
	inline void sort() {
		for(int i = 1; i &lt;= T; ++i)buc[len[i]]++;
		for(int i = 1; i &lt;= T; ++i)buc[i] += buc[i - 1];
		for(int i = T; i &gt;= 1; --i)sa[buc[len[i]]--] = i;
		for(int i = T; i &gt;= 1; --i) {
			if(sa[i] == 1)continue;
			//printf(&quot;%d %d %d\n&quot;, sa[i], len[i], link[i]);
			Tree::root[link[sa[i]]] = Tree::merge(Tree::root[link[sa[i]]], Tree::root[sa[i]]);
		}
	}
};
char c[MAXN];
int n, m, X, Y, W;
int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	SAM::init();
	for(int i = 1; i &lt;= n; ++i) {
		scanf(&quot;%s&quot;, c + 1);
		SAM::lst = 1;
		int len = strlen(c + 1);
		for(int j = 1; j &lt;= len; ++j) {
			SAM::add(c[j] - 'a' + 1);
			Tree::modi(Tree::root[SAM::lst], 1, n, i);
		}
		SAM::id[i] = SAM::lst;
	}
	SAM::sort();
	while(m-- &gt; 0) {
		scanf(&quot;%d%d%d&quot;, &amp;X, &amp;Y, &amp;W);
		printf(&quot;%d\n&quot;, Tree::query(Tree::root[SAM::id[W]], 1, n, X, Y));
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF547D Mike and Fish]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf547d-mike-and-fish/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf547d-mike-and-fish/">
        </link>
        <updated>2020-03-30T22:35:46.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>为什么CF题会有一些奇怪的插图?<img src="https://cdn.luogu.com.cn/upload/vjudge_pic/CF547D/031dc6fdab66492c31079b30a48004c3918930a2.png" alt="" loading="lazy"></p>
<p>Orz</p>
<ul>
<li>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整点。</li>
<li>你要给每个点染成红色或蓝色。</li>
<li>要求同一水平线或垂直线上两种颜色的数量最多相差 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,x_i, y_i \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>一眼看上去真的很难判断是什么算法,如果是DP的话,那我们要记的状态可能有点复杂?</p>
<p>如果是贪心暴力的话...后效性?而且染色不一定有最优的啊</p>
<p>另外还要输出方案,好像图论算法就很不错?</p>
<p>先考虑建图,由网络流24题不难发现我们可以建行点和列点,然后同一行列有点我们就连一条边</p>
<p>边的方向?会不会就是点的颜色呢??/jk</p>
<p>如果就是点的颜色,我们就是要给每条边定向了,之前做的边定向题好像都转化成欧拉回路了!</p>
<p>那么我们这个题也可以,因为如果一个点是奇度数点,入度出度差1!是偶度数点则入度出度相等</p>
<p>而我们要欧拉回路还需要再建一个虚拟点,然后所有奇度数点向他连边.....不难发现他的度数一定是偶数</p>
<p>这样就做完了///</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
const int MAXN = 1e6 + 7;
int n, m;
int ccnt, home[MAXN], nxt[MAXN], to[MAXN], vis[MAXN], deg[MAXN], res[MAXN];

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = BUF_SIZE + buf;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

inline void ct(int x, int y) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	++deg[x];
}

inline void dfs(int u) {
	//printf(&quot;%d &quot;, u);
	for(int &amp;i = home[u], e; i; i = nxt[i]) {
		int v = to[i];
		if(!vis[e = i &gt;&gt; 1]) {
            //你会发现这其实是让同一条无向边只被标记一次
            //比如2,3&gt;&gt;1都是1,也就其中一个会被标记
			vis[e] = 1;
			if(e &lt;= n)res[e] = i &amp; 1;
			dfs(to[i]);

		}
	}
}

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	ccnt = 1;
	//puts(&quot;QWQ&quot;);
	for(int i = 1, u, v; i &lt;= n; ++i) {
		u = read();
		v = read() + 200000;//这个是列点
		ct(u, v);
		ct(v, u);
	}
	//puts(&quot;QAQ&quot;);
	for(int i = 1; i &lt;= 400000; ++i)
		if(deg[i] &amp; 1)ct(0, i), ct(i, 0);//虚拟点起效
	for(int i = 1; i &lt;= 400000; ++i) {
		dfs(i); //if(i % 10000 == 0)printf(&quot;%d\n&quot;, i); //枚举每行每列

	}
	//printf(&quot;%d?\n&quot;, n);
	for(int i = 1; i &lt;= n; ++i)putchar(res[i] ? 'b' : 'r');
	return 0;
}
</code></pre>
<p>金色暗影封面图很快就有的~</p>
]]></content>
    </entry>
</feed>