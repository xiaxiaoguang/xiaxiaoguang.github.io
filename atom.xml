<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiaxiaoguang.github.io</id>
    <title>夏晓光(loveJY)的博客</title>
    <updated>2020-04-02T11:04:56.789Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiaxiaoguang.github.io"/>
    <link rel="self" href="https://xiaxiaoguang.github.io/atom.xml"/>
    <subtitle>仍要向下扎根,向上结果</subtitle>
    <logo>https://xiaxiaoguang.github.io/images/avatar.png</logo>
    <icon>https://xiaxiaoguang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夏晓光(loveJY)的博客</rights>
    <entry>
        <title type="html"><![CDATA[CF566C Logistical Questions]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf566c-logistical-questions/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf566c-logistical-questions/">
        </link>
        <updated>2020-04-02T06:35:35.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>唉...我以后中午睡不上20min就石祥吧</p>
<p>真的非常好用,能得到50min高效率加成</p>
<ul>
<li>一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个节点的树，点有点权，边有边权。</li>
<li>两点间的距离定义为两点间边权和的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>3</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac 32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>​ 次方。</li>
<li>求这棵树的带权重心。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>考虑难在哪,因为我们不能直接枚举每个点算答案,而且要想得到一个点的答案必须暴力O(n)才行/惊恐</p>
<p>因为查询一个点做根他给出一个2/3次方我们啥数据结构都维护不了啊</p>
<p>所以我们考虑怎么实现一种检验次数最少的方法....?先发现了这个函数是凸函数</p>
<p>也就是说我们最优点只有一个,因为如果有多个,这个函数就不凸了啊,你可能会说是一条边两边的点都是最优的,这样我们可以认为这个边上有一个点是最优的啊,再加上题目中只要求输出一个方案,所以和之前是一样的</p>
<p>而且从这个点向左右移动答案一定会变大....也就是说我们从这个点向其他点走,导数....可以这么叫吧值会是正的</p>
<p>如果是一条链我们就二分了,现在我们是一棵树,就<strong>点分治</strong></p>
<p>现在我们要找的就是这样一个点,他满足走向周围的点导数都为正</p>
<p>也就是我们对于任何一个点,每次朝着导数为负的那个点走去就行,因为是树所以肯定只有一个这样的点</p>
<p>求一个点x到他一个儿子导数??</p>
<p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为x的一个儿子i子树内的导数值和</p>
<p>然后我们向i转移的导数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><msub><mi>p</mi><mi>j</mi></msub><mo>−</mo><mn>2</mn><mo>∗</mo><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum{p_j}-2*p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>找到这个小于0的即可</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;

using namespace std;

const int MAXN = 1e6 + 7;
int n, w[MAXN], s[MAXN], rt, vis[MAXN], ans1, ccnt;
int home[MAXN], to[MAXN], nxt[MAXN], len[MAXN];
double sum, sd, d[MAXN], ans2 = 1e20;

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = 0;
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

inline void ct(int x, int y, int z) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	len[ccnt] = z;
}

void dfs(int x, int f, int S) {
	s[x] = 1;
	int o = 0;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(v == f || vis[v])continue;
		dfs(v, x, S);
		s[x] += s[v];
		o = max(o, s[v]);
	}
	o = max(o, S - s[x]);
	if(o &lt;= (S &gt;&gt; 1))rt = x;
}

inline void calc(int x, int f, int o, int z) {
	sum += pow(z, 1.5) * w[x], d[o] += pow(z, 0.5) * 1.5 * w[x];
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(v == f)continue;
		calc(v, x, o, z + len[i]);
	}
}

inline void dfs(int x, int S) {
	dfs(x, 0, S);
	x = rt;
	dfs(x, 0, S);
	if(vis[x])return ;
	vis[x] = 1;
	sum = sd = 0;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		d[v] = 0;
		calc(v, x, v, len[i]), sd += d[v];
	}
	if(sum &lt; ans2)ans1 = x, ans2 = sum;
	for(int i = home[x]; i; i = nxt[i]) {
		int v = to[i];
		if(sd - d[v] * 2 &gt;= 0)continue;
		dfs(v, s[v]);
		break;
	}

}

int main() {
	//freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	n = read();
	for(int i = 1; i &lt;= n; ++i)w[i] = read();
	for(int i = 1, x, y, z; i &lt; n; ++i) {
		x = read();
		y = read();
		z = read();
		ct(x, y, z);
		ct(y, x, z);
	}
	dfs(1, n);
	printf(&quot;%d %.10f\n&quot;, ans1, ans2);
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF559E Gerald and Path]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf559e-gerald-and-path/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf559e-gerald-and-path/">
        </link>
        <updated>2020-04-01T08:11:25.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>小清新?这还是在跳过那倒计算几何题前提下....不过也很容易第一眼就误解</p>
<ul>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 条线段。</li>
<li>每条线段给定其中一端的位置及长度。</li>
<li>求所有线段覆盖的最大长度。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n \le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</li>
</ul>
<p>你直接离散化想统计答案是不行的,为什么不行?因为你没法决定每条线段是向左还是向右更优</p>
<p>所以要DP(</p>
<p>设f_{i,j}表示前i条线段,最右端覆盖到j的覆盖最长长度是什么,然后我们考虑i线段是向左延伸还是向右延伸...</p>
<h3 id="case-1-向右延伸">case 1 向右延伸</h3>
<p>这种情况不会和之前做的决策产生冲突,所以直接转移即可</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi></mrow></msub><mo>+</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>p</mi><mo separator="true">,</mo><mi>j</mi><mo>)</mo></mrow><mo separator="true">,</mo><mi>j</mi><mo>∈</mo><mo>[</mo><mi>p</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f_{i,j}=max{f_{i-1,p}+dist(p,j)},j \in [p,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></p>
<h3 id="case-2-向左延伸">case 2 向左延伸</h3>
<p>这种情况可能和之前决策产生重叠然后自闭掉....</p>
<p>所以因为可能这样存在一些线段使他们原本的右端点在更右边,因为我们第二维是只有考虑前i-1条线段的情况</p>
<p>我们直接枚举 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 并令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>∼</mo><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k\sim i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 这些线段都向右放。令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示右端点最右的位置。则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi></mrow></msub><mo>+</mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi></mrow><mo>(</mo><mi>l</mi><mo separator="true">,</mo><mi>R</mi><mo>)</mo><mo>}</mo></mrow><annotation encoding="application/x-tex">f_{i,j}=\max\{f_{k-1,l}+\mathrm{dist}(l,R)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">i</span><span class="mord mathrm">s</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></p>
<p>这样子转移就不会有冲突问题了,注意我们处理的前提是我们可以考虑一条线段的长度不固定,也就是说题目中给出的是最大长度,这样我们的状态才能够贴切实际情况</p>
<p>直接枚举的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 从大到小枚举，更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 的值。令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>[</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">g[R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 表示右端点为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 时的最大答案。</p>
<p>我们直接算出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>[</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">g[R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 后，还要对其做一遍后缀的处理。就是相当于取前缀计算贡献。具体可以见代码里的处理。</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;

using namespace std;
vector&lt;int&gt; vec;
const int MAXN = 215;
struct rec {
	int l, r, p;
	inline bool operator&lt;(const rec &amp;x) const {
		return p &lt; x.p;
	}
} d[MAXN];//线段

int n, f[MAXN][MAXN * 3], g[MAXN * 3];

inline int find(int &amp;x) {
	x = lower_bound(vec.begin(), vec.end(), x) - vec.begin();
}

int main() {
	scanf(&quot;%d&quot;, &amp;n);
	vec.push_back(-1e9);
	for(int i = 1; i &lt;= n; ++i) {
		int a, l;
		scanf(&quot;%d%d&quot;, &amp;a, &amp;l);
		d[i] = (rec) {
			a - l, a + l, a
		};
		vec.push_back(d[i].l);
		vec.push_back(d[i].r);
		vec.push_back(d[i].p);
	}
	sort(vec.begin(), vec.end());
	vec.erase(unique(vec.begin(), vec.end()), vec.end());
	for(int i = 1; i &lt;= n; ++i)find(d[i].l), find(d[i].r), find(d[i].p);
    //以上部分我们离散化
	int m = vec.size() - 1;
	sort(d + 1, d + n + 1);
	for(int i = 1; i &lt;= n; ++i) {
		memcpy(f[i], f[i - 1], sizeof * f);
        //这里要开始DP
		int L = d[i].l, R = d[i].r, p = d[i].p;
		memset(g, 0, sizeof(g));
		int nr = p;
		g[nr] = f[i - 1][L] + vec[nr] - vec[L];
        //这里先更新i向左覆盖的答案
		for(int j = i - 1; j; --j) {
            //把i-1到0所有线段考虑向右最多能覆盖到哪里
			nr = max(nr, d[j].r);
			g[nr] = max(g[nr], f[j - 1][L] + vec[nr] - vec[L]);
            //计算新的贡献,用上这条线段
		}
		for(int j = m; j &gt;= L; --j) {
			f[i][j] = max(f[i][j], g[j]);
            //更新新的答案,这条线段加进去可能会有所不同
			g[j - 1] = max(g[j - 1], g[j] - vec[j] + vec[j - 1]);
            //更新这个g数组,表示我们可以考虑把j点的答案去掉
		}
		for(int j = p; j &lt;= R; ++j)f[i][j] = max(f[i][j], f[i - 1][p] + vec[j] - vec[p]);
        //在考虑有多点就好
		for(int j = 1; j &lt;= m; ++j)f[i][j] = max(f[i][j], f[i][j - 1]);
	}
	printf(&quot;%d\n&quot;, f[n][m]);
	return 0;
}
</code></pre>
<p>咕咕咕</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF547E Mike and Friends]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf547e-mike-and-friends/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf547e-mike-and-friends/">
        </link>
        <updated>2020-04-01T01:25:08.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<figure data-type="image" tabindex="1"><img src="http://r.photo.store.qq.com/psc?/V13b3duC210Fox/4pNOqgOvBLvj4yTC9qc55d5Rb5zCL6GYefLJ8qYiplTaliv7R2LqiZmz*XoE8g.YTbM8OekMFYwnXtTNNRrczXczjg0.Raqs3bmoKAg6tyo!/r" alt="" loading="lazy"></figure>
<p><s>呐,你想要的的小暗</s></p>
<p>最近集训队作业加大难度了啊?</p>
<p>而且你谷愚人节随机名字颜色真不错</p>
<p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{1 \dots n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​。<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 次询问 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>k</mi></msub><mi>s</mi></mrow><annotation encoding="application/x-tex">s_ks</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">s</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mi>l</mi><mo>…</mo><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{l \dots r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="minner mtight">…</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ 中出现了多少次。<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mo>∑</mo><mi mathvariant="normal">∣</mi><mi>s</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n, \sum |s| \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">q \le 5 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>主要是考虑区间这一维限制怎么消掉</p>
<p>你发现我们完全可以用类似于莫队的扩展方式来消掉,也就是维护一个编号的数组</p>
<p>但是我们查询在建出SAM后就变成了对于一个子树里编号集合的查询...莫队好像没啥意义</p>
<p>因为我们有线段树合并啊w,用线段树维护编号的数组</p>
<p>线段树合并到fail树那个节点就可以处理这个节点上的所有查询了,直接区间查询和就好</p>
<p>但问题来了,这样很可能MLE啊QAQ</p>
<p>所以我们建立广义SAM时还需要注意不能开直接开新点,不过这个好像和之前写广义SAM写法是一样的,不过要拆开近似点</p>
<p>看下代码什么都懂啦</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
const int MAXN = 5e5 + 7;
const int INF = 1e7;
namespace Tree {
	int root[MAXN], T, lc[INF], rc[INF], w[INF];
#define lt lc[k], l, mid
#define rt rc[k],mid+1,r
	inline void modi(int &amp;k, int l, int r, int x) {
		if(!k)k = ++T;
		w[k]++;
		if(l == r)return ;
		register int mid = (l + r) &gt;&gt; 1;
		if(x &lt;= mid)modi(lt, x);
		else modi(rt, x);
	}
	inline int query(int k, int l, int r, int x, int y) {
		if(x &gt; r || y &lt; l || !k)return 0;
		if(x &lt;= l &amp;&amp; r &lt;= y)return w[k];
		register int mid = (l + r) &gt;&gt; 1;
		return query(lt, x, y) + query(rt, x, y);
	}
	inline int merge(int x, int y) {
		if(!x || !y)return x + y;
		register int now = ++T;
		w[now] = w[x] + w[y];
		lc[now] = merge(lc[x], lc[y]);
		rc[now] = merge(rc[x], rc[y]);
		return now;
	}
};

namespace SAM {
	int ch[MAXN][27], len[MAXN], link[MAXN], T, lst, p, q, cur, cle;
	int buc[MAXN], sa[MAXN], id[MAXN];
	inline void init() {
		lst = 1;
		T = 1;
	}
	inline void add(int x) {
		if(ch[lst][x]) {
			p = lst;
			q = ch[p][x];
			if(len[p] + 1 == len[q]) {
				lst = q;
				return ;
			}
			cle = ++T;
			len[cle] = len[p] + 1;
			link[cle] = link[q];
			memcpy(ch[cle], ch[q], sizeof(ch[q]));
			while(p &amp;&amp; ch[p][x] == q)ch[p][x] = cle, p = link[p];
			lst = cle;
			link[q] = cle;
			return ;
		}
		len[cur = ++T] = len[lst] + 1;
		p = lst;
		lst = cur;
		while(p &amp;&amp; !ch[p][x])ch[p][x] = cur, p = link[p];
		if(!p) {
			link[cur] = 1;
			return ;
		}
		q = ch[p][x];
		if(len[p] + 1 == len[q]) {
			link[cur] = q;
			return ;
		}
		cle = ++T;
		len[cle] = len[p] + 1;
		link[cle] = link[q];
		memcpy(ch[cle], ch[q], sizeof(ch[q]));
		while(p &amp;&amp; ch[p][x] == q)ch[p][x] = cle, p = link[p];
		link[cur] = link[q] = cle;
	}
	inline void sort() {
		for(int i = 1; i &lt;= T; ++i)buc[len[i]]++;
		for(int i = 1; i &lt;= T; ++i)buc[i] += buc[i - 1];
		for(int i = T; i &gt;= 1; --i)sa[buc[len[i]]--] = i;
		for(int i = T; i &gt;= 1; --i) {
			if(sa[i] == 1)continue;
			//printf(&quot;%d %d %d\n&quot;, sa[i], len[i], link[i]);
			Tree::root[link[sa[i]]] = Tree::merge(Tree::root[link[sa[i]]], Tree::root[sa[i]]);
		}
	}
};
char c[MAXN];
int n, m, X, Y, W;
int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	SAM::init();
	for(int i = 1; i &lt;= n; ++i) {
		scanf(&quot;%s&quot;, c + 1);
		SAM::lst = 1;
		int len = strlen(c + 1);
		for(int j = 1; j &lt;= len; ++j) {
			SAM::add(c[j] - 'a' + 1);
			Tree::modi(Tree::root[SAM::lst], 1, n, i);
		}
		SAM::id[i] = SAM::lst;
	}
	SAM::sort();
	while(m-- &gt; 0) {
		scanf(&quot;%d%d%d&quot;, &amp;X, &amp;Y, &amp;W);
		printf(&quot;%d\n&quot;, Tree::query(Tree::root[SAM::id[W]], 1, n, X, Y));
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF547D Mike and Fish]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf547d-mike-and-fish/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf547d-mike-and-fish/">
        </link>
        <updated>2020-03-30T22:35:46.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>为什么CF题会有一些奇怪的插图?<img src="https://cdn.luogu.com.cn/upload/vjudge_pic/CF547D/031dc6fdab66492c31079b30a48004c3918930a2.png" alt="" loading="lazy"></p>
<p>Orz</p>
<ul>
<li>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整点。</li>
<li>你要给每个点染成红色或蓝色。</li>
<li>要求同一水平线或垂直线上两种颜色的数量最多相差 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,x_i, y_i \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>一眼看上去真的很难判断是什么算法,如果是DP的话,那我们要记的状态可能有点复杂?</p>
<p>如果是贪心暴力的话...后效性?而且染色不一定有最优的啊</p>
<p>另外还要输出方案,好像图论算法就很不错?</p>
<p>先考虑建图,由网络流24题不难发现我们可以建行点和列点,然后同一行列有点我们就连一条边</p>
<p>边的方向?会不会就是点的颜色呢??/jk</p>
<p>如果就是点的颜色,我们就是要给每条边定向了,之前做的边定向题好像都转化成欧拉回路了!</p>
<p>那么我们这个题也可以,因为如果一个点是奇度数点,入度出度差1!是偶度数点则入度出度相等</p>
<p>而我们要欧拉回路还需要再建一个虚拟点,然后所有奇度数点向他连边.....不难发现他的度数一定是偶数</p>
<p>这样就做完了///</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
const int MAXN = 1e6 + 7;
int n, m;
int ccnt, home[MAXN], nxt[MAXN], to[MAXN], vis[MAXN], deg[MAXN], res[MAXN];

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = BUF_SIZE + buf;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
}
using namespace fastIO;

inline void ct(int x, int y) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	++deg[x];
}

inline void dfs(int u) {
	//printf(&quot;%d &quot;, u);
	for(int &amp;i = home[u], e; i; i = nxt[i]) {
		int v = to[i];
		if(!vis[e = i &gt;&gt; 1]) {
            //你会发现这其实是让同一条无向边只被标记一次
            //比如2,3&gt;&gt;1都是1,也就其中一个会被标记
			vis[e] = 1;
			if(e &lt;= n)res[e] = i &amp; 1;
			dfs(to[i]);

		}
	}
}

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	ccnt = 1;
	//puts(&quot;QWQ&quot;);
	for(int i = 1, u, v; i &lt;= n; ++i) {
		u = read();
		v = read() + 200000;//这个是列点
		ct(u, v);
		ct(v, u);
	}
	//puts(&quot;QAQ&quot;);
	for(int i = 1; i &lt;= 400000; ++i)
		if(deg[i] &amp; 1)ct(0, i), ct(i, 0);//虚拟点起效
	for(int i = 1; i &lt;= 400000; ++i) {
		dfs(i); //if(i % 10000 == 0)printf(&quot;%d\n&quot;, i); //枚举每行每列

	}
	//printf(&quot;%d?\n&quot;, n);
	for(int i = 1; i &lt;= n; ++i)putchar(res[i] ? 'b' : 'r');
	return 0;
}
</code></pre>
<p>金色暗影封面图很快就有的~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5284 [十二省联考2019]字符串问题]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5284-shi-er-sheng-lian-kao-2019zi-fu-chuan-wen-ti/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5284-shi-er-sheng-lian-kao-2019zi-fu-chuan-wen-ti/">
        </link>
        <updated>2020-03-30T03:00:21.000Z</updated>
        <content type="html"><![CDATA[<p>十二省联考D1T2</p>
<p>没啥感想,就是10s时限确实毒瘤</p>
<p>给出一个母串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>。</p>
<p>有一些<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>类串和一些<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>类串，都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>的子串，以左右端点的方式给出。</p>
<p>给出一些<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>类串对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>类串的支配关系。</p>
<p>我们需要用若干个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>类串首位顺次相连，要求对于每相邻两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>类串，必须存在一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>类串被前一个串支配，且是后一个串前缀。我们想让连接后的串尽量长，输出这个长度。如果可以无限长，输出&quot;-1&quot;。</p>
<p>首先这是省选,而且考字符串,所以盲猜要后缀数据结构</p>
<p>用脑子想想暴力做法就是枚举两个点然后判断能不能连边....接着跑一个拓扑排序求最长链,如果有环就是-1</p>
<p>问题是直接这样做什么都过不了,复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>我们考虑建图时间浪费在哪里</p>
<ol>
<li>
<p>判断两个点是否是可以做前后相接的关系,就是A是不是B所支配的某个点的一个扩集</p>
</li>
<li>
<p>枚举两个点这个过程本身,也就是连边太慢了</p>
</li>
</ol>
<p>所以我们先建立反串的SAM,为什么不是SA?因为我不会为什么是反串?因为我们需要后缀树,这样他的超集就在子树和本节点比他长的串上了</p>
<p>然后我们边分两种</p>
<ol>
<li>从A连向被支配的B,A的权值是长度,B的权值是0</li>
<li>从B指向以他为前缀的A</li>
</ol>
<p>我们发现难度主要在2号点,不过想想后缀树其实也并不难</p>
<p>首先要用倍增的方式得到子串在原树上的位置,就是子串开头节点是谁,记录在结尾节点上</p>
<p>然后,我们这样的方式连边<img src="https://xiaxiaoguang.github.io/post-images/1585539795419.png" alt="" loading="lazy"></p>
<p>也就是说,我们在五号点把接收到的上方节点先按照长度从小到大排序,再B串前A串后,然后每个串都由他最近的B连向他!!</p>
<p>最后每个结尾点都记录了离得最近的一个B点,我们再用后缀树的树边,把这个b点向他的儿子连边就好了</p>
<p>这样仔细一想完全可以体现前缀</p>
<p>所以这题做完了</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;queue&gt;
#define ll long long
using namespace std;
const int MAXN = 2e5 + 100;
int n, na, nb, m, sz, a[MAXN], b[MAXN], isa[MAXN &lt;&lt; 2];
char s[MAXN];
int lst, T, id[MAXN], last[MAXN &lt;&lt; 1], f[MAXN &lt;&lt; 1][20], ch[MAXN &lt;&lt; 1][26], fa[MAXN &lt;&lt; 1], len[MAXN &lt;&lt; 2];
int in[MAXN &lt;&lt; 2], home[MAXN &lt;&lt; 2], to[MAXN &lt;&lt; 3], nxt[MAXN &lt;&lt; 3], ccnt;
vector&lt;int&gt; g[MAXN &lt;&lt; 2];
ll dis[MAXN &lt;&lt; 2];

inline void ins(int c) {
	int p = lst, np = ++T;
	lst = np;
	len[np] = len[p] + 1;
	for(; p &amp;&amp; !ch[p][c]; p = fa[p])ch[p][c] = np;
	if(!p)fa[np] = 1;
	else {
		int q = ch[p][c];
		if(len[p] + 1 == len[q])fa[np] = q;
		else {
			int nq = ++T;
			len[nq] = len[p] + 1;
			memcpy(ch[nq], ch[q], sizeof(ch[q]));
			fa[nq] = fa[q];
			fa[q] = fa[np] = nq;
			for(; p &amp;&amp; ch[p][c] == q; p = fa[p])ch[p][c] = nq;
		}
	}

}

inline void judge(int b) {
	int l, r;
	scanf(&quot;%d%d&quot;, &amp;l, &amp;r);
	//读入l,r字符串区间
	r = r - l + 1;
	l = id[l];
	//前缀所在节点
	for(int i = 19; i &gt;= 0; --i) {
		if(f[l][i] &amp;&amp; len[f[l][i]] &gt;= r)l = f[l][i];
	}
	//树上倍增,找到他真正表示节点
	isa[++sz] = b;
	//这一步其实是拆点了
	len[sz] = r;
	g[l].push_back(sz);
	//前缀所在节点记录一下
}

inline bool cmp(const int &amp;x, const int &amp;y) {
	return len[x] &gt; len[y] || (len[x] == len[y] &amp;&amp; isa[x] &gt; isa[y]);
}

inline void ct(int x, int y) {
	to[++ccnt] = y;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	in[y]++;
}

inline void solve() {
	scanf(&quot;%s&quot;, s + 1);
	n = strlen(s + 1);
	lst = T = 1;
	for(int i = n; i &gt;= 1; --i)ins(s[i] - 'a'), id[i] = lst;// printf(&quot;%d? &quot;, lst);
	//puts(&quot;&quot;);
	for(int i = 1; i &lt;= T; ++i)f[i][0] = fa[i];
	for(int j = 1; j &lt;= 19; ++j) {
		for(int i = 1; i &lt;= T; ++i) {
			f[i][j] = f[f[i][j - 1]][j - 1];
			//树上倍增部分
		}
	}
	scanf(&quot;%d&quot;, &amp;na);
	sz = T;
	//printf(&quot;%d!!\n&quot;, T);
	for(int i = 1; i &lt;= na; ++i)judge(1), a[i] = sz;
	//第一类串,我们强行定位,sz是定位后对于isa和len数组位置
	scanf(&quot;%d&quot;, &amp;nb);
	for(int i = 1; i &lt;= nb; ++i)judge(0), b[i] = sz;
	//再招每一个b串
	for(int i = 1; i &lt;= T; ++i)sort(g[i].begin(), g[i].end(), cmp);
	//对于每个点排序
	for(int i = 1; i &lt;= T; ++i) {
		int lst = i;
		//找到lst
		for(int j = g[i].size() - 1; j &gt;= 0; --j) {
			int nw = g[i][j];
			//提出节点,注意这里是反序的...所以应该可以把cmp改改变正序
			ct(lst, nw);
			//从最近B向他连边
			if(!isa[nw])lst = nw;
			//如果终末点是b号点
			//我们就拿b号点作为最近终末点搞一下
		}
		last[i] = lst;
		//记录他最近是哪个b节点
	}
	for(int i = 2; i &lt;= T; ++i)ct(last[fa[i]], i);
	//父亲最近的b向i连边
	for(int i = 1; i &lt;= sz; ++i)if(!isa[i])len[i] = 0;
	//b节点len清空
	scanf(&quot;%d&quot;, &amp;m);
	int x, y, f = 0;
	ll ans = 0;
	for(int i = 1; i &lt;= m; ++i)scanf(&quot;%d%d&quot;, &amp;x, &amp;y), ct(a[x], b[y]);
	//直接按照支配关系连边
	queue&lt;int&gt; q;
	//唯一看得懂的部分啊
	for(int i = 1; i &lt;= sz; ++i) {
		if(!in[i])q.push(i);
	}
	while(!q.empty()) {
		x = q.front();
		q.pop();
		ans = max(ans, dis[x] + len[x]);
		for(int i = home[x]; i; i = nxt[i]) {
			int v = to[i];
			dis[v] = max(dis[v], dis[x] + len[x]);
			if(!--in[v])q.push(v);
		}
	}
	for(int i = 1; i &lt;= sz; ++i) {
		if(in[i]) {
			f = 1;
			break;
		}
	}
	if(f)puts(&quot;-1&quot;);
	else printf(&quot;%lld\n&quot;, ans);
	while(!q.empty())q.pop();
	for(int i = 1; i &lt;= T; ++i)fa[i] = 0, memset(ch[i], 0, sizeof(ch[i]));
	for(int i = 1; i &lt;= sz; ++i)g[i].clear(), isa[i] = len[i] = home[i] = dis[i] = in[i] = 0;
	lst = T = sz = ccnt = 0;
}

int main() {
	int T;
	scanf(&quot;%d&quot;, &amp;T);
	while(T-- &gt; 0)solve();
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF536D Tavas in Kansas]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf536d-tavas-in-kansas/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf536d-tavas-in-kansas/">
        </link>
        <updated>2020-03-29T14:44:29.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>吐槽,这是第几次做作业了?/xyx</p>
<p>...感受...作业一下子....加难度了?QAQ</p>
<ul>
<li>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 条边的可能有自环和重边的无向连通图，每条边都有一个非负边权。</li>
<li>小 X 和小 Y 在这张图上玩一个游戏，在游戏中，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个城市有一个权值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
<li>一开始，小 X 在城市 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 中，小 Y 在城市 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 中，两人各有一个得分，初始为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，小 X 为先手，然后轮流进行操作。</li>
<li>当轮到某一个人时，他必须选择一个非负整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，以选定所有与他所在的城市的最短距离不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的还未被选定过的城市，他的得分将会加上这些城市的权值。</li>
<li>另外，每个人每次必须能够至少选定一个城市。</li>
<li>当没有人可以选择时，游戏结束，得分高者获胜。</li>
<li>现在请你计算出，在两人都使用最佳策略的情况下，谁会获胜（或者判断为平局）。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n \le 2 \times 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">m \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">|p_i| \le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>首先跑两遍dijkstra算出s,t到其他点的最短路,然后我们得到两个dis数组</p>
<p>紧接着我们离散化,这样方便DP,而且整个局面可以很轻松的被纪录下来,因为我们只考虑每个点选还是没选,具体得分记在值里就好,所以从S出发半径为i和从T出发半径为j包住的所有点就成为被选的点,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>一个就能推出哪些点被选了</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo separator="true">,</mo><mi>d</mi><msub><mi>p</mi><mrow><mn>2</mn><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">dp_{1,i,j},dp_{2,i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示初始局面是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>然后第一步由A,B操作,A的最大得分是多少,转移就枚举下一步选取什么点</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><msub><mn>1</mn><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>M</mi><mi>A</mi><msub><mi>X</mi><mrow><munderover><mo>∑</mo><mrow><mi>o</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></munderover><munder><mo>∑</mo><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>1</mn><mi>P</mi></msub><mo>=</mo><mi>o</mi></mrow></munder><mo>[</mo><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>2</mn><mi>P</mi></msub><mo>&gt;</mo><mi>j</mi><mo>]</mo><mo>&gt;</mo><mn>0</mn></mrow></msub><mrow><mi>d</mi><mi>p</mi><msub><mn>2</mn><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>+</mo><munderover><mo>∑</mo><mrow><mi>o</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></munderover><munder><mo>∑</mo><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>1</mn><mi>P</mi></msub><mo>=</mo><mi>o</mi></mrow></munder><mo>[</mo><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>2</mn><mi>P</mi></msub><mo>&gt;</mo><mi>j</mi><mo>]</mo><msub><mi>v</mi><mi>P</mi></msub></mrow></mrow><annotation encoding="application/x-tex">dp1_{i,j}=MAX_{\sum_{o=i+1}^k\sum_{dis1_P=o}[dis2_P&gt;j]&gt;0}{dp2_{k,j}+\sum_{o=i+1}^k\sum_{dis1_P=o}[dis2_P&gt;j]v_P}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.238531em;vertical-align:-1.402418em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.4195800000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8931714285714285em;"><span style="top:-2.1785614285714288em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.38096em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1745899999999999em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33853em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5632457142857143em;"><span></span></span></span></span></span></span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mrel mtight">&gt;</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">]</span><span class="mrel mtight">&gt;</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6746919999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.836113em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.336em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">o</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402418em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><msub><mn>2</mn><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>i</mi><msub><mi>n</mi><mrow><munderover><mo>∑</mo><mrow><mi>o</mi><mo>=</mo><mi>j</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></munderover><munder><mo>∑</mo><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>2</mn><mi>p</mi></msub><mo>=</mo><mn>0</mn></mrow></munder><mo>[</mo><mi>d</mi><mi>i</mi><mi>s</mi><mn>1</mn><mi>p</mi><mo>&gt;</mo><mi>i</mi><mo>]</mo><mo>&gt;</mo><mn>0</mn></mrow></msub><mrow><mi>d</mi><mi>p</mi><msub><mn>1</mn><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub></mrow></mrow><annotation encoding="application/x-tex">dp2_{i,j}=min_{\sum_{o=j+1}^k\sum_{dis2_p=0}[dis1p&gt;i]&gt;0}{dp1_{i,k}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.397087em;vertical-align:-0.7026469999999999em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448000000000001em;"><span style="top:-2.4195800000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8931714285714285em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.46032428571428574em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1745899999999999em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3000000000000003em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathdefault mtight">p</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39444em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6031814285714286em;"><span></span></span></span></span></span></span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight">1</span><span class="mord mathdefault mtight">p</span><span class="mrel mtight">&gt;</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mrel mtight">&gt;</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7026469999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>一次转移是O(n)的,复杂度就是O(n^3),T掉了</p>
<p>考虑处理前缀</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><msub><mn>1</mn><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><munder><mo>∑</mo><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>1</mn><mi>o</mi></msub><mo>=</mo><mi>k</mi></mrow></munder><mo>[</mo><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>2</mn><mi>o</mi></msub><mo>&gt;</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">Cnt1_{i,j}=\sum_{k=1}^i\sum_{dis1_o=k}[dis2_o&gt;j]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.213882em;vertical-align:-1.402213em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><msub><mn>1</mn><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><munder><mo>∑</mo><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>1</mn><mi>o</mi></msub><mo>=</mo><mi>k</mi></mrow></munder><mo>[</mo><mi>d</mi><mi>i</mi><mi>s</mi><msub><mn>2</mn><mi>o</mi></msub><mo>&gt;</mo><mi>j</mi><mo>]</mo><msub><mi>v</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">Sum1_{i,j}=\sum_{k=1}^i\sum_{dis1_o=k}[dis2_o&gt;j]v_p
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.213882em;vertical-align:-1.402213em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>cnt2和sum2同理</p>
<p>转移方程就...唉...</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 38: …,j}&gt;cnt1_{i,j}}}̲{dp2_{k,j}+sum1…'>dp1_{i,j}=MAX_{cnt1_{k,j}&gt;cnt1_{i,j}}}{dp2_{k,j}+sum1_{k,j}}-sum1_{i,j}
</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 38: …,k}}&gt;cnt2_{i,j}}̲{dp1_{i,k}}
'>dp2_{i,j}=min_{cnt2_{i,k}}&gt;cnt2_{i,j}}{dp1_{i,k}}
</p>
<p>你就会发现那个取miin取max的操作可以双指针,因为随着i下降,k的上界不变而下界不升,所以可以双指针....</p>
<p>最后比较<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><msub><mn>1</mn><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">dp1_{0,0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>v</mi><mi>i</mi></msub><mo>−</mo><mi>d</mi><mi>p</mi><msub><mn>1</mn><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^nv_i-dp1_{0,0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>QAQ还是不太会啊</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;bits/stdc++.h&gt;
#define ll long long
#define int long long

#define pb push_back
#define mp make_pair
#define se second
using namespace std;
const int N = 2e3 + 20;
const int MAXN = 5e5 + 7;
const ll inf = 1e18;
int home[MAXN], to[MAXN], nxt[MAXN], ccnt;
int n, m, S, T, a[N], v[N], cs, ct, c[N][N], ns[N][N], nt[N][N];
ll ds[N], dt[N], num[N], f[2][N][N], s[N][N], len[MAXN];

inline CT(int x, int y, int z) {
	nxt[++ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	len[ccnt] = z;
}

inline void dij(int s, ll *d, int &amp;c) {
	for(int i = 1; i &lt;= n; ++i)d[i] = inf, v[i] = 0;
	priority_queue&lt;pair&lt;ll, int&gt; &gt; q;
	d[s] = 0, q.push(mp(0, s));
	while(!q.empty()) {
		int x = q.top().se;
		q.pop();
		if(v[x])continue;
		v[x] = 1;
		for(int i = home[x]; i; i = nxt[i]) {
			int v = to[i], z = len[i];
			if(d[v] &gt; d[x] + z)d[v] = d[x] + z, q.push(mp(-d[v], v));
		}
	}
	//puts(&quot;\n&quot;);
	for(int i = 1; i &lt;= n; ++i)num[i] = d[i];// printf(&quot;%d &quot;, num[i]);
	sort(num + 1, num + n + 1);
	c = unique(num + 1, num + n + 1) - (num + 1);
	for(int i = 1; i &lt;= n; ++i)
		d[i] = lower_bound(num + 1, num + c + 1, d[i]) - num;
}

signed main() {
	scanf(&quot;%lld%lld&quot;, &amp;n, &amp;m);
	scanf(&quot;%lld%lld&quot;, &amp;S, &amp;T);
	for(int i = 1; i &lt;= n; ++i)scanf(&quot;%lld&quot;, &amp;a[i]);
	for(int i = 1; i &lt;= m; ++i) {
		int u, v, w;
		scanf(&quot;%lld%lld%lld&quot;, &amp;u, &amp;v, &amp;w);
		CT(u, v, w);
		CT(v, u, w);
	}
	dij(S, ds, cs), dij(T, dt, ct);
	for(int i = 1; i &lt;= n; ++i)++c[ds[i]][dt[i]], s[ds[i]][dt[i]] += a[i];
	for(int i = cs; i; --i) {
		for(int j = ct; j; --j) {
			s[i][j] += s[i + 1][j] + s[i][j + 1] - s[i + 1][j + 1];
			ns[i][j] = min(i == cs ? cs : ns[i + 1][j], j == ct ? cs : ns[i][j + 1]);
			nt[i][j] = min(i == cs ? ct : nt[i + 1][j], j == ct ? ct : nt[i][j + 1]);
			if(c[i][j])ns[i][j] = i, nt[i][j] = j;
			f[0][i][j] = s[i][j] - f[1][ns[i][j] + 1][j];
			f[1][i][j] = s[i][j] - f[0][i][nt[i][j] + 1];
			if(i == 1 &amp;&amp; j == 1)continue;
			f[0][i][j] = min(f[0][i][j], f[0][i][j + 1]);
			f[1][i][j] = min(f[1][i][j], f[1][i + 1][j]);
		}
	}
	ll ans = s[1][1] - 2 * f[0][1][1];
	if(ans &lt; 0)puts(&quot;Break a heart&quot;);
	else if(ans &gt; 0)puts(&quot;Cry&quot;);
	else puts(&quot;Flowers&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P5358 [SDOI2019]快速查询]]></title>
        <id>https://xiaxiaoguang.github.io/post/p5358-sdoi2019kuai-su-cha-xun/</id>
        <link href="https://xiaxiaoguang.github.io/post/p5358-sdoi2019kuai-su-cha-xun/">
        </link>
        <updated>2020-03-29T14:17:05.000Z</updated>
        <content type="html"><![CDATA[<p>SDOI2019D1T1</p>
<p><front size=1> P站真好 </front></p>
<p>我自闭了,所以感想很简单:SDOI二轮果然还是没了好</p>
<ul>
<li>
<p>1 i val ：将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ 赋值为给定整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>；</p>
</li>
<li>
<p>2 val ：将所有元素同时加上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>；</p>
</li>
<li>
<p>3 val ：将所有元素同时乘上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>；</p>
</li>
<li>
<p>4 val ：将所有元素同时赋值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>；</p>
</li>
<li>
<p>5 i ：询问第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">ai</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span></span></span></span>​ 现在的值是多少；</p>
</li>
<li>
<p>6 ：询问现在所有元素的和。</p>
</li>
</ul>
<p>n&lt;=1e9,p&lt;=1e7</p>
<p>暴力就不用说了吧?动态开点线段树,挂个log,神威太湖之光跑起来轻轻松松</p>
<p>说正解:这个题就是打标记</p>
<p>首先你会发现我们有1e9个数但是只有1e7个询问或者修改,也就是说本质不同的数数量小于1e7,而且我们最多也就支持个单点查询,所以只需要维护每个数就好了</p>
<p>他们的编号是1e9级别?手写一个哈希表存一下就行了...<s>什么?你哈希表模数被卡了?那我只能/kk</s></p>
<p>然后这样单点查询和单点赋值就支持了,再考虑全局加乘,不难发现我们只需要打个标记就能解决他和单点操作的兼容??</p>
<p>并不是这样,我们还是要推式子,设hash表里存<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>,乘法标记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>u</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">mul</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>,加法标记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span></p>
<p>然后某数真实值是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo>∗</mo><mi>m</mi><mi>u</mi><mi>l</mi><mo>+</mo><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">val*mul+add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span></p>
<p>现在要改成tmp,但我们hash表内要存x,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>m</mi><mi>p</mi><mo>=</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo>∗</mo><mi>x</mi><mo>+</mo><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">tmp=val*x+add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mi>t</mi><mi>m</mi><mi>p</mi><mo>−</mo><mi>a</mi><mi>d</mi><mi>d</mi></mrow><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x=\frac{tmp-add}{val}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>并不过瘾,但是这就够了,另外如果您是带师那么考虑在每个hash值上再多存一点东西替代推这个式子也是可以的,因为这个东西要算逆元,逆元是有坑的</p>
<p>然后再考虑全局赋值和单点兼容性问题.....</p>
<p>首先乘法标记和加法标记要清空,然后打上一个赋值标记,而且好像还要考虑在这之后的单点赋值标记又能够覆盖了他...?</p>
<p>这里其实只需要在每个hash值处记录一下&quot;时间&quot;信息,然后我们发现有现成的数组,就是hash表中那个记当前有多少条边的那个,那正好也代表了边出现的顺序,所以只需要用那玩意记录一下时间信息就好了</p>
<p>然后你会发现我们都兼容了,所以这个题就做完了.<s>只需要100行左右哦,快去写吧</s></p>
<p><s>好吧我最后再多调了1个多h才做完/kk</s></p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#define int long long
#define ULL unsigned long long
#define ll long long
const int MOD = 1e7 + 19;
const int MAXN = 2e5 + 7;
const int P = 1e7 + 19;
struct rec {
	ll a, b, c;
} q[MAXN];
ll fac[P + 10], ifac[P + 10], inv[P + 10];
ll sum, ans, nt, nfzv, mul, add, n, Q;
int a[MAXN], b[MAXN];

struct H_SH {
	struct edge {
		ll x;
		ULL rx;
		ll nxt;
	} e[21000000];
	int home[MOD + 1], cnt_e;

	void add(ULL x, ll d) {
		int u = (x % MOD) + 1;
		// for(int i = home[u]; i; i = e[i].nxt) {
		// 	if(e[i].x == x) { //
		// 		e[i].cnt += d;
		// 		return ;
		// 	}
		// }
		e[++cnt_e] = (edge) {
			d, x, home[u]
		};
		home[u] = cnt_e;
		//老八蜜汁哈希表
	}

	ll query(ULL x, int &amp;o) {
		int u = (x % MOD) + 1;
		for(int i = home[u]; i; i = e[i].nxt) {
			if(e[i].rx == x) {
				o = i;
				return e[i].x;
			}
		}
		o = 0;
		return 1e18;
	}
} _;

inline void ddfz(int pos, int val) {
	int lst;
	ll V = _.query(pos, lst);
	// printf(&quot;%lld %lld %lld %lld#\n&quot;, pos, val, V, lst);
	if(nt &gt;= lst) {
		sum = (sum - nfzv * mul % P - add + P) % P;
	} else {
		sum = (sum - V * mul % P - add + P ) % P;
	}
	//和要减去之前的
	ll opr = (((val - add) % P + P) % P * inv[(mul + P) % P]) % P;
	// printf(&quot;%lld &amp;\n&quot;, opr);
	//反演
	_.add(pos, opr);
	sum = (sum + val) % P;
}

inline void Aadd(ll x) {
	add = (add + x) % P;
	sum = (sum + n * x % P) % P;
}

inline void Amul(ll x) {
	add = (add * x) % P;
	mul = (mul * x) % P;
	sum = (sum * x) % P;
}

inline void Afz(ll x) {
	nt = _.cnt_e;
	nfzv = x;
	add = 0;
	mul = 1;
	sum = (nfzv * n) % P;
}

inline void query(int x) {
	int lst;
	ll V = _.query(x, lst);
	// printf(&quot;%lld %lld?\n&quot;, V, lst);
	if(nt &gt;= lst) {
		ans = (ans + nfzv * mul % P + add) % P;
	} else {
		ans = (ans +  V * mul % P + add) % P;
	}
}


inline void solve(int x) {
	// printf(&quot;%d?\n&quot;, x);
	if(q[x].a == 1)
		ddfz(q[x].c, q[x].b);
	else if(q[x].a == 2)
		Aadd(q[x].b);
	else if(q[x].a == 3)
		Amul(q[x].b);
	else if(q[x].a == 4)
		Afz(q[x].b);
	else if(q[x].a == 5)
		query(q[x].b);
	else ans = (ans + sum) % P;
	// printf(&quot;%lld %lld %lld\n&quot;, sum, mul, add);
}

inline ll ksm(ll x, ll y) {
	ll ans = 1;
	while(y) {
		if(y &amp; 1)ans = ans * x % P;
		x = x * x % P;
		y &gt;&gt;= 1;
	}
	return ans;
}

inline void init() {
	// fac[0] = fac[1] = 1;
	// ifac[0] = ifac[1] = 1;
	// for(register int i = 2; i &lt; P; ++i) {
	// 	fac[i] = fac[i - 1] * i % P;
	// }
	// fac[P - 1] = ksm(fac[P - 1], P - 2);
	// for(register int i = P - 2; i &gt;= 2; --i) {
	// 	ifac[i] = ifac[i + 1] * (i + 1) % P;
	// 	inv[i + 1] = fac[i + 1] * ifac[i] % P;
	// }
	// inv[2] = fac[2] * ifac[1] % P;
	// printf(&quot;%lld?\n&quot;, inv[2]);
	inv[0] = inv[1] = 1;
	for (ll i = 2; i &lt;= P - 1; i++) {
		inv[i] = (((P - P / i) % P) * inv[P % i]) % P;
	}
	return ;
}

signed main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	mul = 1;
	init();
	scanf(&quot;%lld%lld&quot;, &amp;n, &amp;Q);
	for(register int i = 1; i &lt;= Q; ++i) {
		scanf(&quot;%lld&quot;, &amp;q[i].a);
		if(q[i].a == 1)scanf(&quot;%lld%lld&quot;, &amp;q[i].c, &amp;q[i].b);
		else if(q[i].a != 6) {
			scanf(&quot;%lld&quot;, &amp;q[i].b);
		}
		if(q[i].a != 5)q[i].b %= P;
	} int t;
	scanf(&quot;%lld&quot;, &amp;t);
	for(register int i = 1; i &lt;= t; ++i)scanf(&quot;%lld%lld&quot;, &amp;a[i], &amp;b[i]);
	//puts(&quot;qwq&quot;);
	for(register int i = 1; i &lt;= t; ++i) {
		for(register int j = 1; j &lt;= Q; ++j) {
			solve((a[i] + j * b[i] % Q) % Q + 1);
		}
		//	printf(&quot;???\n&quot;);
	}
	printf(&quot;%lld\n&quot;, (ans % P + P) % P);
	return 0;
}

</code></pre>
<p>尼康不见我,我恨凯信</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF526G Spiders Evil Plan]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf526g-spiders-evil-plan/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf526g-spiders-evil-plan/">
        </link>
        <updated>2020-03-27T23:16:09.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>最近莫名其妙的繁忙,是文化课更用功了吗?因为感觉不像颓了啊....</p>
<figure data-type="image" tabindex="1"><img src="https://xiaxiaoguang.github.io/post-images/1585351069348.png" alt="" loading="lazy"></figure>
<ul>
<li>给定一棵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个节点的无根树，每条边有边权。</li>
<li>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 次询问，每次询问给出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，你需要选择 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 条树上的路径，使这些路径形成一个包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的连通块，且连通块中包含的边权和最大。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n, q \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，强制在线。</li>
</ul>
<p>well,我承认一开始看成选边了,然后一点也没做出来,想了一个很假的n^2(</p>
<p>既然要选就选一条路径,那么我们可以考虑拿出一个结论</p>
<blockquote>
<p>任意一个有k个叶子的树我们只需要k/2上取整条路径就能全覆盖</p>
</blockquote>
<p>有了这个结论我们贪心就好贪了,问题变成在原树中选取一些叶子,使他们组成的极小连通块边权和最大</p>
<p>我们会发现直径的某一端点一定会被选,但是直径不定被选上...比如只有一条路径的情况</p>
<p>然后我们就可以分别以这两个直径端点为根建树,然后问题就是在其中子树选2k-1个叶子,最大化打通他们<code>到根</code>的边权和...<s>还是不会做</s></p>
<p>考虑带边权的长链剖分啊所以我们只需要选前2y-1个最长链就好啦!!!实现的时候我们可以先把链头都存到数组里排序一下....</p>
<p>不过显然选完之后不一定经过x,需要微调</p>
<h2 id="case-1">case 1</h2>
<p>先选前2k-2条长链,然后第k条选择从x上方一个在前2k-2条长链中的点到x子树的叶子最大的</p>
<p>就是:<img src="https://xiaxiaoguang.github.io/post-images/1585352713244.png" alt="" loading="lazy"></p>
<p>##case 2</p>
<p>选择前2k-1条长链,然后x去更换某条长链</p>
<p>就是<img src="https://xiaxiaoguang.github.io/post-images/1585352967733.png" alt="" loading="lazy"></p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#define pi pair&lt;int,int&gt;
using std::max;
using std::sort;
const int MAXN = 4e5 + 7;
int n, q, k, s, ans, ccnt;
int home[MAXN], nxt[MAXN], to[MAXN], len[MAXN];


inline void ct(int x, int y, int z) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	len[ccnt] = z;
}

namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = BUF_SIZE + buf;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}
	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}

}
using namespace fastIO;
const int MAXM = 2e5 + 7;
struct rec {
	int root, f[MAXM][21], g[MAXM][21], d[MAXN], dep[MAXN], son[MAXN], top[MAXN], rnk[MAXN];
	int l[MAXN], r[MAXN], s[MAXN], t;

	void dfs1(int u, int F) {
		//printf(&quot;%d %d\n&quot;,u,F);
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != F) {
				d[v] = d[u] + len[i],
					   dfs1(v, u);
                       //得到dis值
			}
		}
	}

	void dfs2(int u) {
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != f[u][0]) {
				f[v][0] = u;
				g[v][0] = len[i];
				for(int j = 0; f[v][j]; ++j) {
					f[v][j + 1] = f[f[v][j]][j];
					g[v][j + 1] = g[v][j] + g[f[v][j]][j];
				}
				d[v] = d[u] + len[i];
				dfs2(v);
				if(dep[v] + len[i] &gt; dep[u])
					dep[u] = dep[v] + len[i], son[u] = v;
                    //深度最大的
			}
		}//长链剖分??
		for(int i = home[u]; i; i = nxt[i]) {
			int v = to[i];
			if(v != f[u][0] &amp;&amp; v != son[u])
				s[l[++t] = v] = dep[v] + len[i];
                //其他边向上到链头的距离
			    //其实就是把链头拿出来了
		}
	}

	void getroot(int u) {
		dfs1(u, 0);
		root = u;
		for(int i = 1; i &lt;= n; ++i)if(d[i] &gt; d[root])root = i;
		//直径一端点
		d[root] = 0;
		dfs2(root);
		s[l[++t] = root] = dep[root];
		sort(l + 1, l + t + 1, [&amp;](int i, int j) {
			return s[i] &gt; s[j];
		});
		//按照dep从大到小
		for(int i = 1; i &lt;= t; ++i)r[i] = r[i - 1] + s[l[i]];
		for(int i = 1; i &lt;= t; ++i) {
			int x = l[i], p = x;
			while(x) {
				top[x] = p;
				rnk[x] = i;//第几条长链,这里是按照长度排过序的
				//处理top
				x = son[x];
			}
		}
		//for(int i=1; i&lt;=n; ++i) {
		//	printf(&quot;%d %d %d %d %d %d %d %d\n&quot;,s[i],top[i],rnk[i],son[i],dep[i],d[i],f[i][0],g[i][1]);
		///}
	}

	inline int plan1(int x, int y) {
		int z = dep[x];
		for(int i = 20; ~i; --i) {
			if(rnk[f[x][i]] &gt;= y)z += g[x][i], x = f[x][i];
		}
		return r[y - 1] + z + g[x][0];
		//先用z-1条链
		//再用一条从x的叶子-&gt;z最长的打通x
	}

	inline int plan2(int x, int y) {
		int z = dep[x];
		for(int i = 20; ~i; --i) {
			if(rnk[f[x][i]] &gt; y)z += g[x][i], x = f[x][i];
		}
		return r[y] - dep[f[x][0]] + z + g[x][0];
		//选前y条,然后扣去第y条后半部分接上x
	}
	inline int ask(int x, int y) {
		y = 2 * y - 1;
		return rnk[x] &lt;= y ? r[y] : max(plan1(x, y), plan2(x, y));
	}

} t[2];
int in[MAXN];
int main() {
	///freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	n = read();
	q = read();
	for(int i = 1, x, y, z; i &lt; n; ++i) {
		x = read(), y = read(), z = read();
		ct(x, y, z);
		ct(y, x, z);
		in[x]++;
		in[y]++;
		s += z;
	}
	for(int i = 1; i &lt;= n; ++i)k += (in[i] == 1);
	//	printf(&quot;%d?\n&quot;, k);
	t[0].getroot(1), t[1].getroot(t[0].root);

	for(int i = 1, x, y; i &lt;= q; ++i) {
		x = read(), y = read();
		x = (x + ans - 1) % n + 1;
		y = (y + ans - 1) % n + 1;
		ans = (2 * y &gt;= k ? s : max(t[0].ask(x, y), t[1].ask(x, y)));
		printf(&quot;%d\n&quot;, ans);
	}
	return 0;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF521E Cycling City]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf521e-cycling-city/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf521e-cycling-city/">
        </link>
        <updated>2020-03-26T13:47:27.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>已经预感不能再像现在这样刷题了...唉,准备开学吧</p>
<ul>
<li>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 条边的无向简单图。</li>
<li>问图中能否找到两个点，满足这两个点之间有至少三条完全不相交的简单路径。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,m \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，图不保证连通。</li>
</ul>
<p>这个题真的是构造题啊....因为我们只需要构造出一种通用的情境满足题意就行了QAQ,所以图论好像大部分这样裸的都是构造啊</p>
<p>怎么构造呢?先观察样例<img src="https://xiaxiaoguang.github.io/post-images/1585230661234.png" alt="" loading="lazy"></p>
<p>不难发现一个合法的一对点一定是<code>两个环重复的部分</code></p>
<p>这个显然充分,必要性....因为是无向图好像是一样的吧QAQ....</p>
<p>所以问题变成了找有没有这样被两环覆盖的,经典问题</p>
<p>考虑先建出dfs树,然后对于一条非树边暴力覆盖到另一端点上所有点,然后直到某一刻有一个点被覆盖了2次,说明他是两环重复了</p>
<p>我们覆盖时也并不直接记次数,而是记哪条非树边覆盖他</p>
<p>不妨令 dfs 树作为生成树，令 b 为 a 的祖先，d 为 c 的祖先，b 的深度比 d 的深度浅。</p>
<p>不需要任何分类讨论，画个图就很容易明白，三条路径铁定就是：</p>
<ul>
<li>d -&gt; lca(a, c)</li>
<li>d -&gt; b -&gt; a -&gt; lca(a, c)</li>
<li>d -&gt; c -&gt; lca(a, c)</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/062uwbm4.png" alt="" loading="lazy"></figure>
<p>这样就好了所以我们还差个复杂度分析/jk</p>
<p>你会惊人的发现每个点最多被这样暴力跳过一次,因为如果暴力跳过两次就相当于找到答案了</p>
<p>所以复杂度是线性的</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#define ll long long
#define CT const int&amp;
using std::reverse;
const int MAXN = 6e5 + 7;
int n, m, ccnt;
int home[MAXN], nxt[MAXN], to[MAXN];
bool vis[MAXN], ins[MAXN];
int fa[MAXN], deep[MAXN];
int cx[MAXN], cy[MAXN];

int LCA(int x, int y) {
	while(deep[x] &gt; deep[y])x = fa[x];
	while(deep[y] &gt; deep[x])y = fa[y];
	while(x != y)x = fa[x], y = fa[y];
	return x;
}

int tmp[MAXN], tp;

inline void ct(CT x, CT y) {
	ccnt++;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
}

void addpath(int x, int y) {
	while(x != y) {
		tmp[++tp] = x;
		x = fa[x];
	}
	tmp[++tp] = y;
}
void print() {
	printf(&quot;%d &quot;, tp);
	for(int i = 1; i &lt;= tp; ++i) {
		printf(&quot;%d &quot;, tmp[i]);
	}
	puts(&quot;&quot;);
	tp = 0;
}

#define swap(x,y) (x^=y^=x^=y)
inline void get(int a, int b, int c, int d) {
	if(deep[b] &gt; deep[d]) {
		swap(a, c);
		swap(b, d);
	}
	int e = LCA(a, c);
	puts(&quot;YES&quot;);

    //就是对应了上图画的三种情况啊
	addpath(e, d);
	reverse(tmp + 1, tmp + tp + 1);
	print();

	addpath(d, b);
	addpath(a, e);
	print();

	tmp[++tp] = d;
	addpath(c, e);
	print();

	exit(0);
}

inline void dfs(int u) {
	deep[u] = deep[fa[u]] + 1;
	vis[u] = ins[u] = 1;
	//printf(&quot;%d?\n&quot;, u);
	for(int i = home[u]; i; i = nxt[i]) {
		int v = to[i];
		if(v != fa[u]) {
			if(!vis[v]) {
				fa[v] = u;
				dfs(v);
			} else if(ins[v]) {
				for(int x = u; x != v; x = fa[x]) {//这一步线性
					if(cx[x] &amp;&amp; cy[x]) {
						get(cx[x], cy[x], u, v);//这两个路径交点
					} else {
						cx[x] = u;
						cy[x] = v;//标记一整个路径
					}
				}
			}
		}
	}
	ins[u] = 0;
}

int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1, u, v; i &lt;= m; ++i) {
		scanf(&quot;%d%d&quot;, &amp;u, &amp;v);
		ct(u, v);
		ct(v, u);
	}
	for(int i = 1; i &lt;= n; ++i)if(!vis[i])dfs(i);
	puts(&quot;NO&quot;);
	return 0;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF555E Case of Computer Network]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf555e-case-of-computer-network/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf555e-case-of-computer-network/">
        </link>
        <updated>2020-03-26T03:37:35.000Z</updated>
        <content type="html"><![CDATA[<p>IOI2020集训队作业</p>
<p>腾个题面,先咕着</p>
<ul>
<li>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 条边的无向图。</li>
<li>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 组有向点对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(s, t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>。</li>
<li>询问是否存在使得所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 都能到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 的无向图中每条边的定向方案。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>q</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n,m,q \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p>我们考虑现在原图上处理一下...如果能得到一个简化后的问题我们就能做了!</p>
<p>比如?树上问题,如果这个是一颗树,能不能满足这些限制就是一个树上差分类似的统计就行了</p>
<p>而一般图变成树?又和连通性有关?仙人掌?圆方树?好像都行??/惊恐</p>
<p>当然我们不需要那么复杂的缩点,只需要缩边双就好啦!</p>
<p>为啥呢?首先我们缩了边双后图成为一棵树....而且同一个点内一定满足有一种合法的安排边的方法能使条件满足!</p>
<p>因为如是一个环我们就都朝某个方向就一定可以</p>
<p>最后树上统计只需要看一条边是否有被要求向上同时向下就好</p>
<p>code:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#define CT const int &amp;
#define min(x,y) ((x)&lt;(y)?(x):(y))
namespace fastIO {
#define BUF_SIZE (1&lt;&lt;19)
	static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
	inline char nc() {
		if(p1 == pend) {
			p1 = buf;
			pend = buf + fread(buf, 1, BUF_SIZE, stdin);
		}
		return *p1++;
	}

	inline int read() {
		int x = 0, f = 1;
		register char s = nc();
		for(; !isdigit(s); s = nc())if(s == '-')f = -1;
		for(; isdigit(s); s = nc())x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + s - '0';
		return x * f;
	}
#undef BUF_SIZE
}
using namespace fastIO;

const int MAXN = 4e5 + 9;

int home[MAXN], nxt[MAXN], to[MAXN], st[MAXN], first[MAXN], ccnt = 1, cccnt = 1;
int col[MAXN], dfn[MAXN], low[MAXN], num, son[MAXN],
	fa[MAXN], siz[MAXN], top[MAXN], dep[MAXN], tot,
	bel[MAXN], ins[MAXN], tp, frm[MAXN];

struct edge {
	int nxt, to;
} e[MAXN];

inline void ct1(CT x, CT y) {
	++ccnt;
	nxt[ccnt] = home[x];
	home[x] = ccnt;
	to[ccnt] = y;
	frm[ccnt] = x;
}

inline void ct2(CT x, CT y) {
	++cccnt;
	e[cccnt].to = y;
	e[cccnt].nxt = first[x];
	first[x] = cccnt;
}

void tarjan(int u, int fr) {
	dfn[u] = low[u] = ++num;
	col[u] = col[0];
	st[++tp] = u, ins[u] = 1;
	///printf(&quot;%d? %d\n&quot;, u, fr);
	for(int i = home[u]; i; i = nxt[i]) {
		int v = to[i];
		if((i ^ 1) == fr)continue;
		if(!dfn[v]) {
			tarjan(v, i);
			low[u] = min(low[u], low[v]);
		} else if(ins[v])low[u] = min(dfn[v], low[u]);
	}
	if(dfn[u] == low[u]) {
		int v = 0;
		++tot;
		while(v != u) {
			v = st[tp];
			--tp;
			bel[v] = tot;
			ins[v] = 0;
		}
	}
}

inline void dfs1(int u, int F) {
	dep[u] = dep[F] + 1;
	fa[u] = F;
	siz[u] = 1;
	//printf(&quot;%d! %d\n&quot;, u, F);

	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == F)continue;
		dfs1(v, u);
		siz[u] += siz[v];
		if(siz[v] &gt; siz[son[u]])son[u] = v;
	}
}

inline void dfs2(int u, int topf) {
	top[u] = topf;
	//printf(&quot;%d %d\n&quot;, u, topf);
	if(son[u])dfs2(son[u], topf);
	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == fa[u] || v == son[u])continue;
		dfs2(v, v);
	}

}
#define swap(x,y) (x^=y^=x^=y)
inline int LCA(int x, int y) {
	while(top[x] != top[y]) {
		//printf(&quot;%d %d\n&quot;, x, y);
		if(dep[top[x]] &lt; dep[top[y]])swap(x, y);
		x = fa[top[x]];
	}
	return dep[x] &lt; dep[y] ? x : y;
}

int up[MAXN], down[MAXN], tag[MAXN];

inline void dfs3(int u) {
	tag[u] = 1;
	//printf(&quot;%d?\n&quot;, u);
	for(int i = first[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if(v == fa[u])continue;
		dfs3(v);
		up[u] += up[v];
		down[u] += down[v];
	}
}

int n, m, q;

int main() {
	//freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);
	n = read();
	m = read();
	q = read();
	for(register int i = 1, x, y; i &lt;= m; ++i) {
		x = read();
		y = read();
		ct1(x, y);
		ct1(y, x);
	}
	//puts(&quot;Qwqw&quot;);
	for(register int i = 1; i &lt;= n; ++i) {
		if(!dfn[i]) {
			col[0]++;
			tarjan(i, 0);
		}
	}
	for(register int i = 2; i &lt;= ccnt; i += 2) {
		int x = frm[i];
		int y = to[i];
		//printf(&quot;%d %d\n&quot;, x, y);
		if(bel[x] == bel[y])continue;
		ct2(bel[x], bel[y]);
		ct2(bel[y], bel[x]);
	}
	for(register int i = 1; i &lt;= n; ++i) {
		if(!dep[i]) {
			dfs1(i, 0);
			dfs2(i, i);
		}
	}
	// for(int i = 1; i &lt;= n; ++i) {
	// 	printf(&quot;%d %d %d %d\n&quot;, i, dep[i], fa[i], siz[i]);
	// }
	for(register int x, y, i = 1; i &lt;= q; ++i) {
		x = read();
		y = read();
		if(col[x] != col[y])return puts(&quot;No&quot;), 0;
		x = bel[x], y = bel[y];
		int anc = LCA(x, y);
		up[x]++;
		up[anc]--;
		down[y]++;
		down[anc]--;
	}
	for(register int i = 1; i &lt;= n; ++i)if(!tag[i])dfs3(i);
	for(register int i = 1; i &lt;= n; ++i) {
		if(up[i] &amp;&amp; down[i]) {
			return puts(&quot;No&quot;), 0;
		}
	}
	return 	puts(&quot;Yes&quot;), 0;
}
</code></pre>
]]></content>
    </entry>
</feed>