<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiaxiaoguang.github.io</id>
    <title>夏晓光(loveJY)的博客</title>
    <updated>2020-03-14T13:35:20.325Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiaxiaoguang.github.io"/>
    <link rel="self" href="https://xiaxiaoguang.github.io/atom.xml"/>
    <subtitle>仍要向下扎根,向上结果</subtitle>
    <logo>https://xiaxiaoguang.github.io/images/avatar.png</logo>
    <icon>https://xiaxiaoguang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夏晓光(loveJY)的博客</rights>
    <entry>
        <title type="html"><![CDATA[CF512D Fox And Travelling]]></title>
        <id>https://xiaxiaoguang.github.io/post/cf512d-fox-and-travelling/</id>
        <link href="https://xiaxiaoguang.github.io/post/cf512d-fox-and-travelling/">
        </link>
        <updated>2020-03-14T10:07:50.000Z</updated>
        <content type="html"><![CDATA[<p>第一篇博客</p>
<p>IOI2020集训队作业</p>
<p>首先我们考虑环中的点一定不会被遍历,然后我们就可以把环中点扔掉</p>
<p>紧接着我们有一些有根树和无根树,有根树就是树中唯一和环相连的,因为这样的点只能在在最后选</p>
<p>那么有根树上怎么树上背包呢?</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>+</mo><mo>=</mo><mi>f</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>∗</mo><mi>f</mi><mo>[</mo><mi>y</mi><mo>]</mo><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i][j]+=f[x][j]*f[y][k]%P*(C(j+k,j))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span></span></p>
<p>相当于我们有个长度为j+k的序列向里面放一个长度为j的序列和一个长度为k的序列,肯定先硬点j个位置</p>
<p>无根树?枚举那个点做根然后有根树dp</p>
<p>最后不同的数背包+组合数合起来</p>
<p>注意无根树中一个j个点方案会被多算siz-j次</p>
<p>code:</p>
<pre><code class="language-cpp">
#include&lt;bits/stdc++.h&gt;
#define ll long long
using namespace std;
const int MAXN=107;
const int P=1e9+9;
int n,m,d[MAXN],w[MAXN],b[MAXN],s[MAXN],S;
vector&lt;int&gt; e[MAXN];
ll p[MAXN],v[MAXN],vp[MAXN],f[MAXN][MAXN],ans[MAXN];

inline int read() {
	int x=0,f=1;
	char s=getchar();
	for(; !isdigit(s); s=getchar());
	for(; isdigit(s); s=getchar())x=(x&lt;&lt;1)+(x&lt;&lt;3)+s-'0';
	return x;
}

inline ll C(int a,int b) {
	return p[a]*vp[b]%P*vp[a-b]%P;
}

void dfs(int x,int o,int &amp;s) {
	b[x]=o,++s;//拉出每个点所属的跟
	for(unsigned int i=0; i&lt;e[x].size(); ++i) {
		int y=e[x][i];
		if(!d[y]&amp;&amp;!b[y])dfs(y,o,s);
	}
	return ;
}

inline void dp(int x,int fa) {
	s[x]=1,f[x][0]=1;
	for(unsigned int i=0; i&lt;e[x].size(); ++i) {
		int y=e[x][i];
		if(b[x]!=b[y]||y==fa)continue;
		dp(y,x);
		for(int j=0; j&lt;s[y]; ++j)f[x][s[x]+j]=0;
		for(int j=s[x]-1; ~j; --j) {//注意这里要减1
			for(int k=1; k&lt;=s[y]; ++k) {
				f[x][j+k]=(f[x][j+k]+f[x][j]*f[y][k]%P*(C(j+k,j))%P)%P;
				//同一棵树上相当于dp了顺序
			}
		}
		s[x]+=s[y];//siz的意思
	}
	f[x][s[x]]=f[x][s[x]-1];//只能这么转移了
}

inline void get(int x) {
	dp(x,0);
	for(int i=0; i&lt;=s[x]; ++i)f[0][i]=(f[0][i]+f[x][i])%P;
	//卷一下 
}

inline ll ksm(ll x,int y) {
	ll ans=1;
	while(y) {
		if(y&amp;1)ans=ans*x%P;
		x=x*x%P;
		y&gt;&gt;=1;
	}
	return ans;
}

int main() {
	n=read();
	m=read();
	p[0]=v[0]=1;
	for(int i=1; i&lt;=n; ++i)p[i]=p[i-1]*i%P;
	vp[n]=ksm(p[n],P-2);
	for(int i=n; i; --i)v[i]=p[i-1]*vp[i]%P,vp[i-1]=vp[i]*i%P;
//三种逆元?
//阶乘,逆阶乘逆元,单数
	for(int i=1,x,y; i&lt;=m; ++i)x=read(),y=read(),e[x].push_back(y),e[y].push_back(x),++d[x],++d[y];
	queue&lt;int&gt; q;
	for(int i=1; i&lt;=n; ++i)if(d[i]&lt;=1)w[i]=1,q.push(i);
	//叶子结点!w是vis数组
	while(q.size()) {
		int x=q.front();
		q.pop();
		for(unsigned int i=0; i&lt;e[x].size(); ++i) {
			int y=e[x][i];
			if(--d[y]&lt;=1&amp;&amp;!w[y])w[y]=1,q.push(y);//当前的叶子节点
		}
	}
	for(int i=1; i&lt;=n; ++i)
		if(d[i] == 1)dfs(i,i,s[i]);//从这些点出发dfs,统计大小和父亲
	for(int i=1; i&lt;=n; ++i)if(!d[i]&amp;&amp;!b[i])dfs(i,i,s[i]);//我不联通的呢
	ans[0]=1;
	for(int i=1; i&lt;=n; ++i)
		if(i==b[i]) {
			int o=s[i];
			if(d[i]==1)get(i);
			else {
				for(int j=1; j&lt;=n; ++j)
					if(b[j]==i)get(j);//遍历这整棵树做根
				for(int j=0; j&lt;=o; ++j)f[0][j]=f[0][j]*v[o-j]%P;
				//j个点的方案会被多算o-j次,因为在枚举o-j剩下的点做根的时候又会算一遍
			}
			for(int j=S; ~j; --j) {
				for(int k=1; k&lt;=o; ++k) {
					ans[j+k]=(ans[j+k]+ans[j]*f[0][k]%P*C(j+k,j)%P)%P;//0一定要走了
				}
			}
			//这里背包一下
			for(int j=0; j&lt;=o; ++j)f[0][j]=0;
			//清空一下
			S+=o;
		}
	for(int i=0; i&lt;=n; ++i)printf(&quot;%d\n&quot;,ans[i]);
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博主所说]]></title>
        <id>https://xiaxiaoguang.github.io/post/bo-zhu-suo-shuo/</id>
        <link href="https://xiaxiaoguang.github.io/post/bo-zhu-suo-shuo/">
        </link>
        <updated>2020-03-14T00:16:32.000Z</updated>
        <content type="html"><![CDATA[<p>目前在洛谷博客上的老东西可能会搬过来,不过大概率不会的</p>
<p>但是新东西还是会在这上面写</p>
<p>不为什么,因为花了1h搭建</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://xiaxiaoguang.github.io/post/hello-gridea/</id>
        <link href="https://xiaxiaoguang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>